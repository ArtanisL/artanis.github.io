<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Linus看了都点赞的一次Bug Fix</title>
    <url>/2025/01/04/Linus%E7%9C%8B%E4%BA%86%E9%83%BD%E7%82%B9%E8%B5%9E%E7%9A%84%E4%B8%80%E6%AC%A1Bug-Fix/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="7d262f353620e8a7fedaf847a005bbf14180bd6e40e0c3400115ea570ff21e7d">2fe1530dca8f8e6b273efd3608b30b6104738e77f86ff97e88bea03e97727081169d221abfcf2284668de7bfe9bc1dfa90313c85e5feb55119f561cdf79f7a2d8a9829b23782d41ec67bf111062a68e93eb05fc8db8f0855ae6fb467c91ade752ca2fc05841278d3e783763f6c8a74fe8dbb2a30bdb04c41daea3165df59bcf17187d1c3941f834095beebb19974729f0a07831c64e1d8eb3082148333985284cc69fa2a5a3820f74fae060be08f9514e2caedd93cbbd96c8d8a203d10b8963ea2bb8eb32a815acf1dcaf9260d24bffe014eaff8059ff012640ad9297889f0b76a8ebc4af16630cb4c7ba7f23b76f45181c9aca678f6413288dc4770cb67db55dc04660bdcfe84490cb235e2f67059191d6c9e68ab43e0d16cdc9fc55da45ffbd793b47b41054b823b762abf4810a4daad7d5c331c35bdf70737ff29e541d558043f76c53df7774bd872d6ff626ecf7f0e0846529c45c923c42d21093d9a504fed69ac773a19e6bc457ee8d5d80abaf727647c5e5281957374e2d50d701f2582e4af8085674bc7ea1da8bda26c25d89d7d3a5206a0796db26b54da0cc1e3d4c6cb7b5d3aa672d9a0096c3281fc885280565f4bdbe2881b0ab122429e80b951a3fdb96a1987ca42ac14b0564ea7c958d50f68319dcb3bbe02e7f884119fbb499bf577e886f3d9bc542375dee2d3a577b17507d73997dcf2a32117809bc36640d87b0268097ebd361910a581380200ad17208910e16174a12e9ccdb768638915d1ceb7bb97d35bd5d75ddfd47634d8ec57ca5ed791ed14f22aca5afca63454f22d6fffc90b37e95ba9b38429adcbd6fdf0b50092917105c4773e5314f29bcdc250c7ea88d3158bc3df1cda202f9019e360c36cd2389dc6660d1b1daeececf1e3a9cd3bd8f373c425e2abf3d58db0aff967dcb2f7594887ad42b4db368db1c9c9d80e317a0c74a471e627eb06c678b37ef2b53c4c9ab9b66702cf35ee3288ccab36080f6da07964944e7b3dc3df0bc65f7c73c857fd6ffde8bf64a1a2ec2f71ca7d163999763a4382560875fdbe14afe639cca5bf49f0f2bc22ac63c7a908480718cac95fed8af0e4b09677147bde8f6963d114f3e5a1194c8110a0eaf1c597fbf8357b6eb6e2da46a58987feb207ab3c60d9d75e214fc7e90908a4269f83c38fbbcdec53cd9ac3b1a2f6dd25cd966c9f2f37ea0b028b9813a32e6af035369ab0f73b136bd799d35b3b2357f96d02ad6fdf4638576f08932379eb3a5d9bcd0ceb60638dca0fa4d1f03ea4d37e9c10beeb0b5ee05fed15f422816cb420e8da4a7551335a09caf4cdadaf611e3d7f73a697674a21a288ad472f45c94db8382712931bae653182fd127374f0807e63bb066dcdf412aa6110dd19df33047a5bb7cc1058fa8a561f60d32930fba3290421361aebdd0f6fd5da78804f2d90aa90a5d0f9bf44d9478fa968ce457f71c039bf686b10b2b662a5c05eb3ceae0747532559728ba35e0d421362a6df8a3e343aada9983646c9513cadbaa9f78a7d7e4db7ecea48516ff1180bfc91d731038f44e7a0bc0323cf690edfede1c808c74a2cb469934a2dd806a251c07d769065d7896a2333c0822ed3ffe3e0e72cd143bbb772cafc7fabc1ff404f11eeea388ea913157c4707d6eb35231622a0d9c4075d7b54e8af52684fbe5e5346240ea1407db49a5dbdf5f58a88bb903a7b118ea8822bed3a514a6e5f05592039f689a9f75b8dca56ed1b04b3f34c4a8ab1329ac1080ad2282ecc38458f1e3094b8a5fba03bd4351dc7ede00bb4f9bf2ff13b2da2140a51aabb67034305e886d3614de7abb12a0e8132fe3fb8e94ea456437977b82953dea1273777a80231966ff5d6bf2662dbce4e35328de7a8a495347297aebede2830bf70c2130f906cd668c9f69ba0af5448471fa8485a7dcc1c125bc222d853ddcca093bf7721fcde71cdc43699b766ebaddba40501a3395a5306c22d9158a06e9bb17fd186913a6fb2a3d49810b2865b34dfde8818c89b56a00ebfa86ec9faf31f3cf152f1aa685f5148914bd3f1ddd57da2f8182b6c3e5187b9ec136fd056262d63e2a0a042c511517da4a98f621a4f7e9e76d4442abdd0db535adffc998946ff056a129fd23bc878df71e86d946f728219abb4c05b0635e1de9277cd9b06090f4ee9a1faf98f6756f7e93fc7923e595fa6d4a648b01cc9eca5893ee2613321df5d36660333b017f967b8bc6d6f2bf4b993b6ea2064967deaae1154d4421f745a406c5722c8d6d81a3d4f65bf98331fc43b494ff2814466c2cbe2a55e66e6a1d22527d5d03bae652d7a88f61692975162df8c2654ed8d08fb7e36f565f5ba8447f1c18672f6b2d6b3cd56a87a2719a23b3561d173d4b7c9845e10bf9acd9bb9bc8b108507beb76f8b82a024c189b9327a0a51c9bddcd6d298cb29e70b0ec2b18c5b73fa56c0c257604e7228f89875c3a844e4b07c32da46d0993e52c4511a5f378c657de0d710b9cd247e00db6c6b312bdf8c193d1c316826d0bcd77fd5de98775402e35e73af00324eeaf2adc945e1947e3068a4a0dcafc3c07e201ab865e2364cd2af6435caf7bc7ff6eb2c93238d5767f7693bd08239285efcb68670ad609751a2f5f748f55324b19e139f9d7b2fb8e53bdc8bd8a62aaf8a046b46ad5d244e2395f613b861b9e57e889478c04f1fa7d2c7f715eaae177c0a1e6092a961265a4d9bd93c8a07d94860220675d100f6a8665910ba3a0fcf4f7e675c4ab0c9037602469a92be4639e15ac11bbae3e9010b9de4433c6d4f373e1f2b20106620ac6354483a7968ed3f56db51d70bf687f656f4c5c6d78fcbe37e87ab7eb6b146c19419ebbbb83270051dea5460b11c4e9a059029198ac2f626da16b657c05003013381c1f0023a9a348033a872b60a3b4a38b505b008dc65d0664018056fb2bae9cbdc475cd05c2805501401ef4c92c801ce70ba9ecee55aaaf254679dcc0e2b9152d33f78d480a843b2dc548146b65b203a082bf0ffc8b00ac6ae7c00e0e2ccc7e0042d5d0d86f9cd7c35ec8c3799922f31b139465cdc699def95bfaacc4a6030ff1613619b0adfbcab5577f28fecdf188632326d1d3f56e67cd969a9f9e668152615876658dc5a2126e14e69625e6a23df7b3ae9e24c50baaf192f5c7d033c366962e9c7be2f8c20465f5ba4aba5505ecc0746f01c7ad2bbc4b25b12abb224ee841d3c733473fd2bff189101e576ebf0b2db07f9861da2e5e972e411f2c5d5bc75047fefe07478ae7c0901f398cb6838398634548383a60422c3164707cea3eb34f57b1cfd2767ad566300e997052ffee48778e146bc9fbfb50f83cec37b4f35d934c38c0ef67ff5f8ba8663adabf698273b29f9d3057a8607a3da4f45edca0ff5d060d2582339cc9900628e9a01afb1fe20eb05c61b6d8cedb976401bd2abbda054fbbb32ba11ad521573e8a59e562fdb83fd1f03c6239b458c579493b280ab02c79a14b5df18f33793250de71edfc56784774d23d264af051cdb3c341bfeb1ea19ba608eeeae6f77be8d0eb7d11e02801770169c3a57acffee973c0f52d6f89fbee1584e46611a58c8d5bb3c9b0e686e610152312d854185cff94bea42f17fede5e79aa92e58dc3aae59fb7f1d553c8b36db9e5f7053bd111aaa130f4ad05995e1411f16124f4effd2c85b0d5e937ebf7db6148e3fe0afd35fee9e950e7d22bfe7c86d9e0b1a887bce9c9a0ea133756f1463698d2020ff017c139a42d847e9d3f5f840ebfea45ca0777f675389a1359f3d61c7f54245b0b2fe269ab7bcaad76ec642ffd53196c66655c37d3fbd4e251b141e0a5e4bc44fc08e2a022dcc990a3690c9b5e36f15ad2ee233796473b04771c8ff57d9e52649395199fab3369a827c65e1edd793aa358d1b73e3b3d579a6803d91fecae0a822705df83615e42c6f4f3dd1a898b85b3a625b56b535bfe3dd1267e4554dfbff5321178a46e28db531e74390153568e74f756583cb9f3041414f006ef9c8196a1c868a8a7ca7df9761a9cc00051b7cfe0d9dea77385489fb73ed9f3960464e74bdced8c394b05cb571fd1210aa933e9d19075e70f7e6192cf2b94567b6b7d029497b6a3b83c46618cc3619b02484f9a3e9a65a506138d4d79b26b655050693811796815ffa7f9697077f1b5c635c5ed19e1c2ca00136bf92e177547a97400f0d7ef648ba63d3287095fb8d056997287d31a4b8bdb87dd2aa1511d708476d2f0407ebe75369da50d5c9c287af70a3340cc77c6ca87ee6b0b0da4af3839e956b157e40ce69f77f020fee047f8e72b7ae2384fc4b79f73ddf23fbe1c8c778cd650e3833124a036cc78ccb8fa33f68998d2699df7d6dfa250cc3c322041c17430feac2ce41f87377aa8d86b556ae4232a16e7a4fe851634620e55dd43453ee741a661f1d7d803c452779f1727f7488d14a03088375f328713d74fb72abe2dc8d0ec4d3c34ec837665e0b35a147fb2fc9fe222d9e82f321de6d3927535b67169e95dec512fbed824fe98ab88d4ac93faeb4cb5a25120af29043f0838cfa313e2bf30f17a42912effff2ace41b636bf30d735b0b5223439c24bc8cd604b08dda3d1948310a9c6501a1b2839688afb0481820f84d9dc7406ec4804c4204d9e01d0df41ddbedf0636c5a724d2cc562c59a191fbd9d191e6d5681f67ae0e1154d6d6e6f13c051216cfefaf1f5777c99c33f0f2750b61f16b17d6353aad6a51dfc243019d4fb67cd1ed7160f16525aaed184793d55985f28a055b68c6538cba3cf30fa2f29590b1c146d239036925123fc7a623ffce8cb844a90f33e17c1a77c5539c237ba69a2c5595a468cd358ce46c102ffcd08251a87c7009bfe377f17d37795ad9c73755f3bffaa22ad4b5029d9a83e365cf965e2f1ba11923a44ef81c8f386d6cf3532ce61b13105c7a7ac28133ae2a2cb4f1e013ccd97d5d1621c21e3ca1d1eb8e4a35e020a044ee6bf207f02f5b736c1dbf14f786497cb24e2da6a12e798baceb5a48ffb2867676c0a0d8fc35afe4cd3791b1dc3794e8940ff4af424853e4a09e01ff9eb38e7c5054236ac3ee4341058d343680ec396ec39652e47e52d49477adb0d6f0d220b38ae43b7d1679d855ae377a6c6342c5fb4e131ed1c4f7542b3f4e4214ce0d8a7fd1637191a45700fe020c527f27da66c527fa6a82215d4190401e532b779253ebd4241610a8fd1a8a5fc85f5c624e7bfcb90effdeb5c26bea035234211a964c530271b6d16485a1a3bd228dc2113c9770fb1477011ef14017aac798bd664b927b2b51d60b0cc9d3f94993ee529d4fbbee05e325a28ff3b3fad326171ac880dd8c9c8d71a47928e6b3da53b629f2377a6c0e6708f625017d137ede201734f5a2f45b17dafc0c3b93f896636c5975cf1858446960db3b922d6b7ab71b6e1c53dec0d852cad1ece874c9c7272043c9912ca0667606435b24c3e63a3b7288694678935dbe9c55a0e120cf52c524087d243f85a2e21b0631e5fbce11528952aca6c03c7e1e042eb4a5b8a04b73a439f8e8a88e6cc95eebf93db79ec16d731bb1ce3b764209b2bb515d4013ee745280fb080b7e449d22534eeee8a74f46896d57b99469736d7ffae09662f1f265279304a23f5a384c4eb9020d6bd33c0852d153bf920e81b2da6d73c648111d269481344bb853aa024fd7c58847edf8081c57a695a53d733964d812bb8f4c9f07f69dc2e3138eab5e7753cbcefc7536792aa5ef58fca71eca9f7fb45a774f4cdb912f0a0be9795c7b33ec7205fd19ed9a0da46947bf4862d87ceee0d689e4f0648683146209258179dc9a208cce446d5966bff8305a5e67111367ffdfd5a3cbb99ac94231c9653dc4f27af618d7eafa8e19fafcfdfdaed6c589856886c2cf6e54befaf513d5369507ad1817c08ccfb10c50cba5a1ab3bcdf4813759efb4658eac244e512eb7673ca934e138b6ce04f3dfc4125d461b7a696c6e3a4f963b5f72ac072615d4d8a6916077850aa358616222d351f11d475b30f1ca76ae9fb2ba6614bab3c36326fceb21721ce9b05afe40e852fcbaa46da40e124885b1035631d933627c08f518a12497cf3a8d3c8de8346562e6274cb98f49c3bbb3a6588eb18419e042c2abfc0a379ea7586ce9a64b249e1d665a4dc1435e858162e4079342c0af89a78342beb6c96497ced98e2d079958f3ad51e553848448deca43755fbcda1bef4a00f5f99aec5a108a2c4ee867f107f8009608e9bd60a99cf0b9fef70ac2d3aa69a3ee111bca1210b3c20d23a73372753f8d54532316990db04e0f59d1fdfe0c61b2583673857bcc73ca7a7dcdca1c57b4772e832d5e0b3d7dc8d238daeeb9508659f322fdcf2f115c0034b099ac695ba2cfbaf3d240af45b61f1c3bbcc279d9697b9f6a44df56fa038003902e96a30c7db8715ffa81efcf9da6c75c32c6291dfc35e60672d7f616933d5b1b902128c284b5329f4a5f65768f5a941ed3c55644b4b5c0af8f620f7530658018961cc68a27c2691c6d6b5108891fa0d7fe84c5e58a28074f00586d30a56356be63ba45c5c6e69858d18969dc4f80ce734162aafc3699afc709901513ea2a2634c7c2ea43fbe60f78ab0b5c280986332a480e0a648d8b508e5c0e130761b6f9b8c89125300a4b4de1608589eb0d96c1f9f959f5ba6381ffad1d082c6d027fdb3935ccbd1acf8561e8d86e6fea9da0daaf7f98f0f36036a00617d91a3a5e36566d8c37d4aa3914c37ecf809a792529cd39917128ffc096affd8c9af56d3d10ebf88e82c827520137bb7fd5b8312cd4bc582ff6ae6ad5539090c4766c2a793fe1d66d077969bceb9fb05892a8ed5f7d1ae167f752a7dab371d3c0b5b896f43fc293aa31e8c91a518eceeb1e4aeb4a34cbf8684112cb347c97e593617b98b3e16251a820b6bb575db1636d4c74f1bb5b9c23c4a745909d45569e75b38ec4605f62830918c855db90f09e12e80a621b610c645ffed2a46de1e8491aca518f0143b5f704a5749b97bd6ae456953ef3b642b267d5513d4c3df80315d38f0a056622e34cf4bd7fe318c08346d86cc19d0c9300947b4b60d8f3f37583b77bd0cdee3dea5f2e85745bc503628882e3f7e8414e3705bc9b7069c7da6b93e1e0ce460d0a7ebc3d55e8e8bac63002e2fd358400797781f1f4c4c22d2d6007a6788fda32e73bfa01f61e35ce8a2e38a5a6d46d08c6d94b58f0acb5aa6f340dfe18cd65b7e76966ca6d719bd6b1fadd059bc1f8754472c27771d04571855a7a44d8d9d3dc933b609cd2e3f6875675043c206964badf76f94898ed3b0c42f585ac8c4ae2468e1e8db7e55a3c00ef5d2c1772c50162591368b391b26606817b8ae3484983205a1ce3a379d95dc99416c412cfd027d0248fcd33a394a4f0565229b9855afc04af9045b5a9eecf0c7dc9f895d28a94055956f466350d9e01347f47ab98f25c7b64f3e55ecf3a9ceb657ee877c7712b9fb973967c7cd66e6a070557caa491f3cb27612863d2b32967a04d4c1a0d8bb6b708801b0dd5ba755ab071153d9cd1a3073857b959ba8a054c2c96fbcf7697deec536a10efab549939e708f01ca8f1e321c4817245fcdc29a676dd0f0773ab5b9a8714106e66abd256802663e662992d498dee760c437d0998623e8f722214bd4230550edd26f4e99535db2a74257dc44d50ecb29b391d23d3882ecb5d89484c6e990dc4b8df4bb14205a6b3224e566998020bab2c40e4542f790b0b084154d38b9eb8d3dcb0eb8667abb51bc6622ed45ba0f7764e66e77cf0459099ad2f526c14d960cfa64e19548df2d87ceb1a5e9a9011144461c9607d64c4f6ce125c33c61f864b9d64e87538af3b19b54576266d590db9ebb63c7a3b6114cc50a7c32e652d087887eaa74ce483facb8851ac5117f0c22366a5fdb07b19a52e81e75c236cd8a6f83c7efd81b12cf9f9609c92ad3a72785d7ad18ac5983a9ab2526c38a4e5f507974cd90fc11c663034c5f5a735e0c624b0e40dbe4faa08078a3da43ee9b9bc2cb21e72fcb6b257dc4801664ca9f39376d24d1e3e47cc4dc2fd9e23f4d9ba95627ac72b3b787fc5f4e76fc34afb1639f33308e8e03f75eb01401b49afb339a129a32556bfa9f48ab53d3087c0b8df36f3c8de6b1467fe9c79592f3311425579e6b1561bed6a3f62daf8f9daf85cbb8b08e77ca3c426ace315964924e7db70df487604dc58fda1bf4e523831b6962e6c720f94d9a3b247223b5c448b3261bdb7a1b23964224988cf27aaa765f7264da980cda34b3efb89ba7af6c48410440d09a3ec6787fc3ab4c4c722defc0ba91179fd33f1cfc7982cafe74730009126b61ea34d86eb1f84c2f0d0b79cba80bf30860ae79c78de078d1b490e1d04ad6e9a31286f9ca00f8bfa8d325f244d753328bc4c46893d6ccf1deb025861d3217ec3346848de8d026fc74dbca06571b3a226799c78e27df52e48e0cc1862a116d81be41f8c11a66de0ba70564b82244209422e60a1715e000190a56040b5652dc16600f9eb6b495ebca86ad417e88976fdf4e27ef8cdb87d0939e895b777a57d78052f17a1f002046f12e998b88556ab791e7cb2ead5d345a988f9410ecd2c873a9871efdea2038e6abc6993c58000548b3a419d9106d6cf9e195bcdcd54c3a5b9f47e10356e3c53ebd4188d20f066536cd40017d7004100e57da75f0a700787a404d62e55535b7c4b6f9a4444658e02b4ade8f1271254155d2ffe4537c4745c5ca6df492486f1f6592aa4e7442b3b15a384610eb30b930fcb11cac24ec430572010f91c3e0f685f8ad62a91cdad1af98820b4df2ff1f4543fff4837d298d1d25e5a484c4034f24ab31a47d382ea76d51343aa38ed317370b8adcfdefcca8483218558e0a200c52486ae27107c044ac14f87517d0a94c2c50c7f99290fc95ea7f8526ca8e53c9c71d6586296f7c846755de3585eba0eed5f6349b1512e81d1f97b73506942087b13824444388bfd332ee7d23a73e43c09a1362e44e5b606837a49fc912046d4f15b98a993e8fc74d2760a1b22995d13de1e6d77a5d4355987e9fae546efb5c4c1b36e7804e26b54c8a28d59e53d4d91fcc93b655970553ccc626bc5d393e51d77e3fdc79bb8c2b0f3930455ec93dff7d8e06a0452e527461e1e8286be99c6dc7144bc8561736827becb2d1a598d021a931aef32f1741ef043601dbbf4692fcd24e7ea3dcd7c24caf7c2cfbfa2f63cbc5bf63f55b161bf96a5bc89e96f17e1e3b4cbe84675fa4974a7f05061fe11acc1f57b9824f9ca67ef78824b164606c66d6f191404ada0046d97761e108fc2bb5ae6d8da6f4bf9955def3c0d67783ec1c5276260c168d578c86e6f1e3802af57ecc59ad5b9b21ae3566b57ebdc6b24eea09d02dfe85fa11d3173ce28900d058f82fba3c97edc4769fb54f18ca41f088b96dfd2bb16a32bdd9f39dd9cc3923b21c50e68b14060cb28e97c6f90f189897db42e10408cc07233a656188b3d9cc773a4e9048a56b8f93abaec315b72c140db0f2b1fd4ae6bd85ba80c51731986a935f1f966917c7973434833656b9b8a599eb58502e3bb6a72584d502eb981763f334e3803e21704633ee9eaf84115249fad1d6720965f8a812f144c4486d59af13107e0254333f20eec5f0ad3bc063fcfbf5c74e31af3e239dfc4af68634e2b3fe6d9d4d6e72b266d927716957c0c62b396e58cc226345ba61eaf6fc7f6fae4e3d7d5d1aa6c7153cbdd7c36101f7a1b9c446f081540b63a8923178ff4145aaa4ace2d61be2e477041796e90b538824da933d2108240cb2da741f3dd715cd58d984ce3b95c6f39a8c859ca834ade81d99b1bc94e939c579071e13306db7578ab77f7480588a4987145469bec46ea27751094411ffcb78eb0ecf766538a200c7adff8d594b6d385f58ee50059d94871b9bd2a624613f190f03a286982d7c7ecc1290b19ae75744855b759599cd2291dccd555d7574fa07ebf122d92f376289c1c3395cdfee54bb5194461b19e2165b40f42ed9fad3785efda878661bf96b46a5f064a889fe286f231b20799cd99b3ef9190f473fd165c1d7904be509100a249ed35a6b9329be4d888a053c2ba0dcdbe7473ea7b68de0919554a16ba5dc3c0ed7483f9beb2a14b79f329039d8ce524e1a5e153133c74efe364102a233fa34b13f4295877c4be4312fdcc8e804a4087bd3e6c9de25bb0e080bdedbc96c20a3a3de144ee5dcee6a95f97432d95fc4b47b463859c8209c6c373c0df2d54208279eef10eb7df8f797375112bc95a9206f6b4f4edca62f7706cd3cec4fb3458b31a2e54d0ebe8f4a3ba089ab144480b2c05adf5069bdae09e2c2f7fd0fbae134c443a9d72448dbe3d9d2a2ef8635efd29ace2793d08e8d5517e9d14ec0e3e15acdd26b1b3b2db5ed8a15310d3a637598e48317013a20da36176218e062d28912756679f43274ef1d5e2952c20d0ac34cc7e4edeca2971afaa1b0e94321df449b30990b3dbf3ab4c9bb98311dcbbcace41a7ff31e8e07d8c8454089f3d352e55d8c520fe304daa987e0d514f8b99e20e487cb272116e2ae166acae1710bef943aa1149795c1a839d02855dbf37c3afe7bd31ae87102db9b4cc6b3c99b457cf7b867893712256e5ab5bd47ccf81fd09ad25860d682689755d557f357780169737807823bb2ba95fb7cc9a70686e29466e50d7afb57a64b3140e37c5a1b9a64e639e01d8d2e7adfc9fd32c625bfa0ecbb6225acd093e7b3c45a22bd71d0eb1c4c2c650023a7b5c9e6e1f86e1bfcbd83222af39e1bddc7b5836ac8dde9f8c1a867f50b0104a264f2e2d4d447a755ac4eb7436f61767ea673a02667de0e961d89256cee2df45132daf9f6588a89e45c89dc99c7d38c96b0a7e481151673c27e88ad0ad063773063acffcb9eafb3966aeedc112dde10f6517a9d0003df1b6e64e70237aafa36f9e3c06bede3e9ecc03f7832a44aba9ef00664f40adda3e7729456d8dcdfa557b515bf99b085d0eb9d39b4982602d39fdeeabc1113e6e0ecdaf7a36c45d7eebeafa408131112f467534d2024d81f4909dd50997475f3e06ed7142618784c0e0d71875dcec58dab4a1604a82a51f0fbeeed29ba9b004ba0a46123835659cef7c47e27f93d2ea616f4c3fb9c7427b3a7735b9b5841f2daba8187cbe82b959bee9e09ef5b169348b3ebe317437caa78d170ffbc49b9f3a7cd83355a75600415e483bcbadbb6864584d75a2b6bc3496bde0e9497bca86857183d56b378c2387eaad9e3b3f1ca008d2db8880dc45eb6cf0f58db45cf4bfb1d30ac3505fafa0bdf4479ade3705374a6d5363871673d1914d5b589499d74594fcfe24bbda3301465beeda922d1cb0c82ceac4faeacad72dd2c0913b2cf5c3f82a3248727dae55aebed755b90f2a12eafcd85d6d3f61a31ed65ff44c0300f52a2863f4825d459affdcc51c3cff2c391427d3e67bc62ce31f2418d496ad5c6b19cb50baece14ad8324775aaca5f8720b578c8ac46b8155f81f5a01f60ebe6d20008f9dd789657400ef2139661f251f6f7d6fe74655114f8c3607b811507e332c358f39bfde202b142a1b3283b40486174a5ee8cb5c54ee17aa55363b70cef857696e2c10e1235667eee491c9f4b256a665c1fbb6cb51ea73f655439a966bdf4e0579469e172a84e5f27d519bf52dc3d9a66a19fb63f2075e6b056dce76fadc7107dd064e47c2e23e48e5789f0a03dc1277fd001cac10fabd7f4435729161c2873db0594f2a36a634b8c37ef8941b77d1007e93447ca0900a38a7a32c9f0d27371d6bb04991fd678ac9b2e0a73901a6d903103f8408e5e376c97cb0b4e0d68a1b5afa97a7714cc04060cb5bb1bd8eb334f647e39911d993badc3ba7991b2d58a34c06e6148a79ca2227fc9fc052ef4ba192846f2b3796996f2fd542746511d21473d41bf957f3b2caeb84f7f1741bb434d7f2c3e120910499382ebd570565b8e01b1ac2f1091d6c57f8d26991fca1946b1e2dd716d629b33e03ab229dc62aa5024b7fd7d1c00c2b96578a8d3697c690714bf780632e8db10845d3041544f5bf156c1fd4d212c41e9f4beffcb63d9fdccf197cf29f823c05fcc08b396f74a29a719f5ce1227f0c370578a086e81588f378d7c7ba2d56ebc4766c17c921cb7797c7afe961aa0de102115e1ddf426da91fa3632372fdeb95709967d560928f8e0a52290e8f5f10161fc48e79fee34293bf3d7a4d91a18c26fc018bd6b28050ef69021f795832f50178675b4b93900d8780e1d718ac523c47af2988ea573ea01558bcbdd0e13361a0a90d399996d8f4b660155da68ef8267665c64f275d7713cc5928edbaf7e7ea4fad2195ada84ea32485dc6a92a009a239d093627e27faef9163cca4a0f8e5f8182b700baf752af8248cbc1b054fd5d343c8a840dd6b5ae5ecb6b50128d9dcf075d85c32b19a9854cc7a9ab68e37fdd8a8a9229a8669eaa935e751d84f458a46da983fc1db37eb65a63a3608a50e42e0079e88dc4b3c6140a4013f0a59e4804ed75d0de3c95ad354e4afc0334e766a5af3f25dd129cb425c0e76bb3f7f85dead9378335d3dcea40e94bfb2d9aee0d8326c420e1dab8d93ff0e212ce498a44f9824cf32dd2e66f922a4b84fad17774b8b8697c5f42ae6c1d36ca990b9d473f2fff7f4be31e0f11585dd68b870925d95bf3ebdbd8576fca22b66724c988655ba1d673009342ca6972a0d367cd89ed95a873b03510e77d1efec69bb729c3129d9f128b2b941c102980f684eff8f0972010f82d1d9df69688dd3adb0468c9c2621fbb0918178f8c13d824e3df71a79dd8587423fc7f01bb1c7197c2c08081b7e77305279f5bb7fa435dfd712740fcdd75c4ccfc069e84ddab922e8d1a694cb58394dfe652a92404f06f56ed95ea3dba426975296e373033e6916a41b77b5b32664466c29140a752bb5d327c354004a0faffa76643bc68bd93d69ccbfb772c1ce42635ae1b20c5418146c6bc851b116e99cde85dea10aba8d9c590967d0d6eed05c8f12d1d6d539429b2f701906c51da8a6d88cbbb8a28c8f3d379b98db38436a4080412d051acf6ec0f8518f08f3e15dc6aeae770482beaea84a2cb7e4264cb4963deed06f04cf9d36a022cc95e1d5ca42fbb5afb1b58581dcbbdc62b7b1319e93690ff1cbce948be22625272c8477fa4ce58c0b9d2db7b7aef198dd1b9ff1ce68a9d9c39cef35051441b3f6affa30add628793741f445fbc2ec10e923d2138da8fe5864f9df72a94966a1f2cbb0b687015734001f3f2544a9a81aab1267bc0a6f8b9a541a7d07c3f644660325d79bc48c2db1ac46873e242a671f1fa452637105da913dc20667ac5a4bf94912f27ce3d7881402263f235efd1f872a5ab5a64a67b7671e515d8d34ff7db4d62bc39f8b5235cfd321a046c0ba974c496e88cbb33770d0eb330bd9a409a9edba1c70a9706345befbf08abc6ffe15a6f80eae81ddce32e1ea549b0bb35d85f65d234fc4c4e2c80fe9b4f3684d6ed119aff7695ba32e69569fc7eca0ac5aee375e9c489c2e39a547dd7daf60193148cf1cdf2987fe2be9daa1b8a805f014916593f72ec11ca95ccb19d9ab29db4d74b07c67f2342e2a25fbf8194add834a14a0048068ce10ca8e0596f806e5eab72988c0373fdbe59061596f301b153559416994d46b593ec9f9a94ae738545355254dbee2828bfdb65411bb73b03607100464383c92a8e1a8124cdebe38c5b83248a77ea1df94a7f4288d52789849220ece145576ff43f1898611cb0bc8e67d85d4f9f1f0f329fb8af5a899a5ec60087f48b0a366ef5c875a3ea5945cb0adde96501669abe954b35fe70504b99653eccacec9c06afeb3575f245a9fe2d1eb23770c1ca3292bca545efbefa11cbaa130ddb16039996cd211745ce24625955ac00feb13a20bcd5ef29c24f1c3bc9ef04d55a0a9ba391f5ed3314b2acc28c0ae3364713679c77fb9dea26f0ff7c3393517bf08808eedeeba22365b85404feecddf386469b6d0091a2603b6629b1255602799dd08d065bf5a7ef226f8a22c227c293fa90b871a021cd36825c370bca88ba5b6670485a613d033afe4b616398089200240a002d0fd92d9fe3d3e96e0e998124da4f7d7f68087c0d5526e02cbc98577e0cc708f4a4b6c520b1a4baecadfe52024b8896ae7171f574cbfc2cf96d06f300c3d889962b1eaac67eda5c226e10a2131cb0c0434e8906d636ea4d722f03fe39a9883ff04dcee3d580e2a8703b885ab69201432eb044faf61d649633e839540089d66f574a67bc08a81254fe68d82c0b42c5675509cfeb9b396744aa6954b33361f3d636310ea8757deebbdbe5260ff0a8fced903ad782388a841be433ee43da50e2c61066eed84b92e54871ba64e0ad6bba11580415d99ef100faf17f58861d5e25593b938266fb9b48fcdb91c3663a1b49db17de7e4eff0787858d34a3becae7a2ff89dc03f185bdace47cce36f33bd5269fec40c1d88768c0d359538659a33001a470384edef8ab9f67c88e4d89f1ab7ab847d7a080abe76419c4615671e06ddf7faabf3264dd42aeb9e551beaaaa7413e2b8598a10ffbb4ff62e09369c4327d7d263e05cc0bf313346629538269ceaff75f7cdf677a6ced90f648b7b158280f44ed1fb77cb0de47736f3de13a362bc6a3ab49293cba63888f9e5caf1e60ca07e8813f2e2e4ead8e140efeb8407b4a6a4db40184a7eaf35518cf41d698fd619a790444d1b4dda22359268d4dd9a02bec3cba8509778f7df7972b4e54113303a66df64c5bca154baa9b4fb4877d46c07000761915983cdac0807dc79c8a665d11b663697785e858be49643d5945dcaebc3387e28861bb6400d7094498aa3b8885fc31873fd3de424113e8bfe15e18d3c4ad8bd58af9f959046f4800d3b876724febb98fb1ff2e17c52807566a62c139ed43d514ee60c20cf1926abb431e694bade9b54f77961882a869b5357b04b98165ee80398ea5292125a7f06871b579af9172fa191ef75b1c1168d95814aae7aa712f7a48dd5c6a9b416d9c9ff9a9c623229baca55895e528b4476740fcf7824d4ce1218517ceb7fb7ec654acdbb00cd12d453cbda38d75679d60cfa2574d2d02f3afe70c05281afd307f7e19c1706d604e6d3da742331c0bf798d5a0bb0e83d864f9ceb6d98570d0abfbe2f4d147e80a017d2bf27582fed73142f80535ab5c8c28f0111154d6662d2d60f56dbe3346e0c485ac318b1f86497304dc416be3fa471e32201711974c34b4bd6b8d192a6cf6b73b4e6e12a20eabe16740ebc65b6523b56a2eec4212386746198d01486b90934dc08c09c3a5b74b71099542e89610de8181861847dd6795ac9f9fd7d46aedac299de758ff3182cfbb718cc56031234bcfc89510431fff111fb30bff4ba4b5afd1b8a707f8f8ea6d0aa69a4865c95c0a1d4ab1730b3b2b9c4c9d733280bd7c6def97484e636ab54b07effc4b98d99df1ad08a2eca2ac0a5f7d87bede49d90070c71b96ad84b35062a6cefabf0d0e68dcd4adae06f5407be56e54cb4e79e43a7c0b31023061064345863b8dea22e0b3720347bf36fee5164fd789ebf4df9484a44b3b0cfa01a27c6cfdb2ebd790bc3c242d5c22cd45a8634ace2b3410631ef6c3b79115c841d4c1d25af655e6bc9aacb14471153dc48df3ac5436738507c5e49f6c7c232ca39a6c449d2d18dd9be987949f4ee7de804ca91518b92e239835c5d3f0ea1db5cbcdc15e0d6bda84a3bd9b797f4001c2102d73007daefa0ec02de43ed4c44bdc9ed5d72b3962cb747511c0c9b909cc0fe29b0119a5e57c5423d5280dc6289dbfaf3b13dc0ac6acad4472f2b8dd70199b1bc99b919c21c338f1cb656e0db6d1964347d6a6eea86f8c3f4874aede7cc01530027e7dbf8c931701d62fd13436a83b9ace825e336dace44e45dc1fb3096ce53f543f9116686e5079f43583278636cc3a935c7bf1712e1b4c9070b3b4a1c278c87d9e7ded961122e7c84b4c95f479d2a6fe715b4080dbb0a2f087d943881c16ba5612b4c767a8905433a676b290b9e70d88140606c62cdb5f071a8763ca807da1b44306f24355ea6bfee2eebc116dc468ada6eddb7e814ba109ee90c1c57db57deb051dcd1e8727fc160ce933a52d25bc459ec8f4f74b2213122e230c7baa5c7660609e6d8854f68d4ff3864349b4b50d84111c3d66db44ceca13408c4885e7816bff105411b6e6723e57badab11cc9f305daa8dbc5f8c13f3902dbe5d34bd6598e8203c6260e18457b68fb6c08fd55ede0b2dfbc13816a856399f3c393876d1a224bc595905d9dbdfd69b53b87f4f48866ab738f6216d1f81e767a99e04e74c545e40b8284912eb469fd05c107d9e3319a30fc045df1a04d9c00ea78152054d5eb04e64e460ef21067e62ea97689b299fada5032b0f1ae99f718f50d6631ab3bcc0516de397fe5dae518e8c532ae3ada421e1d9731ac1d0d93b42a4ba79f99fe7b5bd57a7c34e8a6b87644fe4f83b1c2f1a3da19a33b6ff9bb56f798eb5f3be60535d93e771ae740128860dc3f9d3fe0b04765f57d507c3f3d2c80f818bba1736e0459e70543658e3029502d37875ffdaef58dd3de01f4b71146ee43f43e420bf566ef3e31a7482b18237c64db31f4a1cdc7b9c98562b26ebcafd29dc7009237618a26d601bae014ccec43d532357cadc22b6faeac324f9a2156bd4d3873011da31cd8c6dd5302fd91e7717e0a4ae9e71e8a06aa65b10ebd72ef6a7f6576bb0e1bb981a65ee3a819a46f46902d7a8dbf1c3700f72dd5917447d48d3388c12ecdf452aa2468e84f55faf1d8bae06a860f1942f34068e10607f394ea353fcc6703d5e6bedaacf3d02a1c8eacb1a2cc1c50ff91670b5442b005379339258b937743ed518911a92c0c0fb7ceb4733bc2c3dc7f63927ac92754f76ff3b72c1435255d702dcf31fa720cdb523142ebfafed27d4fccd22d67c572fd1287dc99f6a77b1b9cec4fdc1e044165f5563b04adcc7c83e1fc7fc297bdcf20cd263c8fb85a32a02b3f73d0e98ed90117896fded45800b0ce84cc4d0cb830bd5423e76aa6e67f46a0d6fceac92b6d8fb7fd35be2ce706fe1b2f7dc5885272ef2d5e849bec4cc1e2749d8b3b0f611772d2fd149ed3372f2f04e9b3b39b4969ac25ac4bc626c6b75d37ef1d3eed6c9cdb435fbdbae25fc38e63488b5e8c68ab07ed0396b073a4e6960f32f3fca749d815b6f322ba9c0b4df2544bcb0bade79b53f27e6b7854b2dc659445545a936611d97af09be084411c77fdb7907ff366b5e656f6721b2b4b09616fef2259cf83fa085b66d7aaa97ced815842ead4b6f0f5fcaf2d43f008a7780a6e32e325c569a8045ba88a66fc6bbc8146ba12f066117c1ca69a5769ff0c21529cb8afeb33eb472bc926be6cc7bd95f7234cf748b29ffe7a88648afee7a9de9891d5136b05b1203393c045fc5a419c3c8ecddf513e30fdc6f2f3cba366f2f76ca648d23fe5eb6cccdb2a039235ea6d47f3ef65ec152fc92c87e0e23b383a980f3afa8ebb06a8afc07570e5817bec428cc588ea898043c54e5d52f9a2ddf872c7be6470e49bda772e84780bdf128db47ceb75f7f184a9e7a8f16959c878dc9a15504a49d12bca608835172162501aa084d980e10dbd05daabb5c51e8286b5868e0e26e7fc634877719845ee21d8b5963cb3c3efdbd060217738f1b9e975da2fa0632e8a5f847a40179829e2b2ca805cf5bdd7136cd4050ddcadd74e76580a024316feeda5c7d26315d292680a2e4a621adf2e09c8c94a78fa077972580aacc92792898802c9a334cb86346f284a6f263ee8e7f936a9815bfc94844a3920654f6c4c662f46207c56ebe24444c97739c5bca3776a4743d7d25350ccd6b719ab3bdf04caaf305d35148a45734ec7c3a2e44181e0eb3d6ea2c2803443331141bcab00240bcd8639e116c73063b5c76e4a2d4839fd3b71569fb140886ccf4c952cf2f98c0fd555a9334dc808109cb5fb44335c419a4ffd59c5d315f0767af4787b2b64ff7153f5c44d63f0cfa676a3b35e858c09bc92ca76b31831eb674265e647541282893752f6185b96526dc60e941fb85a74c37f1776097f7605b8428bf90476a3629e128105754378ac27eda536062e75f830522ffb3e4fe255ca1b0474857cad034863284cff7f33fa0d01a0d3058ea039280650fa3a4cee71c6ae2c4cba490b599eebfce210f80e628dff3128045f99e93b8f6683466e3e1f352b5107ba6ec46351257e1a04f0b43077b63a85cbb5fa8dc9a5a4d453ed1c99489fefb5bb7824cb47415ebf0cfc2118fc065a465476a3eb5d260517ea8c51acc3362bdebe47f7702b91e4ba407c3adea303864e90aec27a23dd875bea617a672d3dec19fdf70f0948559335bd430e779ff07810c496c42dc6744a8d1396808731956083021ff136650d9d5dfb57d0b1da6d15c5e2f0c6bb77e4f95989d160855e84ab8fc565250174eb180eeb367968436a897e892aea2484e3c0cfccc507f9cdcd23c9ece2910b0f01fae2bc76bd3209b40a31c0a88a1cad2acd1b15d965c6e24c4eb0f300a63cf501d83abbc4e61ebf66c0edb84be4161e246f1b89ab654b63831ce7a4c8b2737e3ac05a704c641a06b524266c9cba7e59712a12c5a668b797564a431f8151ca906a828e9ac92a363500c9b6a88581906ab39881b44f450e6b7fbd3ca992174d478965ac0859f010043d7466e2891db8603850b6a1adf6037b8a7dcb48f07a2cf2451781190fc8d2a8e0a3878d0a8d30308893da3d2ea7eeabd80266a7ad27baa0d04e2f12303b5755818be26281d1285bc92766e04eb7cd45b13d9f0131ce37d13a7fae4fd3059ecaa76dba73cfe1bda534b7203866b9f4425cd70a375659021e9130154a3bf6bfa24516fed0e0b75a9ff66508f3724b67a3aed7f029a4753781228120686733b2a70a2379f58874b251ea1771e5c2e0ede9e56c3908362bad81b8dcbd9c8840a25b62518842f60da8c7c4cd9033289c10d818bc0b87b093bc61d14c8b1d21939b4efefd91bc734ed842f03b7933ca058327ecb000e8d71a184af4c8b73fe4e8fcb73340bf142af19679b4debd9a751878d7d04ac0e245fed87b944bf7012a282212b9dd9d5fc2aa04f8dff227b89dac4d14491f80682d1ed863760741e35e336f5f6a0da926af8bfbb40f0f54b50fa72b2f3fb80724149a9671ea06a037be98a82ab8606ed148ab9cc3e45cdfc45321540922c230ceef7ebec93c523177e6393509360b76cde2a3420dbfcfeea966fbde9b33c24f3a3f0f49b35833ac98d48af3cf77282a5134505976b825fe80a0f59c134efbcc00ddfdcd11ba9149f641e82a104e57697051411e3310a63ec73092770a9946af46b0f588fbc51200f646fc6d22a97f6c1165396703bd1916b3731954cad582a4a4941adde0a92d0e57c117c46110b757bccad8aa7478e8def1cb61f47516e564822db6017611159471e3214bc37c7b50650bab200a22c3018b8e12e5712c347446ce72f064b8f77db27b46f65f2c8935f1388a461af71d1fa3930dfe642e052168d7620b8df7f5965b9238bd78a94c103842a0076639c85eb635db65da780e40fa912bbbe91d1c6685ecd585fe186a830738368241f4e00bff05766bbb90388221f9b365b0fdd7b997e8d12d05a65e5246f9af87ce5e8e90f02f36e77abc17417f04ce860b07dac05ae46d89f097fda72c4665880cd22d467febd6308b92682b3843bcba11d7e8ad85f71f3b27f45b28bca808527cae217865012f51172754cdc2a257ca0a18d4c991acae3ff45bbc34c33426250bd65930357e6bee0295b3a1fcf3b37456b2d6d2fba6a89c53428d7ee19a031fd92a12d8c1d238f89fdb4082aa0e746e43d0ac19c99b2088a093d5a3127b806297ca9c42a1906e00a4747124f27d94eb6a68b1309e3ff77fe68f269f0d71e85a2daef088d78c1ee1229d0ac711959f9b3f2ff4906e61769b14a4c33c09e06bdcb256307d8b5a2c3e95cebf483b219a20a70339cf5eb120b28781f4ed46fd3f3f718f47cfea4a4a53f7783970d1a5f68d3d315f705b613f61530676b99ccd1ca9bb7e89e7b1202bd0bae5540e409d7beea276ee64b85f76dd9bf4d96d9c73b04266e20b0e3d5314b6ac9dde658ab17eb76f7c80ed0e91a494addcb841e7dd2c7b1c8a83ed4ea57cbdd045a9269a98d7e71db988bd5e3504da638c465070b0f823c942aa1bd98946d00c1061985716ffbd8deecd1396c93c4afaf16db2fe856cbea51c3d5ba6bdacb49d983e9e03348acd35a6e51d5bd14d1448656a43beb9e5fd0c3bd52543e8345e9a88d44f6c684d26d3ef8c12032928a9500468e9edd67ea1b8790c3875e1c1e659e604bf9c466185c3df8d32c1d4116d443faeff84dad390087752e6e4dd60bbed3283495e020c3ea09979893aaf4209c07b218464453366b4650f0e7d318ffffd469e2d7808520f139976c1405f620aa79c74d9eda81e51e7214fcef603192822a5f91d33d2d6b0ad84bbd66e2e822c84ee9df9897ed4b20d5df5fbd688b9fcfe6534f10537b4d6f03157577ed00cb5a46b963ae01233b4bfb0e513444d0c721faa53903ec91132e90607d6f03f938bfecaa4c8daec36f20215b24bb0f0abcc8b3df26409dd067d28f4fc0062381f9ee81030abd67851b0ab340a345831606ed228857ac8329e0a4282dd2f074465561054c16fb91bc1653b42937f47cb9aa700f464f0099f359985ca7b00d115fb72d6a15ed6046620d9280f5e76a42ca53189ebe123036a6f2a5c2cd91c78ad02ff74e73ba2611e68cf4f076ee6e10f403b0ff167b7af5825729d5c30742f32bb79a8c22a6aba70aaa79ababf9333e46a7849770b66b4a5fdbf0c2bb9976f9e2a6a1ef8ee2f8b8e8b4462540a39576faf0504f6fbcda3975bf381c035138e12d0ebd49c2ffd57a29d834eff25e3a32ffff5d5947e5457a11e4300c9b25e1e8b7829c28b820ff9289f8c7fe8bb52250e27057427ea49ebe955d5667d7d1721a6ea6cc799b50d4990c8b164d949b1a19d4773a575ae7c7bf4eaf780c3bd3d41952278de6e35ecba364a7867ef7dd4e627a84660a0278d9350ecd5c6e97b7108954cb867c8864afe9bb8db84972520adc173bd98158b3f5835db5efbfc1b4f8a8a669c15a1c36b61e63cad0f8305397c214cbdd59578031ae8384c0d982295d5b26096224e0e614685078cb58bfe9a0e296b3826ee4b97985763105fc3994571739186bd18162f364075e264cc108455baa4bf3463a95ac3d3b71f93b20ce7cede1c82a6a8cfdff94fb596b8aab02140c9152fd324e04c6c0484c06cf6156708acd755ea16a9eae9463f4cf7444dd39dda3d72e326bbad5dfc04b3bb111025e14f59df5c9b4b352e9413b3dc40037140a4ee9a556816825644e5ae0e655acae21f36f1c3b1f1487674a33ed0265fef76faea61035649ca303887edcd2791b033cdfea68197d79d923b895f1dc3e1bd5ccd47fc2321e04a13bdd67a65fd9d5f092b664bb77c5b63aaa13a4e91a72e20fd5147a63761f1deeb50de7444f21dfdb795f004890e09089609b84850914b4a96c66a823c7c40462d40ea1afeebf780998e23f9f037aede8beb7a9b3434f2b72db553727f5f14af178228278be3294e5c96fc90373db6b59c6536279804f32149c42c974c8d84df4274bb518cd7d6038e6c9516f774f7398a197393e1113d2111ffafa4d6601957a150d5e2f41ab419dee852f90762df3e6f3382d7e4e2420b4595b257361436349febe2779a457c4a8d68e1bd801587f97e0eaa5eeef3097f9632eebd07ed374b2f83b88a7e606e6f967bc59288a46189c16751fe2326ad17f59878902705ecc241cef9d06d95b5b541b8e2d81db1a92d2ea76195e7293fb3c84ed34ad0d584f3615e0b472fbba0c076c0ea63ce1cc22982987f7f2b4e35cedbc26890ea52985b29aee842321bffecbc54f99d34b944e450fc5440c9605d151cb2cbd4de0ce31db0604ead44b2d9f8e4efd2de51fb3c5e4c2c6b5e727670c66a39f8b8a278f468ced982061a14cb90eaa802823de043c6130b2d39f9b21c768ea53df3464a2d64979be71b05607255ee466d85ab40cb07e611c139285b0ce4bc7cf65b683140c73628ea7313577c71b7e1b276e27064a1a9b123a97fb7a418ec1200e38bf9d2721d096f70e69968c93957ed0811ba89ff7d303e75056b2244caed69d35fdd5eb18480960924de5ddd7aabec650649702914f90c31701bf214dce2ee34c6a61c3c2b9a3dada5036ef86b1231271f9c1bac36c9c80bdd425f998c9b4851910c810f72634561fcc9c653267b7020747d521ec717c7d9edee7f6c9e2b0f2749713dfcb5a1b0ea22bf767a0f2585e7c15b6265e4d40c4aed411934623b47fc635c89b7eeeae060ac202181bed723fa42c51d8e83d258b37b27d363c64c23a6731ede485f8b1d98a1c7a3c95f5686b50ef643392c3e143246fe0ea31f476bfa944e3cf2a600e9f88adc79584e9b71aefb0226b35c84b3302f7c08267a8a31eaa3135e557a98c40275da2203d8c2835821297c667bbeec4108017a57f13d9dfe53a8cc62d85e945fed6ef6421025d1b826ddfc1122cd5d57f272dc5338ec5ef9ab60bb6436a1f8776ae452f3b0293724a81501cbd0c10f2c173104c8f5befdab56eacd288396db294563d58ab70e568b2555dcc38ffe33d4452ce57805d22f685cc13e4fdc30cfc172352acf62bb55c787c860ae6f3ce3a9ac7409e99bff17e2f2f00df3321fabb0ca3ebd8493f4a017fe3b20c6f3740cd5c406a1eedecec92eaf2dfbe46c327977de3920d3f7df75fc04eef33f096503ff445508733c23f4c58ce434ebc85754a200e590b05a4cc149335b8b953f274a93751e386ec1785f05c77b4ad1fcd85a01f680ce05b1ffc1a38e18c534fcacd3c55fddfa4c079c0a353ecce9457ac0a10d904c199b392db059971f15d5fb532ddd6c947cdac3e09d7c0827282f3af85034fa1694a9bee4e08ace9bc3b64bd1fc62a191d116082a7c5e48a0753d6c92dbacd5880ab3a15ca3b0b182713e5a1db4c914624c48c37a5df4a4cbd71f88c7f58d275d31e9fb2324079d3bd5206fe3e29b7f492814159cb449ea34595e6653f1fa6e3c6c79fb42bc01f48cda8fc150d6b7c6a0e08d680dda25c74a301b23dc5fd696814263bab87554b5bab789af1bb745c11c438582e1e58d53554148e7ba7764fba1c6e1062a556a798beb998b517847ff58e9b7aa2486b5618bc37fdc788526c77c00cb519c7c967899152d488d91c7c977aac4f376d68e66c8ff057a8f439f36f3a54929e5e0bbc381074bcd42b53f2148030d73e70956f9152336035428e892a3836938c880cec0e1c21a3a4ba98bfa5035d993d7e9446f010d82102459f92afb84315db0edfff65461876c2f4e2eebd2ec21592e16501aaea3731b630c47aef6bb7ab6cb7b633ea186e62a9ebe2640e50e2135e5ef24920a6b76dfc022038873bdb758fc52d9fa51c16c46a6c32c6ab593c8366fc72b5715593e284b552f8d8b76a6d5d52262c349f29e1c795ca32cdf0ba4a094322fdab1a09c8e93499f4e973835c716efc0a91d3ade92680f0db26d2be378130b2ebef11fabd95d1123d0cd5e1359e232ed527141a7d3b113d3454ec65838be017d2c5368336adfc4eca0ce34f10473437b8c312aeaa8e65026cea3d24f885558a6f8de4e9f33ab2e1db94a1e20c831933dfc6fc9228bbba3ec258dddcffd47e73aaa0a637a2c648b56f1824b3ec5cd952d2abf440f6bcbd60099b94631eb92cfe11a7120e0af26a39e7b46d8289ce4aef2dc4b02d4c6b37b3ff12b354d4f8ba99e85f28fb9416308975f8d50b1f621187b85d9b734e5823348a721665316125daa6cf09d230a6d3a54695399fb47bcf2f4d46e88488f052b7cc5254c84c023bd46c7661ee980f717abcc5cb0d03b1629132a43208e84103158f86ef4da8158315ea2a3ec88c27dd8959ebf50f8f5c56a77d13ad45ba142f275fd4caf5bc41d7b168fdcd4dabb6402b26ba6d21083bd1050b96d0c7a4508be9282510ca5d9971e024ee7d547e36ab9063dd4192a879d31e8ecdb48911c0137ffa0b578dc8867a9011084de1dad05abb9b49289bb8d5dc82de4b0e255335f3a6b830b6ff1873ff11b4186d0135bf2620e108c7a8095ba7201bb6ee2bc502ff9b1caa8d1466c7728a04abe77a9c4cbc7d39cb6790b2ace059f0ad0916f3ba43e1952a591bc8d5105c1dc1920f13f1edfe0a4083d0fc514e1650db1f20a284c78dc2ef1d295f089f2b90c56085027c35ff79f1b0ccb9af1ccc8e58b1dcde6d05122ff46f26f6145f2b04bfe722262984665796f3fc0665e3ec8abeabb41dffacb9ae40afa1220670ff84ec38d710abd2f8461c96518b2628bf1cf12b262ddbbccfcb0797550092dc43e4e5cc6bee649a70cf550fb452235f457afc6cab9a4b3f638685e4981693e550ecefabf1081a0ae256cddba6a9a7123c25f4c5c12b8b00c56358777919ab36fc6f928e7be37819523ba8a05815ef9ec287f758e83659d2b199e678780502f7e1bc49288e7e8531df992879aecb108c4a49c6c172327076d8cf03477c7e8f6412f1df46b2c6a54c8bb85d33e53976934d8f799454db24cd1ce25492167f09fdfcc9cd417caed88131c8a21084bd0e1ba5d40738577911ad3a73f989652b4aeed1cadf3e10d1c90e9fb5be657dca8869a8a92f74a2b84612afd33eb4d47ae0d1f26a33faad34fd27dda5b06b67bda2e221909969ed1ff779acec29a3728a88f63b11e76c9aba45362ff5243bd4e67eb3ca27b7651aab834ea4fd6bd318938011a59df47af81cb2408c70b5fde83ab2241c851416a099613747fc0d3a700b2aff48bed9ad0fd4f09a5e316d5fd63c223b89c6552a049a79088e69cba219cbfb639bbb5288e89d3ff08ae5e21669458ebe8ac821e1f2af0441af39d49746dc24ef5e0fec9e357319940d5f169f3bc94e6971b09487bf1fe408abd93c88e2d85e2dc89fc10b33b28c948c5dea791da02010fcb7afc986a57bff9c0e0975da9212b714622da9ad69f1dde9e1454c08830c1082b0e8399c67716c38e234028543969acecfcc6f9c454747bb72c5ca61b8f2aaf1ce6a0f3bb0f525a49b3583d4bfa2157dfc137b3d38ab4b0d6ef34c573908d17e5b6efb6d4d572a668c3b6e7dbdc7329436deb06be1c429a41065032ddb2d69ec34918e8cf9f7fc53768d6b87a173f2d93b26f45f96500e50c30c7c71ccef50f5342d52ea80e418016339a16bf2f4cc10c6cd00ba6b34ae3c7adb0bfb0a6c99f32785114588f5169d0af2100a3eb80a6c6225e8cc034142554b6d0274467d2d50309fbbbfc09c978805023e1a2b74687eaf30975f8a89b658a0fd4e763dba3458c6e580fa873442e9b922c7bc37f7e5865710daeb9113ff19f90cc6d6700c206d326ecae2af339dc9641c683b163348c2e4d56d603506c376c1adc09689e226298975621528e1f5e1a892bc4cbcc7e625c0fe1e2be8f309d2d071931d76b684950e2d65f1032cd4edc4787b68c9573aa120c403b594dc46eabdac1df2ee2694c854d3c41666976e67f993b1336ff13b0e8c01d55eceada377a4ab318d6c2c05f1ea633f216d3c26bb923b05803d18f1c0d1f6455fc21c06dbf508c621a552b5d46161213285b034f629ab61123b3756ad6c0a87a5281fc1d9914bc1e50e7cde1de1fea010c38dc5962a9037cb68c26ac08f3fedc5b0401d6d33870f7f189550914bfb487868ada108aca6a6789bd86f02277228d8718070974f7c0eec41664c1132fb4d4dd696f69c27a0e398a606eb38a759a0da11382583a04aa52607ce2aa69a370ae17ab9e4e4683476bc4e55da888eb5c2b5acf83b054754eecaa59616224963ee285cb0ee9f2abb77e64810a022785d18592309ee7faf64d2aa7d73812c5a330e43f85a6c485de8b85c32965d1727f3f6f7d619befd45c75c99d98c76bf12ce3bfb186c0a9cc169500df7c4a90a19b593c5f695ff3b24564d03d97174ee4db910f3f48886c8569300fbe4e4e78ba3e24c06fbdb23ba588292959ab7b63ff7dcc044da4f903892f007fb4ae934119eef8019295bdc9f7160f6ff0b59cb0122652e92a6f2424cfbfe6205b5ef63f7954234f99d5e72e8eb7b660015bec789dd1d7970da7c048299a7110bba0aaf04bf0a46db392f6ed3f85c088d127f4b137d9c45318a89d6b0105d71014bf0b110d66147eab0df46a00ab80d7488a109eac4fbe1166cdaf544d23e5613128b018b17c2216c440211423652c2e1e58fbd7abdc31dd5f848abfa7ecd303aa615cdd4c141e5655984bb3ff0572eff1f3e016f723c2e7a364b0c8454592cdea300e2488be6db132213fe10b850246ee00e1863dff1567160ec9063a1bba177158e300f42605f49a2a9e18e27cc7396185e890720dd68d7b90ae27ff02d332a093ea689182dcbac5b4b6213d0f08e3ac8b1ab0728024e9f62ac9638cfe2013abc5d6af48373578cd7390f0e9045d0db3fbc125ff989e06b31530be2d000e7fc03ecf8d220445d488d13984fe9eedc1bb0d00754143cac8db72a84e08dba3c37ad76791cfd1c1ea179229fd42514d3472a4d6a80876beba9995ae7ea7a243eae11ffebdca18e20405145ffa7294391e066898324b8217234db821da950c1a3d4d69bc384e497aa85a2348f478558cd88cb2d40327f9ebf1019a8029ed9b33f3b5902a1b1e8541b1c2718fd127739d22345fedd8cfe76d577bb5b02cdb6049967178956d78a032354e8488bd29a51291433a4290637fb5fa652242a93015c5d3cca42cf3e9231eaadafa6361cee997707510a74524a6ea93784314a57e74f0a2e5c22ab412ccd586b1a4c327406dd0a8c14249d2925bdb8ce7de632485db7856f8ad224c45458bbe906bee03db3f12172fe6b253539bed5b3c887ea7fa0b298e8929f6c825335ba6a938a83b7e21c5c69f260e253f966fb8c9c00c64f75c5cc90acfe2883e0ab6db8d7978bc17b1cbda86d0edb826fa564f51f3f41a3d1f099249ca3dcbec14b65dd7447991cb7dca9ecc602d5e49303ff1aa18659325d11d07c29bff6d802564cfd1d7bfb71b5eee5f21c3d3aac3ef5e165c85a49c1992108ae382a0612fb13824ae2c447b8938188af7b203163221b6615ee947465bbf6607dd7ff8cea25593beaedefe5b1666b2cf3b68109ee87cafc52d2336b3d1597eeb03263c5b41a001a9af7254ba65bdf34f301f8fcdab1e96536c23cb115022203513b6ef3a5c7654f55e9a0f7c6a26d74a3fb6ad96beb93552fb0a2d51e562ab2caf7d5b83b283c46e5bd4541b0565c70b76591c5fdc5550f95568c428a68c862bd78f9c89e7dbb44d41b4e8e68a9f7c15a2bc06d1f062643dc09d96457e1a977da68036cdbf7d761766a908eb2a4f3b8dca0f8379664569f3f42d318f78856b8ecf73f056db8d4fc16eb67b08696835902c3f0c071e0adbd6f4cb24b4128a7e3c446f08e896e35999d2f60809c14bfff46a367956876e418748a043b8f9742a2a16bd890d0f8d7dc38bb89d0faf6502c1440564a64a67597fc0f838555409c9f1499537aac35a93af89a55ed2625e494ad2cf07b7e02ba365325a81d5f77e50ba5b4c8a56374e0a3d672b4026ee4da0a8ef6c01c991cf5b4f5574ebcc9a9da8acf63196c0b4a60a59ccc797035e6b45116deb46b1a0012b52227d301d3558492eb34e057718e735977508b76b4f25473c40c58ae0ec9d568b6904696f54ef7212fd5b086883d51aa1aa95f9a4cb8743c911ba6bbdd875ca5f28736df0abf1d4b1fd527da22cd1e3b96701772b150ccf37131ac7d912180ea8fd7675185aedffdedc5c0ea695e4e4bc0f0e834edd2ade961395d513ba665d68e2912544ea70dbe039942fd66acda397b8ea8096a746f7a3c8a13908f146304dbf062b636be1f01956fdd47960012374df481001c0af209ee7906ee26c55ffe41afb9a2188eb33b41b1e2f0643f2fb43771664ac59e8ef804c34267f6a70663bd7070c3d8885325e3a35b5a943c8554fd4e4da36d5d8667359bccb977c14ab24926c752fd8773c11806bb403cde1197ef9219a97715cb6789da249a1a2f33c13c4428390871fbfb8063c9970f6854d9a2db57567cea15e0b0bfa50026468cf3c50d2f7fa31b8d111de3a0d582c768f281bfc6262fe428230f87228c9788d460d127dc83b8dd9ed42eefe1ecc59861d965a6037d7e31b64a87160d87b5120fefa40423d9ddf642592768449ff152f3a5b5f273733e0bbed7166e2705614be9a3cf185327145672ed1ef0af99e88961e0366f37822e7076a332c93bdea27feb7a5c6e99c49372ee140d9b177828982b2f8afb804dbbfa0e99f78f7ac4f8cb7290e3eb161aaf9920d7a7b36313e48a2eccd55c13966b47271940706542d1bce2fd451a9130341bbe90f3b56a4e0abc7e278ee52ff47ea33ea6ee647c3ca5b113d7fb76e773cf60a577b34432dcf2840ba031a5c7055b71ca7b7b4d87e7af494a4965cded605b6ef139e0f9145e8c64a1a292b7c2472c9ed8087c518d75268105cc411092a1a9614e144dda3c5d4c1d49b9933e52842f3831a591c1559b870f0f68cd16cb20938f1c4000838bde0c15019d25619322cb866b3ac530713eb42326e3b262547c9cfef38e779820639a23f54f00b13799a2bc0a7fa61a0599f67b893993dbd534d9d667d331cc7f924a9edf8c1cf3d6bd51a3519e08421bad462f7729059b6bbac99927922666aa39f6c24aa0b6da81ec07c0836aeeb89c1bcb9669e5cdcd0a10d08c0f9ac1176a92d1fae1db21990697662a65a524f48af2e5493dcbc085f4714fcaa7b33aea9cee141b273d28c8e4c1cbc1db071222f0242fbba761f41344f7d75dc663392c18463883fde0bcabd1f81626cd9e9c6e984a2e78291fb2e53f8e43e8eb7c2245bd83aa45b14e9552365fd1484ea1d0148e7102b813c58ffa91e24f1504db9f8a626feafac5e74b5f7ed2834dfaeb2265c1461c9af08bcdc269431c8580c240732fc5265e77e73fa3a7e0d5d8f5d87b1a6d8327f48af68f5a198cf79f169156e8e7ed7e1dac0797a77344fde947161c26a8df3dfbe8c7a5d37c90ea9a982639c0d82bffc0e1a477d49f3e531ef6d0f07a8079d6154be04a885f346d354341a398b589d1203b907be1eb95371d79a47d54c34ee2411a931fe85d5cd2e7af388a5eadcbae0999c1d73c8bc42cb5afe88fc24a0f96d448520209f656548c61a645d23719bd61a040da8b3123153e2b246fae2fc3ba5b9ebd2cfb0bd0f1799f30d6d2607648c33d242f8652d7b9dffeb69771fb02df39df4068a07e5348fdcb0b4a4727db55a858dcb407338f0847667bdc560f87a2db1adff5e704d51fec575cfc7a20e592dfdd4afc1c97df310e3469f32680de5e5e5005c3211ac279dc0d7e4c2a49977ca700ad692da7ae32aa14399ddf51a5199283d7cf3896d13d24e747bcd0bbbb1c05685f987eb4a5b89904cf43a87702da748e59adce95985dfd9d443222b502f91acdf08d945c84c548a355c7dbddf6a182b294a4106c4901838ba012c2143007884f12034d2fc06191339de56b1e5229e7c18eaf29fb7e9aead02cf7efa2050a7c662d5375bc5725048076bf639518d0b5e0b226e97281a803939c1c557dfd3a87d0c1ecc856fbb5722a1c3758d3411688cb9cfc45f4389f738086eec5a1ca39184d629d0c87139792a27e0f0d36b1c1e9f1776de9093eb970f52cf9a872a0a2f5a6a43e873e00cfe74811e3f9f72689682c4b78fbc3d7ded2bfab89ae4b082a5f9e18c6acf252de7a8aed333dbbcdb302f5575e53bec0c42dce115b979a151c2bce18c163b2f76a4a498f1485aff1555c2c5b7c8534665b6d9cb0de578074e36f306b843aab90b3cb081df4431afef5de753d2a77ff6c7ba75519d024e18f5462c8267960bca78b3aab8cd254fe62a88fbffd4f986aa1450fd9709308788ac7354a87c3a10a2047b322e12ff23103ea73c45a505f23dcd98ffeab17c19e79418f33dd8b9b3c26465bf6e742eb4a7d8626b96d210b99d2a3b89b01c96a828b7b70eec2bfec6ef40ca0ebcd2d123960681c82d5ce1a4a4614947b9fc552470180007862462a988f1be3c73e1018ba3a6d52e648dd30adb1dfafe3dbe8a2f5784336c47054f41edad1c4b4537bb00522190ee618acb97e752ca8989ee33c70ab39b4dd6e7af2a76aae3cdd4278b9612827ebdc681a7e41448a55a78ac4158c5bee111ef1d78c9cb6af9c8d6dcb1afb7c76c0f66507c4387780fae602b94fcae6181f2f806e42f346b5c0fbfced30a405533aaf321c82efc227344c38f361c0e7e4a213c9a645e92cd3fa5449506b8e8d0e48f23902ec1e127b255ef87d393c17facdb4395b9aab062427b7d3308a02b3dc0fdff39b9094a398e8b8bf4c51d41b970fafe32eb31446be9ec619c70cf22da35dbb41f5ab7ee3701d7b1e5ce547f50768e1803239c877ed639a9b67609194dc0fa093ed02b8823defadbd1e8ecd80cd0169d12034e6a9f1632d58616f10928f9b3182b34609701889c796dbdad0b3d2935188d5e81aca525062cfb9ce5595564ca93b46b83f3083db34dfd8af597d70713cbb267ceeb69af2bc6e2b266717c3966536535d10fad8b0abd6a1a8ded43464a0fdc722ed06f81be74c8f4b21a048a6179d971d982ec8fb95ba1e89a6c5ce6dc9e512d69c7db96afa5e0464e304ee708ac368a5136f08ce52e02431fd6092922227588bbd7e190427d6509af28912ec1f623ca9dc8d2b99a6a6d5577cb50cc8d5c37324d9166047c0d72142abd6d72ab4e93c5a9d39197fc262c8fc03860ad82431fdda890cfe9fdbd6c47905d13ed219bf59899b87cbcb67dc514cb4bf66efe73cc4e783987febc0d9659192e9501037a1dd32b057af45ef38b0095a9df3ca81c9708110b0d48caedc992453455f27a734009af6f6e0b8785db234eaca498d98872f3ec971de47dc492c026455a7974cbc57b1b0cf5180629856638561d1f30b59707d233929dea94d3b4bc9037396427ceec036b1e5f98533320d2c1bd69d5f02227a0573e87282fafb7572a07b028331cee8800e7813909d169e2aec9aff02df3242ea3e167f03333242db332628a4bc76948e3894988f2e3a8246dcdf635ca9627a281f492dc376e4da7c45feee0b88706f6ac59d75c5a17341daeaccfae8850544a4641a597ab89bb85672b192588c17f9bb0af6434b0d4c811ebeaf18471e0338a184d2e5e11647a10c02da85a315ad3078d43a71fc0e5972107d7fd95c96c239905acc4830e76fa0a531d6ac39b4d3c11864ab027aa9cc1a3e8c5e884f3098ba2a2bb6a981a94f75065829d44c59bc919fd9fea1ccffde0684bd20b730c1656230b40e619f7a18eb481222f8b12614a8ba7986d18e028da0ff38cc2e58a7d6ca7e19728d564a2bc58aac766978346cb0d1e8a5d86d48defa5345e8b331f8e5d7e62026b834eecb5a58a13c266b8d43e8673c1b9e290be7df682d7c7ed812a347f5fe440272bf51e6435002a26fa26d98c4bff3beca5b09fb5b7f9cd7a2ac990ad9d6e536d1c46066279691bc29762c3221853694e512e6702e09abcf0e17066177394e9a57977866a8836a1b5d539e2040cfbaea6604883e1718958069ab8b046680f4495a1fe474c4e5efb422af1ea9bb073d43d095424c5186609b12a96c5c847f603cfdf9082acad0b73f6cf56b768850846b8c94779249f15a38580215f922210df47e8a4a0c43514e9b7f0ec7368f0e268505b754245fd10d59d2292dd8b5e758dd4f2ba9049600b0ca5f7a439fe38eded98b4a20992ac152c16f7083a4b570704b3eb180ae1a842773a94149132c0ef7f30a74799356a029926a6456f188e73fdb38d06ca0f568bcc27205628e404acc62b3b85ee857c385ad57e82fdbab481045592aa2b5f1efce7926a5f861523466754080a8f2f080a783e180f31ffebe7f6150e4a1103ce0782a34587600687bb8df6aebcf470ebb6497257daddc64badf98589510d615a296300c51374a09e9dcbd4e468fc8ab4a73533cbc57980a66f3f9051ce31562d3dcb4c220e06fc347b396f2e22cdce3da688a9cde9da8f39c74a1ab7378397020993133dfa00c044a3503531a049e4506848eeb7c31beb4fad6d5d5b6712121233d6f6b5ac047ed4d719e4ff69f5bf0426e6dbd712014c3161b1de3d1eba6271c67ab104ccc6ecd3a0800e0dbbc138ce977c2df98c0c99b21633ad45f55a127052a536652273a8e359ae233508e5a7995748c976fa0fd81985e30ed1268f8ad5dcbfd03e75d1192c80f717dcced1ee4abfe09d8b44869dc86834a1d4e379782271c76c3fca7f0b04fe0541b34234d95090c03122adc6cba37c7c84d2483bdcc52238ebfda45eb6cf44fdecf3592b04e09a9151f0d096ab447ce99540481e23b911b709fccd89cdc875c81bb1773c3aa13849b5292b3e1418c8bf419f1550b0aab0a103d524a8aac8d2272919949ae4a26ed58437bb97082b231d2429a606d55647ff7c83184f14924bb5bef8675789238ea5174e242daa7e05ac02caa40cbf6e2157874e2649f5d31087ccfd3d71cac96d6a830577011b1643a7dd529277e4983f96041ff0b7e22864cc605f4896b2d97230e01b614b7430fa6c0985a1c7b2296445dca5307f5c5b47dfbe6117534b3323b3e35bf9ab7de07b6fca0e33b98c0c2e275ce1e9fbf264a88bff225b677c1c1e567c5622a3eed0c3793dc8dbd51a7b01e5a93a99098a68479e8c083f4f9819552887ad60443378eadc254044b6c07c1a47df1a9ec4357f654ced428aae07782b30f42f9b4663138748a1a7d483e94a8ba7d10365a6410c7e7780c0383910f0bbe1394a40c71f5ea5cbf07b813358099599368d16574de213f342cf97eb076b383832f8ce0a4a1f64267d96c7ee5a0d4ec829d875547c5de74ed0a905e41f7bfd8070fa261c2d7884ebd7da878f4bed91a1af0309cf7456a959c8faccbeb64167521b9e84153e001691ca29ba0ebe74b1688e1b4c0a84fec2fd788b216d8edacbf57dddcb689a593a8c8d8e30a2e030aea25d4389e938c99631899e57d2929f799163f6c69dc355dd32861a977c95d225f7b977b3b7147d27751b8f71a72896cfaa94fdea56a124780b60cdb0412606d0f33adaa6bee94338cba1c7cb1c0b5b12f07a9a0dd19b0daf884e55b3cc480bdb4a5ce37cefda99cb1da4e83ccc5cf2c870b38cf237143f3b8212f6dcfdd67aaf8e972210cefe1e8a8fcbdfc8a39799bf2b771d9d7f89f784cf1fc84741480cf33eee27eb5d6585a74a3d4d6f1e481de280a2ebcb5759bd864144fc36c9a30192b5131a56ac87fa7fffc6cf843a0419032f3f968564c9e564bffad866f2d80a698794cf3cb668a11e93ff771e84c92924b0a4f117ad3d36199023df61096a27fa9ffa555c2d2937d63e8cc17724278e3cd294d2d0a983630ace4e2363845922ef38c03ee4a140c8d8774a7286a3679463b73030cae5da6fbf8e8b6b56d069b2fe1ba2147dd157f59b200cb29909ff32362dd915d66632f54f7476b29d68c1dabcd61fdc1c74bf33e7331cccc06aae3f5583afe5ce5beab89c2322e059a0b83209aaf96435963709e6c65d6f817a04a86df68e5d92b1767640fd50050f52480662afd57575bcd5c50b7f48c62c6a5c8d27395094847c948bbf0b020eaeb794ef6d24d6e6ac15f07dbcd9f05c79c8ca1b8d58db40fdaf480ddcd815f760cc4ac39f161d3cb775ec44a40e3ed4301b0654410efb6d43a8982c6f29b75860768330859370554f08992ecec7ed69031f88e1d4bbdebbb5c2cfa0783c3ae439f07a26222d815d5d29fa915803a83d94a0c53ffe90343b8e97c5b091fe223bcbe808468e8360febec6513fddd5a5429fca2f2eafe3183dcf9cd78d511bb5fdfddd38f3421e8ab7726c57b7e816faa57e1eeb763a22300e77ef43eda135620d8fc063fdba65d71f95a3e8181e33c7da8ff725e677997953f9de9eae91c1e6e1de92d8b600092c3c1452849a49232c11e5bebfe03ed258b1d2f0383ec8f1269379e7e7691ec9222749a4b8b2f10e4497144f8a7d19c4dc464680dc4e21bb86876ef543418dcd9a683b889376968d18a4254dbf245f4fb3ee6d87e1f42e0ad17d8420d53160f09761c3415ddef211e5569d12fe9d276fa9ef75ca99e1f0d30affe525eadf31aeecc1ef7576c9a0943c017eabbc55a47039d60a78c0d906f5764075eac12bd7178be680457eb4ffca04410fc59169cdc976b2d8d3d32199f901b9eaae81631d6cebebf8a06cdfa7c1d4f6b741782797aa5b88179342d4c58b54a0560d00ee8968130af9412260b51cb95742b0a7c6cca6f27e45d0977be6dfdc86a0a9b0278a3bab69afa3363efd274296dfde1de65306fff396d437d2a7ec6b2dfaf0bb5467a0bd531f4bb42a2650186b738becd4115830476a596b02e804c77211988ccb6e8425beb3857618d317edeb8802afb434a253ef36e344a309208438482e97ca52e90ef30e3f4ac0ae9b84875af6b6d409c15af52ae49d2769083e84eec73f28a088172824e4bc6826217eba502534bf7c544e134a4aec7d6b303f49dda24601c94d12a91af579142c7289187dd26dffb538389505c8c9a1f63ac2354d6e1911752909489e367e42d1031999665bda275ca6c0579b703063b1f2e1d07c8fe3f10a14c131fa28aeb6b7d228d04eeb2a35466219a27051f4bafa7b1216477b855c48ba14fb5fcb6cb20cda9079f972ee3c9b957aa986b605f75491d5337156c67d09258002ce1766e701e951fd7c849d489f3f8fcdc976ac3ca1537c9f2342f293d1452947b40a7995599a5a9da6da21cdf8414953efd0cb694a2da1f5a6cd073f5dd319eb4a1e8c770ed6b31dbc46832b9675fcf7d81dd397d765e72fa8a82b6e3c0d2549c368fd43317de6b837af3d720196f33f444612c2f59b013b852dcaabebe7794e7248b9a6415a0f13973c05061ed1480fdf04f11fa4dcf82ee6e5ec7d976a3d8218ad83f5f382657aa0a247b57e326e37650733d17f2c107a2b138efc2b7513bc72319b857f3208b1c7af918229a1404d8fed842822439ac951d258aea8cb73a84635aa7a17cff4e1c7b181751d11826f53065de33964f59004662b8f15ae3d4fb75d1142bee358f782685dc47028052af825e77910a1c9ec30a74002d9fcfa031334934e6bc231689408653a0fa3508150f62f757e9b03d3079e86ba69317e847d313e0c015cd456c5b1ce4e8a710ff970a81a9baca2349ea14d462c134929797d05229f7b225004eb1f4ac947979addbc7b9e62873efca0bb1fcf3c43b70e5adc104e01cec8f092b9a21efdff7d979dffe29edb24d83061ee091f75d167daf7debf16e66d9149751f42b7913dc1686d13248186cb9a2969e657e6132249d38c8fbbd67202520a298699529741e5bb517f440877afda50c8c9ec14ef24a48b58c2e10303355ca1ceb8497582659a92656e50699c7c5eada619211ebac526d7967bd9e4af71222e9910eb4d273fd7423a4103097d67235a4c9b66434706295017b09b46a7a02dcb9efe0fa7afa771cd40a35d8d361b86570d3aa82c982e36870011aba87c2a81b0315da1ebc969da69ca345b09f6389514c0795115965365e2d57566a06544ee66ce47b2b7404a8d065deb3dda4b7655a6023adf0519dab8923d2aa561648ec622e7b8cb965ad51abdfe726414cc8e0b24f47954fcdd94f4b881c8c25112765afa8a368e4e6ac3b9c1b11cb2b442940c0b6eb3c933ebf640da8b57393f59b69b45199014afc32e56f85c3c6a88ef5c29030b08ef4cde0feb0cc42dd10942727b6d9ff5390fee0996dd82730fedb18cd3a4633044b59d981f4be4a97ef89d6e5b6a30e331ca79dc67dd2b667d93e2ee5d742ddd7459ed5fc97f87c3cb88ff4d7cd05e9d0ff11b9384e9767c54d7bfab0e00a62ccd91c8becef3269bbda8fb8e68aca4e66834698544c4bea5917251ea5b35bc4bba253fe9a6cb14123f4d9a61a37312429188b4a60f71fca449ec4b92b8a825bbc9303cdd1955a536e46b3fe15ac29b2ed8a3d19e07a6f2037de1e545f051e81bc3902c0404954feca5486ee1fc0ec700ec17ccf5c0efcea0b5f40af6313cf07a899d81d785d01d2625595122f17a91302d017a222748809bd7c504219e371df01a79d21cf93c1088ca66654669f5af4db9cbe5a206a55b33feb71d92eebda2fed9d62b5ba26fc62157e7e2c7a89961a8728a535fd21b8df526234b330b6b264e597f85f2ff2ae0e450284964350dd0c12896e3fb524e157fde70c5685bb0860bccc14e20cd5933685cb769b1a16e8bd434d74328a869c89cf0f5cb1fa3a8dec3783d142e9ff869e7c96a555a81e1b8ae1da0f276d6856b71cc6097af4628954e23290b2bd19ff614921a2fc3d86d0fcf4e0a4bae2c2c07a2bf119299d3df61575f36287bd4d177573b452e275ff84bea8b77305ef8e7c332a89a9d4769dedc950c4397fd60d0263f5aa29a8d8d5b19a828844da64989276f5c1d8d33e2878ddb32d5937836abcaf41ee82c0bdf949a047dab022f47ad97f553a49cc33ee766d6e8a7212656afb432e6a068e5d072d3a2e3488bdd237807e41975271179c3df20a4961ebe702e4378f28786f8704095c6d6a18bea9ffa0817a8681f91c0907304eec747c13e31b88867adfd8cefd544232302883859033f92a72c7bd1fd8860979bbf0620e8794f10199e99abfa6bd5241e2279b68a4e16e6d15785ff8c2d3a648358caea4248dadee20c323ee482f0967059ebbcdfd6153a6b94219a7dc05be6fd9a4b10ad6ea14fdee0255d52c87478e40d449c1550eb15aa99c7cdecdd7d66dfbbd1c23b080cf2891dea4ff7ed8567d6673fd1e7a806818598cb12ab5fef8d0d931ca02e6835388ab6dbb17f45b935d3daf8df60d9c2e703683f4837b1c22249a0dc7ec136c88dd76df32f584fd2094c0337af352b5c035ec26f970531cd0dc8e5e66e7c7d1ab7c4870306968fd41e2254e33faf47cf830ff1c40be40d6738d87b53b0424764a927f61d5735ac4e0b10c5b18aca9c2838f4749234fe88cd65f77d43d46c6353515d2fde5ecf237fd50401ca89cc55a2f94d4b55ac1ae1ef88601aed7ecfa9cb092a305d1abdba4efdedd148b4a3b5d840e9d4d796684327b430bff1e45926f28981fd7d84530da7521ec32e518bcde77411e63ff900120effd8c8d9eec05592f3faf3f8971921833655ef62b30c7fcc41cd5fb96086d4986396efe52291cacefb67986ae40c397434eee5fbd09894061a16a5352138f91cc7eef125a5d6790285b3bfe504053bbb9a860eb4218205271716e296f98534a2bb852960a2e565378d6d95e629d0cf5d11d4ee3036af303cecb5a1b507bbd6a5d0f161b0d2d2ad7ea3cc57a66c6edeec7b638993ff0933297baffeb22c9e570f4eb68c5bc82dddc78a98f4ad7c0607b03125817d958fe60c6f660e2a3149c732103a2ecb629dc34d30c15d51fdac682bdf01c67074f04a90937c9a1b99369fc09f4ac545a3b424dfbec5b4652561c8f2de4986298d934227dd761eba8be2b2aaf9ea9a6e9e5d9781e7f631a18dc2dccae68686efedbfb2e503cae165c6b04d29f1f6554d29986b44a926fc0bbc7ab68fae0e82714da0e344440f64f645948b7416fb78a88ba3a53269dab94407086803f1f971d6fb155abe48dc27313793a5848755cf48b68d973379ba78c9796a1a29887d6e4f77cdba5d2c53d66a8296482659a74974e3e5492c25e7ec941bd4c8cdda970621050190139dee3d34abe73cc1303d18250796a2641776bc29f0b43230b3ceebd1d9588a19a07c189026c581fa5132f47c2d6a357692f6ccf9c18cd08786bf931a624a09eb57484e37e4ce67ebad4e05f1962e3e6c550b950b18bbe935a358a691f9090292f39b4e2d494fe86c22c63436015c6229d2ef4199f735bd101fa7dc92fd29700bd4fc57571b9b61eba83f7529d55310fd492d6370b149632169e75510969d2ccad252f4aac082bfe506cb4e76a8176ba64e9b133f2d902d0d172bbaa63c56ffe989e8607a3030f9e27f50ad7cc319dd635801432db1c5aad41758ddf9fb267d5e1ea7e17917e3db3e2349b489e568357ddd56c2cad8dbcb1ef2a778f65564904eeb92214d980dc07d7942587410420b52e2e889709663adccbc3e31dac55bbbe1d092ce4462b8c39fd412ac5fb7585d8046fbd089b12bceb70534861e036e79366dd4d2feb1c312ba1ad601a919169a47cf600dc3ff65c19b7dd63371184a8ce5e4b8073aa32b35c48390287f41efbc410c726f95481b46457279cc25a6fca17e363e92731235e23c829364237ad4b560fa201621c854fe86c2d1e5dd7ce3ecd4e90507eecc80e1cf2809179f8827fc2df1210f63295e0a6edba31fc559da0cc0a8d4b2d843735ee6227b483647a7fe8918e9793a01cf62a90e130f23a397f676aec3d71a20425954d11157edb8840dde39a6f358309a21dbefd7a27a7fef09d25aae6184f4b9cd5eae4a2506f023cd452b5d88f102b25def2c4a21463e29ec3388a1ccf2259086504421a29c614644fbc8ed099662c138bde15291e068f891512f71743b52d0a291a01cad7b14ef401c40beeb40f306052d0506735cccbbf2542b700f2c47b015b6f7c46f0c813701c33524516b2c6cf6b6e37fb8eb011b2e87af21b85851c5e73de6acfb1e5c9ec8327fe39ed39b14855fb6ded6d56ac2f1c980093280dd0b76488db3c3f199878e1dbf4f88a75c1522e3a7c43640444737cc0761701e896e87a6d95277ee6fcc145492a8a475878c175b0887525e9d267e1a8130f17b3c8ae7c3e702a1e1f25b22784e4ede519427177da05a58585f99dfa5d8efa5b163a73bdb030977dc4d9945b75a5aa34683ca004f783f47f07fe1afaada1e2bbd668d84862ed9a1cdb7b46e8da07a0865c42376fb78308a17a9206984ff68d0883adc489eb9fdf9f1b5c9a29c0faa0edcc75915c8864676fb3e7f223a916db3b964bb919e93cbc477ab57336df02639fb619b4f2849d69a2bb0a0557a0f07617e5729fe78036aaf414fdea03480ad31e3c30b03dc20588ac1339e2afc09df5c09a571a9162ce3b32483a326985749659e82bfb2371dc76059e0fc188334f1923183d74f075fba11c7094f7e19306cff4c1b20249ea6439cb7aaba1825add1bfbbe8f5e355349f3583fc27ef320075aa08e05a7910274c32b75b57b12ef8916f3a3d872587dc74121edef677d4b24b1d3b8cdcc2ddce0e68d127fd7047ed3abe887d5969a6021241c659221ba76442cd2902c4ac3da59dd68cc1d1cf98d368ddbaeb0154f4658db9187bb5110adb93d1b7fb0d7c596e3d232377d4365075a194c9fc558de8dda598947e4293e62cddaea463b4cb2e79bc4540d34b1e2ee8391f5d652a14144ce7e45ad8377c606a50b0172417e8ee6972130148a5030cb7804b2bcbe59b8dae3e8f458e9d57328b4e4a5a7bfe91559992d09c87789399b78eeb288e5e251e77609065eba534e103859caffee7fdad13cad1af909fd8ca72d855b7a24f0d47fd4c7be5381e4dadfbc16657cbcc9b23c886894e962849e5a479da23a00277056417235e2d0da9d9fceda20e83125f9ae8e035b2c1b35ee0342e50e446a61cce7c59a5017e7a9cd4442af3d674bcc137cd4b9daadbd6fdaa6e41d038f085efe6b939bfb450452746e486b3050c2ba078e8edd3b564fd540dd3a8e6c2bc7f2f85d3159e0334d4a4c6f36753e66a0cd742890b0cedf7bc2b66afe75924fc601d51f9cfa97e7809b58d344a12cf2fd9ab5b8a6d8cf6df7d913771add37a053e9c0436f17219264be8684c9ec49c2cba9487b254c60e9a6baa48842a3fb9dac1397ee4e5105e09d1ee08fff5c6ca46ad12bb4cf0ea00e87e4cee06ef8b3d39afa9058554f578d170b158ddec89e612d21e1616365b3cc534a98c03662616b3e8d4495dd00a805c7f83980ec40ae48e74afda53bc9465f5b47c625adb47d70b3edba77d6b71a3b74b5e7abc41010ba667869b514e43553a902a1d7b23721c9f6edb23434b0161cf8cc98dc23f1fc911b71ceb45b88c5e30e603809f47fcec5b8f90548ef21fcd24cb0e47e93058909e5a1c2c3d57ad22014a5a1b80174aabeeb452a6db6011104bd8dbb9778cae200a9bc6a86d30d6f8028140139f129b9d396114fb59a0926edc573f9051d0fd45f431c23b2ef1aee8ac96e4b77484cb77af1f7371a13035af0d4405e9eb408d1813a7fde87c3cdd53281a43ae8dc4a0bb0d98cccc2ab64f868b114f45f33115d7f813d2ec56daf151a187b2eef52e79161dca40217ae0bc32f4ba9aca55f234b083141358f19ce6af9df791860485c368a3a08fbc4488493366da9135c10d790b5ed3e83e71cc7d1f30f32064c00c88fe3ad28da68b3a7439c914a4581e6845db37409745d46adc9db7f04d9f1d12d45cc5cdc77b9e26d2b8857ee7e095315441f5fa2e05aa4198c69aca3c1d46353b08277a0e7a12d445262f953d2c4cbdd12001a37eec74e72780d32e5c9522cf8468d5c86d88a22066428e735edae0e9bb49b7d7c1c44177c1471b307bfc3918834d9e867491c7d6e9785273af3b514f9d74c176fed1d6db4fb7a56981597ce12721d107ffce9868fd6d116a8f5a5d0269ebdce99830ceaa93ff020638128d874846c9f0437b603d86f637ac54e7e7ee071dc1e1e8ab632b50d9ab5884d48132fdbef193701fe10a8e1590ac333e0a3331dce61d5896d30fee582213564ce214554ddaed41c9a96d099e2acabda78fc097059be326a8083f86d0dc143d991bd0526573b75154e311ee919613dcdb0654014a4ade90337b60a59fd10654119b1af6cc6375df24ef4c5bf4795b15673e8a03a9da1925ce917609ddbc6652a8c8aebee6d73d42f5fd93d2acbfe30421bbe272afc7ec4a66c4957be62bf05060a7dbfa761fdbf8d7dee9ad28b2e499f0bc8a101b98481a44bb9f05a65652928e6cfc42ac9ff3e21ecaeadae3672f40f87f2da77c9a0aa3fcdaa59ac98b9983344c35b8b38d4f667cf573c1af1e89dbef85bbe85705314d331dfbb2fb3e9c69cb1c39576d5435565897d17f32a202838c0fdbeb72a21d9b605ad6b7643e6a0a242138bbee925da169c519a39295dd11e00af15179c389471dfbfe448a3753b50b44c840ac1be12fabf3cc32738d1c9de35f6f73f88f0af8e96575939d260698f38a90f44143e7431aec062106522f0dc2bfa82b14eabe4719237ac7162f89c832e9f46c311616db4b9ecf15fc6dbef41dea01ff42d70937ff9fe0b7fcf659a3b02d5cf960f2f3d42c8417c0f706ceb697db8703a054f5be79d05716f2becd1bcfbf8a474f5c246d6ea262c6560c22f7a3901d821238b04e326dfb1c966d27faa38fe5b06f52781ccb79dfe9ab13b12d3aa8f9c77b0a47b3ac92b23a87913bba768888ae75cf887852149002b0c638948dc1c0d9286dc333997ced21feb0f0aac76162f3e647cadd63f23f260486f9d588e28af42427f7b1e5c3008caa5a4aa5c3e909a6f2594bd2b7bce0fad5bb57740d81c2980ba5ae3743f8b1063120bfd30ec7d198a555316efc4095a7f54c2920ca1a2728d89e9bf88dc621aa3b887aee3fb579e7a8bea4e1c5cf6604dcf72edcf062cb6fb2fee1fe0115f103d3e51ceae48d98a4583e1361cf949b95b13c4f7b62159120064dd9ea6b6c3d16714207cbb7b9e929ce0cab052eb7ba64724808741ad7f6ca7d88b04916e6dec8bd43afbba97b6bfdeeb57e1ec0511fde209942a3c662cab8701681d492f0c8e8d2b11a8acb9b9cc02fb7c24c6c06896eef1a42b0f9a417ac4d4fffccecb7ed69493ce42b66f4e8bcbe53363c621bf85ced27a3199acb4cc4870223f97064f561847677facd7e619092f134ea8ae6d5f2ea1817f9873fe0cc4408158114dc137926723d82c6a25ceb0bd51f0999c63afdf43cc94f0722fdc3f230479202e5629ae52a997d22a13e3aef94a2e7132b81443cfdd095d06cf824a1f222a72da220b1b08b5cc7dba78c7b36c3f6ab8c97cfffd35593461ad825f6c29ca5f812c5e658d6e7c267eb4c837858d6fad7ac7910b1f1ceafc81936c2fb9aa06d189bd3ca6a0e02cb154aebf839c81217584a9c57b5335c4620b8cb385bd433a27d50e9ec0325729672be58cb1632a053b9c572909e01611f091d3f7077cd4c6d91c8b0af311f461a738dd3eff27f738fe70a2ae888a31588108e7f65d24fe5c59ad5f6ec6d383dd568b1ec2bf869e71292b41466067db6a8fab5c8d19bfc081f3e23012cd194e07123138774b565c22f457666c45917e1442a7d609d47deecd9dda8fb563f2f3bb44af9652191887b9e8948d5ff903048d4b260b50d8778808ea7e287ec7e208d224def484da28265a6c8a42a0f87d99fec09be0d0ac2c41ae8bbc09a7629337ce9234234a6398a1b55f5a020aaeef5da48024531fc9d22376b1814f76de7dc270734cf4a1e10e245ddb5588eb10c8bf2125cffd5490d47e5772926c923871a91deef5278f1692633fa4ff58652836418ef749644d73be2ac25dc5dee9f0556823e8a7b74a7e12b400b1d10c466a1c3b960afc6620788d6bd984775a5678b054aaa664a880d56268909b563ae2c367c71894ff1266d6f1a92b1e1bd3a8ff720b40fbf9273c061c649f4c5082d2f53fb84c29a9564358d1a39c02e8efe6d73f2e4a9923b6d3820d34322b883297a366cb464bcb6ffc659a408175b0fa91472396909d353cccd48d9c21fec0403051b5fb2b26248ffc545d102dd6c243ac3a3febc08a04fd6a3613b8297115399b93bb088f2e7d00b493f1a71b8aa63e059e982a9fb2d5266663286a54b2c3c9cd20b1c50817d850ddaa06c31b85b3170164f4890e50a364b98fde62b81ac86112ad0c384a7342cb7121b993254a516bb5d8e90a6436b4ff889f2cc832a15e2569a50be2ea637293c4e703452e841338198ab5472f47907b9838924f853813478241aeca63dc5e0a2434b222d3172b5b7aa52d7d5b4b2a240ab1970ef60a80630912bc25300a5b29c738fcea8d9f3aab818e4ec2f9ffb0236bec46f2c33b9f218ede42ab0e0230b8cd408d4accde94ceea6e20dc9fb801f3542d4168451c5ca3d5ce9a50958b7ba3ccc2d69e9fd3eeb11b02aae8b2650da3cc5f708432414a3fe6324c8a4c6080015e3918480a06e52c3cc03bc44dea58381519c0c7c73f38c58af537225287229f4500289f2634b66c8e6349c6e610109ecf6b9797c909f181ec6da398cd88c57234e0a141b739ddd61157d9d05252f89dd0a00611ba5d3b1e11d26fb352996b401536916ba5536b77022813e17fe05e1b6e430808b62c35a13d6f95d524320ecb2d23f3310ff32ad44c80fc195460e9d027af606120cbcc395864868f8d2bdcc3182844f98d3f2a3a79e17d1f08b80e84b1626a067eb92942031a8abaac950ddae70d1878620a0138b1de92942dda423ba2a84e6e69abab1c97096afd57426697e88a4d571dbeb9102f49a25f176a68cb48cd04c7dffe0946644eee06c0dd93b1f6d57e2d293d485ca5a286b6668b6cb9b05dd8bbc78216d244534243fb2c574416842c3e4bb7641cc787b9fd109a4d1241d2cc88fdb3ca73f33117d65d1cece670e2117cfab53f0eb16cbf446c19b7cdc4fe5227334e6b0c5a596be556039cf6eaef741b3a71dc20f52014dcc8882448d1844c7284b98a6f6f2ef5f335bfb7357b5111829067b3b3d3f221f9f77aa708f99759af6eb8252ec4d1c7a7851a291f4a3b5bb6a622142ddf740ad669555fb74107cd45e31f89d854fbd4dae4cda54894a3e922d98544d32a7a00109ea6b260b65d44f491e6c6702fce4bd05499fbaa1b9f12e8f1ac05f020d0a277c24cec5ec979395e59c4366f13fcdef4e073fa89369b168796dd1ba00e08f24c40230af173ff0cf9595d0efa6e689318fa11136e64b5b9d7d41d5feb8fe7c16bb12952a6fcf7aadcb3819e5fef4dfdf8130d957500cc9cbf225390deb295f75b594dbcb851cf6a1092c7efb8b4b82bc1a024b0fee5840ea1c2f7ffc5d3fceeb34821000811feee1369473eb267e386bfdf18944dde93203a225aeee4f4ce1657382807039038e361b4cd4b7cd0e6fd2133ac17206f7b0d2f5e932c225ce8799d4f43015367e4dd52fb79f0f7de5325803f32615a7ece0e2dad3094352a88996d9d7154d5194ade4a7b27771cb9e2b127dba02e461a7c5f57a92a8d2317a284d723cac5338adbdc96d1243b26aab48825f5b34e812215beb552c8a7da1c183ecec86ff6522e1657fba566129ff15155e2297d8226a36e7a6dc9c55774a942e99ee829ef1c3b7c0a149a3fd609d004af189fb537310efbbf61b9aa4fc93651b362d74c7418e06a420134d1b226291e19195ba074a389de95ed3c015b33423798b3305af285999f5434da36fbf667b604d3990f248e5d545a64a0aab853defddf88ef6fe15416dd3bfefa7007a2537691cac92be4f784b14263ab9aa2d587d6a654c60825224ab2e36f8a6ec204f6e7900a5c5a2681f65a344fcba71741b459a8aae1eb404588b4ae33ef97b7da826d7fef8a742e9b0cecb164e3799f00674b1d469e8e2522805a9874d69cf8954c1ded1513b8f70e715fc767dff4814c38d3f9f950daddd0ba5f46c2baa234abc4f53ac72e3aeb9a7a617f56f8f62992a5397a1d947bd4d7976b37b175db6f9352e2884129f473d8a97f1b31a50d88ee8d41ad04a596424bcf3178051f7bf35bb1b691c85e160de0d669bb54b4924d4701d9eb76118926fe50e17239b371b67a4617c0d449123fad8bb74f742369613a69d8b232fe81f3f33ddeaebcb86d1bdf0f455376212962fe4a88d23d51ca21ea821fc5be65ea9bfdd500d8e0d657b0727d768150c53dc1643f0a0a8139b31cfe971a01ad52892c80b517f4ab5a5597ccb95cb04e3898a9a802a62d62c8ec5b0527310e4d978261b421cbfa82dbcd35c3dff4f0a53e005e0be02dc80711e2c5a16ea0124a245745a485b4652a10eb8c64451fc51c1136383f0f28937f62a89271272ac3cd3069e12db7cca83b30aeb1f4f86ae2b25df6bdd17ee566306aa0a729e403d6d3f35792ea4c7a40e486226600a097fc63ed751284bbf929ecaf157b04a4e9ea90890176eb269c046bbbb985ef19fc0830e2a0da9abe87266a8b58a143673def8e88b4ce97d6662aa6e46a958e1d75d7c31346c6aa4b31e896d57c98d914d24214d0c184515f7b4b8eda2ef1985847e2fb483477fb94c742b52f529a61ad7e6321cf3950932e43db9026c1752adbd34ec5b81d9c733c74c4945313874f7365c77254aaf10f045d2a5356d775015573b48c26233bde10adf6cc771ace6e251888bf5b222bb25c5871c4eecad2b5cfdf568de43ca763eb68c1ff75c2299c68717724693e348bf4424c696186395fb58a882a5249459f88bfeeae47d017f03138e354221d985430280d03b738ee881203fcb6a79449b9ca7e2bdff678c564082309db9b98bd96abe2cdda8324cb85bb8e3fc62425609a495acdeb4270c76c66032776c0be03532e9dd0610131dc0542b0caec685559942106af553980a5bd0a4a017c835d88abdae218e744107dfc50473682cfa70d88a7e8ad3fab165e9df10305163cf607efd56e91900f7d3c5bb4a3cc908292dadc86dd7441c9385408d2c55cf1f125bf1d607ed0fd521f4681333c04341431cfb95d9221dda7aa0737b55c05c2f0e4590fed0104ceb838e98585411f4e0ff047fbdd34212254bd5a092139c390994b2b149e5575ad44bef997a235322f76b0824cdfdc499788963ee0fc81d5bde4eff2b7063f13c81600e2f7402c48a721e4de0f689caa8736838f3aa046622353b21924ee79c054eb34e1f2f5dae40bf1262dc3cd2eed65328d5f03d06f5198d040cdcefe38817ef97a9897261630a4be000e0b2cb2c47d362e4268c3080130afd513b11af3c3dde90930c52e85fc713be22953e868ae657925da2362f071104f2768a288330d8329e7fd4fde1e5852dbe3734c802e56f5cf675eda9d6e9cb6a98e3d84f3da74084418a645f429ca3e7bb5779be668b8b5ec99bafd1f44d533e970baf1fd3b7d63453d5d785343107aae404b7c2c8ce29eb23542d3015668d9c3b50d72a65986b78a0dcbe33fc54873f4ac866fe566d62f9666b859543b56b617d2d33e1d640a4dca1c61b5b74d2f2e3cd68ea71fbc28b68d6775e2c7809face9fc1c593ffa1ec9481c29841bc358b85b4d8a0285aa5c7cc50a09d603e92b69869817ec7438d57077adb738fab5ea1895ad38bd18bc9e82eb66c504994dafc8709dd01d0409eb220036ea0719132307da664519de000bfa14d505bf7356f94d76ee8ffac3dabd28e4637757cb6bf57f6c1bc7be83f81dde8d8a1ced5eec7bb88c6516a6453d64078135fa047e6e6c87113295a2a5bd0e54df9a0727745e33a30e3ca8a6a0f2e42929d1d36366f852da84058a77b1f154573aa2d862b6f45b1199a734a85bcd3cc054c883a5f40819e03a3a2d74be9acfe1e6cfa8c5a1406cbed168d6b8185f1c83af0b88dbbc49dcb2a8ea9ffef267147a7b78d4f6bc583f8c46ae0ccbbff849acb5f7b5947763499a5556a60d71f7b78e14aa160b29814ef840e6ac043189d46985196f2770f86254100e2ceb2ca54435f11ccea9e41a9cf1feceb068b4dd19cdd42776c45821d7706f098cb15484612762e97d61a83a42152dc01b719bd2abadd4d0931a1cdff19bab35ac9ccc5354cb8bb0f44c892063670504db531f7d1ff9b6fa99d469aff4e8ba2d3981f14a1a00666a31dbfc5ed4390adb2b1126e8d34321091fecf440cf32b028d12816bf858a9396b728824ff4dd008ac3b284542f9c2fc73307f8fbd628ca2fd8317fa2390e3f5bfccff91a847174d3e3c52ae54bd7bec70035d6b349e9ab51c87fabf32faa8f5b78fdf0f43ce56ebbd139c3504dbaa3e79a1f76c1a6f840b121ac5cb46b9103db36d767c3894baa0eaad0916d01a1935d3c8170833ea206e2dc3d0f976c7d268434215f2e75969eb01cd262fcb54536de220496c82f03dd65246292ce1edd566c67121503cce9caf4b6257f72e8ad21ef49c3ebe3c9b12d2d69b21079ffb974cb5af22a0cc215798a5ec5326b6b9d841a03d01bf454654af548c8e948d9f673be8dff87da2e2d669ebedabea40e0b12910ac940c582d11bba7a1440d2b85ca9816decc7ffd616d28355620a80568133e51ab09159bb6942dcb7e884026305182eaa15bc34b5e953f083692220933324dac323f408659e6fd4c04e3ac2b65bc73bd30bcdbb582a3946498af371e307498044233aa6c453be72184ddca54feffec268ddc3f570dbd159ea02205f919cae860d3ac3611a43aea364c895fd7a401aa35255512b9583655dfb57dfba255490fa1b6ab5f01843a88a9c4d89ed0d47295e9f0218e90a7b87851a55f7a13a16e1c8372b5ed9f853f240da045beb8ed36ad00874af12b1ba3ed3ed021d1f82c2b3ab735269c9d6ede2b5d645082e2b8e3e5f61de97f496fc644f3606ed88c1cb2ec49871f5e75e518f7af699fac609059150fd7164801c83a2332bdd520559f4ca9a78af3d68ae0fc610f641a3a1ca4a826aa8f30e6d182248eb6813e9dd74a938186dc8160dfebd4b478d012fbdcf1be971525b0e7683670d5496558c74291b424f8debe777ce4cc892db236afe9ca14a4cb260210695426bbb0b03e76586ce6a0f5138c6422e9251d4f1672135c1c7c481fb6c2d62f0f6b2bcbf74f01242887ea0606f5dc3868642d7101fbd93e044cdd76c00b071de8ba141e429576b4ec682fa83d7a058570343e6e7ff42bd187d734554d5f501f2564b67bf6af7b383e7c2c3639ce2a8eef61c345a2ff8754609ace7461221c52e845e74a0f82f63f084c9bafd441e68fd1ef383e291e28a9e253c9bdeceedadeea6207e2e25e83c726c90099809b8fca068c7f7deb4392795ac4a2638e768a0ad07e711967fd56d2be1de324f438e56aedbbfe90f16e21ca3edb8564fb02a4feb3832822a3725ce62e49fef6a8649096f3492ac7ff76be48505e3b0f6c22efc2ccde44f01997535077a23f4aa930e97dc5d3f208af79de6d38ab9ccff286027527c42c5dab29f1a8ed7894959b2106248980eafe75021fcf088197cca6634f89b35d6050ee6a92a5af4cd087d42860a7211b603acfad207e87b414a8bf9d883fd3b307ec0604e980b5d2dc90c9f2b560b94b4a3e01db1cd6e8e1f40dcbbfb3ae08993d13bf9655f02590e7a4daf4a2db103e37566721f7b95828a04414edfd0838e1f3349d24d4ffcd42c45c8246a7809d85ca8293d13ccd337df54681a1dbf31c4abfb5fa4f99af733faafbe0fe7e9cf912b267645f3678f6fd7ea04161036c7ff028c459a34c73650efdf48d26a7f8a05ee470da1a58a09a0c838ce634ee9f4508ae7c9fd056bd73490e4cf274f6586da093a76082fc07475f97bd2fdc1335ecc391e7e0b4932193271c5f1a85de832935d179abdf0d90ac72d89620a3f6708ee0b3fa3ff8d22d6aadce26b9bd310b9fbf3f12172e7ee6b190755b5e57bd025229e3da6c753556188dff10743219516d5915d5694f8fc309ee313c333120f58d12f88f2b40012f4b1424c9a4fe11d3cf54c9c1f6b9c55225c509210c65fcfab2f51545357651dc7f739577bc8febb51ae1873f64be5e31e4b06c0c2e2d5ab608ad7a1b716bcac6e857d477daef70b8e0cebcb3b97a5c8e1db61d2fab488ca1cdd0329072090eab2f2df88f075d6d8906dd5595807d504fca16a96c7ba3b7d983455df0f516ce98adcbdab23feeb7ac156480452e2dd9bb704587430804b5ea6dbb2cdbae93bfd8718b17b47699ad8cbd66b244331f1923cd003e60b27cc4c5bb53798f944ade60600585093b8f1513b81c2f887bacc09d689260a786fef773c20b3441926ac16ec17ef5a4c86db91dcc11d4e2ab8039af1546dfd3bfe2b125ba0b73078278c7dc33d08ff08ed8084541bcf00c81c085e30c3801264304db81481aed01c981e7fd8d1711674887478d43eaaccc4a8d77f51a397dc7d608c63694a554a0763fdba86c305fda394dfbc73aa1a6fd8ed0b05d055b258373eb663d49524d4d746815bf1e46fffc1bf0f14d46e56ecc93da5962b3d101736e8bbfecdcc8993a3887a5d8e72baba498ca1baca149c1fa032197a492fd1a47f43b5cb3ac5d1be8634ab1454444cb8fa3c01a04a5f5ac409abd8f6d25868e7c93bbaa8cb643054f7e4d25da2b82193ab2dbdce14395bc8a6d58af17718acbc2223ad87e1a637f6b1b159aab9ad3af093cc086fc6861bec309fa286a91e2f2b1589b83092288eace13060b359b9268b393ac78629355ea9fd68d986433519654757b2fa0853303bdba76a70620b601c712bc1b8ede7388e61cd7d0817102d08fd8656990aea677bc26e980341572716ca9f8376a9da1fe6b43dde8782ba91b382da46c96c9325512d1a7ff4efc46d8028ffe8d629fc7514ead29ce91c87b01e3afb7177747531dcc10bb25500592b0b1dcec69c2093e3c4b87ed4b2014b2a22197bd1caf3fed255f4f56c7041835e4bc8701707aa11a14b572c9239f180eb07f0d012f0df9d60c528f498bb4735f76a03d5488b7a6a836c9ada4dc593da78e00bc4b259e6c7362ad90d6c23391d6c95792616c3de3d50cf3d995b3210f97087c22a50cb4a0e591b9bd8cf9383265d956c62a27eb28171db5fe852400de289c399e2e6327bdeb855a908d633a7149b240de7fb21aa7ed3b673e010646d8cdc48dfff11f92be5d65108964c6d4fe5a99a1961cc0184e1b5a67b0c1af249cbb2b50ab252c94306847a8866b8ab885e6b62c62afe2a6bd7497b892a1101cf08fb2578f1ac05d3c2ae557056f854b23faedbe48ab05bbbc593ee5447fea807be3ea1c7cc917a9e0dfe60b1d1de74520a2c6db37f219eccb499ad68d593d4444495176c70804fea2468e2d78d6eefbac10cd1acdd9bc22cfc4230c9a45ff46cb77fe6f448df872dc2903472e83ffa4f6530b67519c188a0c42cc89f20c394f66c6eb67437b38020598af106b41620efb899adccde89174549cfe5737edc7daca11c1ad0532dbd37b9452cf63a86c89527717e922e4e3c89bb36ed3d98a3cd231870213262b873fe2c842e89c331a44e0390b8336f3734fed720b065d0042a195da88d30ddcc77f8fc8e998e4eb2182e826de611ae9bf6974924d09fb20593c8abf96830fd3bbb7be4e96c0073417ed3c858db59bd93ecd4baea2fd96a0b858723e1c4958305343e96043a1005fe5b14a7b32bdd557386a2676903c0184f31a7925c5080253b597821784e965d6e8fdbfdc98b4ab2c96436a3b664ba7bcc716c6c5534f3b0c5fedc286e7356b1760baa0946b6d9ff3257f4444b4bb4b9d6281eb6d3906abc7979ce93693940e048f27da3ec5724109f9b956207eaa9412487de07b82eb5c574dba4734140d410b752a64bce15d2e3fcca1ec26fa7e3b46895aa0dc8eb799a97e70210c692fe1681727acdf129a942fb51c4947d23bc075d197f46b1002ebfbacba6396c7dcde8035b8a2dc949f8b10c5be6fce8372ac6a3829bb9e8e2620d9e6f81d72eb66db9bbc8f9e35c010350bb77a4040c18be6f4f68526a6575d01f45a1b6345cbe9a336168a48bd3555869470131066d53928cf1eec0da2a0a819f1ca8fe50a685b6b6e0da0ecc69e436f9f83f1a2a397cc7bccc2ed9d89624a7888a06a824111336081b2cd97dc2e756bfb053207960f70fb198e44be13b808fc786287b060bbccdeaf68d402e5d993e49d4822d32eb837691244d7128975a8e39f0e2ce74560b43614e3c4dc166df447af145a015bd46dbf94e598a4688e7628a0e18331ff6105ce40b4613018e16b1796ee9c258c42bf65c7673885e8d20c60a804f842457f4a82f7bd38649b75d610ee25341dc5d203229b65aa3dd7a5940b95b5556314ba8eee9f3189f267d1bb964b7e2e9d9eb5ee8955bd2dd4b11d53fa458723031a779ddcb96e8257c442b945a9d695bee75c91c09453177d40f59cc3b5f638a4c5f648a284a31af66fccc8b9649de5caa51f0637dc04df611d620baf8587506c3715e8467366ef6190a3fb3cbb54cdf278f1f3c98a05bea4d896f8a1e317769e139bd936c32f4545959b129ea278a67379eca126693cab6342c6f08e748411659803c72ee3ea13bb76e54bb79dc78a6b7b7cab26861045ef5a177a51d847cd14e61f54db5c7ed574185d8cd7f77c221b5d47b5c793aeeacb29d63313d35af8b31de91f3fa035ed6f78dad7ea24104a02808f03362af62c7f28e5f82a854705248fa17e3104d127e2f268d344e789ce9bf1451921d96aa3ed936eacf7df1800c5d7c02dcec0b4abc135d3b7636d472420454a00c86f2e0cd3944c6c057df148817687cd1214e1a7e9e267eb0016068bf6a9bfd533f8ec3155ab637ecaadd38f494b2d1af3a11774a0789f71e04c61b719b0abd264485a8f53d92743a235616492ba931a5eb98185e529397ebe7c6800ff8445a08b848309b9f0cfba814ba70352019771438cb3e127625fcc745ebee678521bfd0872c051cc4a389ba452559ea6f49fb453099b308beca3d94482790c40612903e389dc9eecc9e625eca2a814b3077743b4933c480983e06e1bbc9dbaaa88dddbc05b6e4b844125317b8ec10df4c002df745295196a8499a4a7bc9ecb2624fb4b4746fd754fe1119cda792194edb933bdc1fc756e0c7cfe6b26289a9769da5fb8e2ff8c9aabede9f75e32219e2ef7aa75efe0bf02bf07fe7ab3273d268b260a15c034807d1119cb6d2ae545a55794ad235e08b19a397b2a39bc3ec59da9b118b0882f453238ad9ccd11e2ab703c4def179456853f6335807b17db4b3b69a5af68c5d2be9c9e149a6df155159eceeec1b71265da7e4893fca0de262ce374a87618df414e6e09f060479c5abee503331e4458283f0352fe36876bc6eb5fc745b6de2231a3c0fcb4d90d9e50764d3ab81b0687592ae50dac0d8aad958f7bd7b8fe59c82abe98f53a78ffaf35a175b0873584a10e5d69a79b1f2e8a9e63f735db02beffea1af0072c95244ed5e00cae18b4f1c707218bd541accae25483e4e5166d234ea69d2728ea20efa36e818c7ebb16844811b63eb36ca7ec95f57fa2464b046663af5566554d4d2076524e995779d93ab00dd7a93e8c90c13938046b1027e3c03c9d198a40eb35712bc84f8df6e856b2306c5e11e8ed3309281877a05b61f2b2e2837aa3e44faccb5873aeacf8ee8cc59bc899b3e6aba88d06b30b5805c46c92baa1aef76d4d570f117df015d67075cf71a4d204f1a29fd1e96dcf4eb06d0c63872d4b070392845d0b92ea8e7289466a90393af6f22cfb5f3f595c377ea39adf42e493e1cb267d2b510ac60017e1af0e24a1685f81f1dd8ecd4b87eec9e805cd47ebe7f30e41ad3ae342a4d254ac8bef3a0f1e4454421d7239d3301ad6f757e09cb9967429e40ac056744799ff25db11cf36285b81cddd1d51fc49e3160736c296235c5e54651cff8b7722316c1e93a0626ebc9c35e3ae22f310a6ffdfa9dba6940ac11e15b3ac95fe6026bcc6db94bb4fd43ea3f7f3a4523be0d9b32de5c6d47e34dd345c7c68e22269df7628db1ae8085c29d525cba3521898521f2e8a9ddcadd75b732246be853f099dddc17a2c1fe675af1493173da260539363a51afb2b7df4e2aa33c0a5fbaa24f94760d68492484cb04725b506b8593d6bfe08e125f9852dcd65625adc513a6aa883165b347e24c314612e6bbe828841de5c13b520cbddb28e4cfed95b84fb609dc77fd3b7ca05bbea4609c94ffd13556621a4a98ffd96a34e9d7223a406d126bc793c83c7d2ac6f056ff360ab6c30f80d913bfe82898845b363a9274954ca6ff44d63f2494e9f8036699658f43a423f4896eacfa4462f00cd1413ede5b5a7fef6bb785d95a119720c664a6c92da87fd512f8e150d748082de971e1ae47bd5d326a9243b08542d456eff2ce6f133f31ad9b371af519b434c761ac736eee7c5763e2e702c4771bee18bb4deb7f85d7cfa7c11ecd35e2287dd7686145b439d27d2ada0482f7bcce4b9a2edc7c275e4908684a7284c07556acfa9b4e19f675d6e666415e709bf3241f1d8e98cac729831b7e330f23efe7b70486b9833dce97306e7243de3736d6daa8e8c1f7ced7d63346a040bad6b60e359f5ea8df450d43a3ddb929647011a056707bd5d084ba9a05ad274ae544d10eb0635c48c8a9ee081f5710606238cf11681bf2b54a3e47062872485e08bf827fe87ba48c995d6c7619411b9d1240b259298a6c3a8483173ea9b5ffe2e11b46dfaa77de6cf8973b22092eefca9ed12ab903d5243769ba32f731f57799c0283863079452f920a6bb19285da2e3b4edd76925b6f7d9da7d36995a455766f3a6de1204639395ace9998f2591df91f703ba0d1911e97ac5ae2b346b704e6308611c5aa6f489ebc02debe3a566b76e75aea0d33dc272cf915e1f0cac0d04a8c9d9727d1d52378e35512677c399489217a88cf75e57c8a8eeb5357f04e1ac7d8161cdb7ac31a347d582008d2e40bfb20f0c43f19e527719409d09d96713ff3b39fd45c7660c22e3d1949f6f112fb16127ca48e1d3d177561eebf267925eeff7782697e2cd1a4a24beab42f3d95143661ce6f50a375c7be232a1e2f0c1eb0b2f58a8f853c3b1889febd38a7cde3879f36b2526f4d0c29bb430688a642d163aee1a05f2f6fdbc8cbe5e1419e658ef333bd9aa7c355f3b0e5d6fc26dbf45ae85014528ee41bcbd21fa2b43deb311cfb0e40506b175c1855e888a73a73d8392ff78f77e24b46f74c08ac3d4220a0e5e7f73596685c52e5ac31e3cdbe04f6df5eb98e17fa13cad8ced4893eb72fa90f940fff15d3068a608c9e6ac5d46afe9dd428fe65d8827e23299293c3ad88860303b5fb1a7f97b4de2d842719681a78185ac5c401ebee2cfb9663a0a190e82ee296c23967dd7d5330636902e779d2c6d0fe30f57faaa548c0154fdc8b611d34f8c26f23daf0aab5e6a13caeb2c367307f4eaab35a7b998344b61616485f0e63a61065457d958a7d38d661594fc8c284c9364281fa380d53c59bcd982b9acef77f892cdf48886202f77b917168380eeb6b75d2328f89d22dbca25709bf42d977c50dec13f301a108bacb5fb61e196e2a7aade45306e55857e72f7af06b097b58c1af58a783ab665b3201243079eb67e671b07a972e758885f1670991253bdeb7d7d99c84f7aab6e4ed701c5dcc45c83185e780c941862c26b1f9d1cb36caa020537d8993341ca747726e71f385bca234f4143d349be3b1a7b39cb767f9f3700cd08cf449d25e21197893436c809120edd7c7ceea012829b8a165ca16d8bc6e6133b2d1b2ec116a5e73d21c17a80d5f2678bc647d16755e827e63720593f14748fdf422fe52966d9cf5d709157932c6d66d73bf2ca6c8862a9d022aa945876cdf67fc72368dae89637bd4d90b83904940e4a9264e77ac706e9d69eae86ac488637ada59f9b68d79ce44982820b84d01add4da612946a4acb3dc0dbf66e3776477e0dea6893f9f65b3c830032f7bd702b1793f2dd394627e8dfa18701652eefb6460320b4a8682abf0960c231ba8124a9e2169bcd910e0f1df535706897af41b785b5cc6915a4ea648cd574f1ddd098c5e51704173dacd52278ccbd96f65d8a82857164833a9cf79f516a2339bd62ef90422610986346149634be6e17acceef01f2f47c8906463443100b798f2be37c768c9e7e38ca62b8b923ccee8153f87ed1f89df9e0cb7892126e19400bdb192da3972a5dcf492387b448b662680af6496ca3f393e702f7356011be8872e10bb3c741db0f62da773c6048ea60a32fe75e95ace9bd25757b5c25b7e66c4a03da1c9368db64de655b163ea4efc33e150a78ab3ccd90c13d6dafad63015c321f6b4d08cd5728ed2429a255f6f5f0eb279e7b022405fbac2c347225196c805e36cfd0049fae05a7bf5f6ab35e3e331ff0af2a9e27e4e3598d45b2b2731d86b65377e3b78e2feedcd4de59ebf2fe5b2d4366a0b5ebb86d5327884e5e2a1396542a9f554fef6b2458d60a3e9a2fd55e12cc5ccc4e22c40b93cbe8fc9c93afbe6879923754dc070973f83e9c7ae9e97680e3aeda6c780bb2de5dfb96dd2584f84af9f91b66cde3faf26be3bc1d9fe0481e959b8ca45b49d047d0a6f2675dd0c42c77c35e0943177597fd43c419690da57789edd124557ae02faafbf8062a652269d96af2ec9d650df8da9902457241b06a6577860e58a6e3d841ba5120bda42483089b9538cc3aad7e8d926a65a5f50b45b1536225756670363f93ae08ba7f2e33d30c1e56db5265c7d17b3fafae65f1b3777e8fb3c838ff5e76735b3f1760ce5219469110274cd00e36544325fc698c385a7de24daa39f28ac4e7398b908127cccd41d8e04d5dd825c0105b349495b758e670f50e181fadae40f338cd8be25aa862c0dc7120bea6696022f57e21da5704a5b0183c0112fbabee00f3a1c688ce8fa7f9d7a87b49c88e566a6889036c50a8cd132f02bf09d2d530a13a91dea0510793297d45f1f8b8ece23598b3d7eba91ef069da90edae040e646e23abdcf525aaf1fc3d98eac92745063151f7976a58f465f28baba55a0ad5d6ed77a330e607170cf73795f267c647223273589ec3aaa69ce11614271aa17cefddcfd0b13a5af85d74564844b0bee7bf2878db3dd2ab15454acea2fc1e9a5effe5f04dbb3342ee918475e7bb17840a4f852356bfc1c3ef5157983de185cd4628867d06f1b414e8dd680b52aad322dd87bb0d77b90f54137d5d8b23700382ecfbb15380e3e4891c2c2529810aa5c17c3802bc0d107a1d852642ccfce4bfb79686856d767e65e801f1b3105c514031db72d32ca57f573990014b12fd4142d0e963f817417b701be07e0a150e454b40d5e25a98b2ad32d7d27623459b82c736ca85fdbe8f060982c5fd60d1588ad8b02c400a82fd9d73ddc7019a4e5b1a6da425e3e3582be2499bee708e2421ceaa027e05ebf59b351533b7d8186ca8b4932b21385b86ca2485dc08e5807462f8295169bedb058b5bf2fa1848907138d0288003c3436fdc202c156354f0ebcf29ff3f068b8647e8eb87d2c4761962d932a13c5591881488ca8077086b3898d73923106921a215ba03bee057c44c31d37763d00e3c2222ae97f72e30fb093221a21097d687d5b01467ef8aae9020b43cb4e912693defcdac47606ae6e5679a5674301634f9551fb0a3e92f7ac8d48871fe771521541a425291e2a36ed6599138d4f402a8ba4849b5f9d7f04e1cb8307c44bc775633462dfceaf14d747b34a68c9d69177e204ad2335383443d478c0c8a3975c555b0b36bcca7dd6d658bb9ae371402ae6ed009f52b5580cbc9cbaa53dc6a8e5d50d0670dfd280e45f02077e13e7b1bf337bab011502056b4a66ad19fbc09302b9fdf3e9d0a912269f95391e2caceb7fa33e59814431c2d363b7bf2b0685895f8bd6fa25a741d49e4b9434201d930f92f39a8240a701e187f8165e80d232ad3818d148bff117ba692836c3387e4f90dcafea0018502b2abf1c1401cb0297acb65b7e05af6f27355eaffaa902db81dd9ffec2d0129cd6b15089476d3a4073b8871494589561de2d00c8889f2d9071530471da66c8edc0f0f32abfe7854ca73ad13845bb1e994f1956e8b96e59ac102bd03b970367da14ab94b46328f3d5046baed1a09654d7ee996e08ecb17c8f5470bbe5f3fe63d172aebd602c16d9d5401e7061a3477652fbe430faf6fb76dc13e788e897ebee8a1ef14b5e1efa0e7d1da201f8fddfd988381d466c8ae8cb126a7ff455a7a091c90792e397cc123ea0c358792378b2b5c097622d6503a77f47a174de65e4f95d3b15b86194c4f41f8459f6caf101d20cf74324d535a50d75a00d155f811e7002ed0f0b161ffd782069f230e6478f95d9b8d4083f71e7c907f4e37ef30e33b5fc1727cd619fb41b28e58ccea79b7d52111ee6f3745045dfdf073855634408f96dec4afcee8412562f45fb289f4b173abe0f0be200b1d293484c1d29b61ae6d6feb5728bd59469e4f22475a6ee5726fa5a154fbfc8e1784464534da05e0e5210e75e518f99fa0347dbf8ef551563089beadb5d732175f4c4f819a7df4736a4dfe9f4b5398ec5a8b7f3ed9823921bd28129b0a809827e0e901a4b04559f6c71153f581cdcf2f326447549a31e59491240c3eb1319f7769196c50c918fb7e382e2f08ef16fbb65f7a324bd42603a89e1fb15efe6006142b81cb5f83c9b0d7a62ac2e2c40d0e47066a6c4d84f65d6d54fd62b8b248f88b82c8d0e9daa4e71a94f7a749fa9c041b63863021d6c85232f1dffdcd4fd15a9c3b191254b440bbd201cb1a4722bb4fe07a0029f434b3aeedbb30f9ce5ace1e115f2e200466a1d20f81c4f1b28546223649aca7a8bcb725a6a18a58c0904303b56ff5c46dbacf736cac096fe24000f8d5fa34630e68eabe5f4da3b512ddc3ae49998aa8eb44d98603b68ebf78ac2b58f03feeeb5bccaae848f219992cb052b6bb41f59f607e3167881862d43beeaa735dfa3b2b59c6a2c915e06af890bdbf47df95121c82f16a0d8eb49ef1f9dc63faecf288119c0569e051adeaacdfe918a2a5a4feee5d877266de535fe4f47cde5346e3227e22f9aed12256053f1b4dd90b381ff885ef15eebf96f1033eb7df635d079f83ca24d132a01c9973844f6738655d90d1b3b246351372835dc7c3855634e5a179224cb7fc848c21b2e584da93e17c5239c69e455719b512bf365b1b3a6918acaa8c980d28c7c8ea16b0a2e0304299c180d19d91d5e43706b2f2c2fe503d7afddb6de4b9993a4ce34118c18dee883883bc55851dca52ac262e231c175f021e6ef6b25c4e55b8aa3c789a210245148f8baacb25ecd9dc7dd187de9d5aac961f84571074335fdf50c4be7f107f3fad0ec75691b45bfb9aea3f6b8cc76c58357fa6387e8e5b2fcf5f0a441ea4e0e8cf18c8f25ce85453023bf6efd8a681bd44d701a0193c3238e55b4226f0fac36cd27e0a163f0def1c1f5b128d511fbadc437537ea678200cc2a03a8efbaa7081d3965358465e48fb4e1cf87dece1b6a129843e0b1c24cd1adf93832ef6fed500159d74e6763f577898d23e0d6784b0a1829a7f77818d68ecd50c3b6469ee68949ef70c236f630fd9cfb6d4c73b5e8231ddce2905574bfbcdad83ab5c1303d381dfef61051f07548feb6658213b68094192d311cf0b5706c91f3c7c39d3cee6eae9c02aea86c19f32ca8eb85c44f9a974845f7b5f7131d2237f39dc9b65af3d99195d3661e6909420d7330aef60f264a2c53bb0a92071a0c233f7f5ac3d6da1ce92965e40043ef92dd5852f00ff74ff5f2a0af7899e67e283737a4ddb257ac2755c88a3e6add6390774f551f908c3f8c766618bb1524fa8a4c022dc0cd00598600a4b08e5ee099b6d140c1816df981754147ed5ff4e7965b8dc5012abfce8fa35000b8610bcf5e93777bdf71e0f15420b3ed8f0f5041bd1b2f0911cfebd20a0590df192ac0419d0f065b5a713ce8bcaf5b401073014820ebd98e4077212d6c2f3041fad84ee7d0e44a2d4ca1357c64329e4aecf6e0fd919e3f7ff6a0f95c582be4eeb056f719f6f0e177f9c25a23125c26bcd1cdf8d4fb1da67a20cfb3762f142a7425757cf7ae0af0cb4f5e440c9642daadad36b384eae0e64312893d8bcc9d60631779706c89eb79031a7601a3a213565c8bef23c2effe3840da586b30e696ce1311ebdb21893934d9530504bcd151270652f714adf7c61d5da595c843441bb0d2fef574b08ddfe1283f1b85a5295b990a105e831ed7ad36c52e7c4d917b58495ee337e360d80f97924609f4f41ae8d118c9e065ef46c3061835f313a98d105f8e64e8e3d42904be8fc3eaab9000113f16164822b299ed63bd31e72dd626195a69dbdf6aa4285d5fc83aba4ef5838986b9a05371d8c2b03a8fda54e09cd5ac80755bf72be3f6387459ad0f49361d5cfd59b25c6cadfd771d5c6f2a06416a93b57889ed1cbbec44974760aa2a49a65c52b7b9b125c68062a2a3bb9ba3dbdc2bc14166d8df4718e7836ef18a37e9b27e82fd7bdbf2e819a93880852cb6f6fbcb5598511805f3895ed68f87eb4abff12cd2acdaf98b2a9112cd469f4c5f1ede175d8b5161caefaf109a8e2e1c879c5d109b63f225d4f1a5f9ef7bffd3184d83307bb35d71589512432b7a5cbad5f5bf2cc3ee8384f891d9fa19ef56f5983a05efc9683c9e7fb5ebd9ef7a71cf358a9715d8bcdc21b93dfb51fb5127825f82b1458ac78f832291076a8e2f396caa648b6ccd250a46c694f30e8a41a76558e8d5cf014d4444ad479fd2dd58bf337652c70cfb48a87c36eba89b47673f90d05fa30e0e2501721bc7de4e082a8947e4f891ddb75a6aded3bb8589d6f22e2f4c001fa1444e3269b36c8f5e87824e9c622c7b660a6e83a914ed69f80c125476b0672bf256619253a94bc8f06cc53c53082540ac4744b863afe8ca5b53a4f4e07e71a4576c88b987b709c7ec8c53215bd1409c8f7d7dd6c7d9cc5ab4316c48fea0bbf536e6dbf87402031d23cfff3826e3a86af190a0093bb53de875310b158cbd4e5444c200e918515c1fc53543c6a482b59accd421245950a5f07d803cab23e1debeb13ff9809c4c0a614e0579e1e5dec07026afc5796343211fd9c770ee7f76ec32c24780c64c05bb845eef8c0c603bc501ed09eef59a6eb46be1bf438f6eacf9c31b48c2a8658096b7438ae0bc61c1d87b49038cbf6d461c3ba42775512a29d6ac69b8b4ec0004733e61147516df6352c673851d0feeba57d5a61a4cff2e97884f5898503835f0cc0f7ee4c8a9ba00d310948bdb765103a77adf097938ed07fcc87724e65b6e8b4909c1a67c82d52a181ebe6679eae1c32b08e95b0814b70b30a35aedd6a797cce26523e5e2d4ba615438e067b2ec297018199293e21173435d9dd094b0f4a97287e45d5030fc144a24d57c338195ce112445413c8e3a634c3db30e124a3604f3b6dbcee6ef61b75f677462b6cb0ecd295625054e7a1273ac7cd8b975e9bbff373fe1c5612de8f1d7d1250ed76d8b4e0ed5d3aea860229e0e83eae829db4528a89d06a030921251b8aca0d9ade207474e19508b469a7f6f4e23362ced817fdb919cd9fed38d36fd8769562efb730ff96003a9ccaf337905a0085f1cca3efc6605bf164c2600acd1ae9f160bd49b110600ae6c1181c3483f8c62b47d30ae269a26b732c4ac6e780bdb17e63e2fa7352aaf63289c5ed3f902a21b4aef087e27c02b9175f7f8860074d0ee6dbd09558c26439b8468b9be582847cb553ed6adf905e1ac0869945fe1aeb8696c5f7aba6eefeb050b2f124e389aea4cb11a38a50852820d311fb1a2ec3bbd61548ed283dc462e3ae2bc78d9bd521c8676add4a926a5c0792ff42f25db9ca662b4b9e40e9e7ae27f4de4ee7aa3d868c9ac5e77eee0c5b315925eaa7d3863e89e5001764eb1bc887812cabe792a76c064684d69fb50438d4a0802ec0683a9dd17b0fb35497d3f91f4f71f4371b5935de966dd3ef8e7028ba20a9626d9d520852ffe2fdd90e283aebc1fff9b6c372c850984af53fa9ac724870bbc25ecf906001daa65c43dc18c58c7cdc07a93a3bb7f61a35aef2c47c5dd8f9007b339b324aa453011fb2d796310eb8c9b9992a89fe0497e3b78fe48a6e13e0d6032be2364eec65c9bbad8a4b4917540b91ca7552b5abbd9165c086b402eb27bb0b1ac2ae79cea9f4264ea08f024c0785548747cb697d620bc1a75a45b6fc395e5277402c69678fb35a551662f7f470bb0e0f97fe9a1e80c5b806273a16de779aff4b6838cd6a6cdd77c992a9650a7b503bb9a75d9a6b5884ce2efe7d3f5e5e0d80c3c976d3466f5c1b94f49d12ec32a183e64be4f83de2cba8f3876d397770d62edabee1b8ad639efcd6e8fedf2e946b9ef99ad19d0032213b1d47136ca70a912e4531d35650c720d338ae1458b994e84b30561063bff0a5416e0dc0bdf81235475f60992205900550646185c174f153096907774a59109f7186819b2235b55f66bc761e4b06b8568af1268fbc8c14e410a58943465854b82be8a254c0658ce532eec4909daef9bc14408d63f45e70acc474e724d55faaa6a2d8d2c9b8d64371078f3bf1ce601d4145459ee30c5cb5cdedd93302e03747f85a9233b54b25bf4cc0ac3b7582a0217d35d1127c82c18532ed32a4256272ef738465e4b3d50de46d3ee5336a2fa827f275d3c4ede4f065aaae0472800d1428c56d3816977a1b1b8a04784ff1bfd665b4618753cb7ea96fa88119a0e5b31bd2e44f1421e8b0dfd5789d61804ba96717af80b0e658b46d82dccdc64ab94d5b2827722446d76d71e3e9551b72aa6302727986c04c572ba36578304fe8e4af8bb61502c3a42bf8db7c200c47100593701988623f20b5dc2cc5930d558c0bb79cddb13f54a5bc0e6143d5d730c2fea36974a7b3b2208b49318c024b8be9cae61b9df59f54ba9d9fa8e2294b70b40797557d635b95625bcd76bd8863ae427997c61a52ba612ab88199059be2c0b429cbdeb0cde531731909b486fd19cb588f138c089af91b800aaf49c2faa152e4afd8ab6e7b6bf9638bed9481024eb564960720fcbf4e6e1643f6f6979f01769d7dc8bfdec6bb67744f3c0ead3c6d3baca150e747eff04847d6231857c863ecd42c8489149a7699b9a48295838227ca50c1af42fe0a6ed6044237215e33b953d508a85677b0ec422d0b6fef15666f16aa9e0c17db3c5d36df4ebd387316922343f45a2e16399d7ef8a8288b1e656ba8072b69544d2e0cd557309cca78105aff0e04f753071b7d545a7477e18eac3739e93edc41356a758f3604aa256ef784b94576a46602e8351f577ec7bcc3ec82280379d6c4f94be37df5723f94cf278fb600439a8ca883259ff04dcdb8ed52dd6aadabfae7289cb2c14270a2157f86aca27dd334bb9f8079686bdb74a994a2cf31d9c03fb65d5f94331ba9434d561805d06f93fed301197a96760a2cce8304250af9743f7a28148dd2fe549e3b722c9414b0d0499022e0495d45e949c81d9ec7cc8fcca0408bf6441e96fe4b830db06c562a6eb5631a6fde3a1fffda27a8b3d5a7b27bf0feff57692f4a928fa26520193bc4df1002b73ef8b45e7ab6984222a213be05809a43d0beb4094ed79fb7cc6b5dfe7dd1017e8e342c74d0d117d2e5ec1eb1d03be0d1af5b68d3564707643c1ca6dfc5deddab0a4afc28732d6f4e1f06a3d97fcce19e20287c4e55034cc549956b84c6a4d0e4569048b76d37d99019ff1c23e88ae7ae76d54ccdb2b6364892b618179573cb7c54cde61a9d79a629b579aea63ba1ca9a34197ea754411fd543287fd858d1a33b45bd9ecfd3ad62bb3b041e68e9c3707d43117581aca9b22f053f8cc9311b715d5a0afd398e4e2ac0e2818324b633fe23e918b35d9902da89c007b4cf0637377c2db8ca473adcc1f5707b7ed0b6760f63a42da0e17e7eafcce49413a602a454592933eb44c3ef017590b1f11a735685f4d6c3296628c91d5191402796664daabe0af7c3b586146a9f197d4cac06f5bebbee61c2f53b446e2430f7a15e9fbc362926c2490b5e04ba6daae48a938addfd4718395f43703bb45ac0683207a3ed931fe2477148ba8122362f008063a029a0152305a05306d9abed36d27840adab99f0528ebb7a7ba9bdff4d8596a199a9dedbbe8fff53a8e5b2276550ebabb79ee4c87fce7d89741531fda76d086f4c9f3c857745ef1b8befab3e2a4e4ed87d6a4402c588ecf2a393eceec27e83be882998a3ed38125e9c296ce5cc5e27999c619f63a6bda20c9e79e3a3714427ad5a898be354b964666061ebfb682d434e0c124988e2c8f8ef9a643fcb495c1b4ca98dcb81e60604661484e3a4e25aa4afdd1c05094059dcf58f8bf87fb7ce1159a0e028f5ed18c1f94ede549b51bfbb1dadf8f2c1a1bf4ca53e123a1423f3dbbe6d5d88aae754a95a3544ae98a66c58783b41e3c1727ffe3d1c742894cb0e1f2f83a5bf704d1256597de280e77bbb516c2dc13fb0ce83c44a2b9f41e2320849fb681ae3ffd5ec89930869dad9869e49d8f43214ddf1867bb21dd6e5ee8ccba61c8ea12e30978e80b501a38bbc9d56a3b6447fdd9331fc73c4ceeb11fbe353bc25cd7f444442b5a88b4576c4507c7f24b29ca7b0abea49deb0b9852a221a268f23b9cc182daa766f11121f5fd3c37f705e758359383c801919d2c6f180dbdd82e0ddbac4af85709a38118a83c74b11aa077356e0bf671ef91ca1a389b82b13de5e61249fd30dcb48013c32693d7dcefe89de0fd2cacb08511ce6c836dfded514dcfc093a0ffe1087f5c4145c4df5e5917ce1c015dbd3d8052973b06645065d21a9de506c3c0b5af6b755e34f3eaaf931c437dbccc7aee45dc3a539dcfc2a86773883675d85a628a71dd409fd38c094b1b514ca55fe231895533cf76279f72ace13abfefb84ee4a69e26bd73df9550419d87370c56d50620c6fbfc010c106dcc9c762d6a883b8d100d8a2ef5f48769f85655b6ceebdd78c9b4c330a6d71933175b80046d807de2661be7302068625de28971d02c43c39a5bdbefd2969c6f7ec73c075800b30145060f688550ba90f342b1a553582271cd8eceb246ead0bbc8af1fb0f84a973fb1768df9a066d6d793303e9014bd831db66b4926cf17d7bfca89790071dd782e2f08d932e7593d87220db61f8ac1d42c02298f539e817f292c9e649c4318b778e363c4b8755998f2df08ec4d3e71843b5c26164b3c67b0b3827d707805caeedd1d56fdb7c634a255249f95ce8a5d7059bdf78d713a3fe4403d07932f123e6a778f614ec9392dce381326b6ab606f31ad8abb4a3d51acdd8b6014e1bccc28baf1ed6a1e5730a39766667156a9badd987d76b0cc725897b81d994b2cb9d0dc8003711762722e99817bd8fc880a4a4bdde26b3d2d4d25d99e9589ff456b8d6bde09799ad917dbbd23a9892927b50b7e0b11398fc81de4b9a23d5716a1089a620c5eee7bd5c6054fbc55a7c2829ae7c26264fdf21bb146d0c17316c4487ebdaca25c054b05ef04c398c186355537d923306bf19bbca1dd189b1689afd2c50154bfbb88cc1f67c29c224bca4b7fa5c8867b8b87adbad7e2d4e3c17bb6e4527d24f42977d8caa2eff6bdeedd0b3ae21e93d2a3ddfef097d940df787aa0ccbccf903bfec6c5686f3e23c2d2ca28a810baf17009d78517b60484cf33393fcb60e9ce5d1672808a66e2434b8c0cf5e1ece9822007c0080d78f76555732053d902421618c09b84d8b2ba87b998c82704a26a59cd94717ab02d5b6297175cbb13e9b9ccfbb9836a5a4f45a3d33bf38f5505aaeb80b1e2d0bed1de4da3ac0da2f4d862785c4b3bd0b0147724e18912d295a1b403241d2e4fbf0d65f895c2ae183772c2d448f4692b2ff186c387e9db17249c48b30b77772fcf6322d022b11a474d931ce70c67846e52d0e3607f652bd18f624b875850c8ddb61bd0a5c3c1b43f2fe3097e284309d543994e9a96fe5c121698e0cc54ececbb4aca3751361d67cf2dcaa35bdb6b91934a1abe08f615640d5acf76ea7c9467ce3cb02e7d3ba9244b0f474667e21af22528da8fa6d037836eb74ef4e66bee82907440f586fd66b8b30cac4093e53e99e4a442b26536affe52379c081fe2d63c070234037a852d29b181b1c8904ff170588efa2e8e494ecbae436891784d7fe8cc1a9a72b289e34da597ce17a023fa3be9284cc6a223bc3d777c6a8762348baaa2eba9270017bc1a07013606a9f90d9ae156dccbdbbb82a584e162e61b131ebe209cbcc134cbe1934c292f7d4828b96244901c7f3d9e9a4c949bde6e7046c2fe3ac8fe3960f3845911d98d2474a20af5836d5c177d8af520caaa2ed0284fd19d79369d6754e4c046d5fa6bbc39c42ce547d899bbb583afa2a6ba73bd6a5794ccee57ffee3e51876b448c6711c5e38f4284955d122fdcbba5cfcad0a6850bcade6938af93fb54f6e0e91fdd7ab4a90b92b37b05bcfa163d775d49d8ebbf7da5f8b6e5d8946ab1a72f54e2fc230734077b428a26ff029c7b98ea39cf8b2e99b1d46e479bd8425d8537a9b17f12d6de4a9de9e55b33ce9ab37173e641a4e55e0ee0f6228719e0fa34295bb2709e81d917170c56decb9da79e62ad54042a5bc3ea2c999aa90653cd1a57f9c79bd57a6b81dae4da5cfd587a365b6e0b7171fbc4fd47ef68fccde8155fc7018653c8c3e4d3794bbff8c25b78d62cc21bb305eadfbb897bf0e5d243ee3df9b2f075d6fe2bdf64d0d5dce3e85ec82badaea84f72040dcd06ca8385c8a737623491fa24822ada4de2a6356aa104b7a286cff92c13fdb93069ffcbc349c1a24e8bd2bfcc78e8e114a188c670a870fe8938dc9e11a0d92519d7e37fc5fa704280dccd1590435a2f176b9cfb0077c1b0f597d0d1ae998cfafcee297e4ca0976186082464e46f19fa1a41c434dc73f672800861149fdd6e596232674404eb7d44d01697748cb94687d2785508176cf2e5fb7cf9355b1ab9e0e03b04720010022aa7360093b424deec82060eaf8b5667776c02c76d6f5a3cc855c833a1b464e04bb02f8fb6cfd851699c9ab741160d65cadc529fd9b787a687e93e12f0b1d795296b4fb3feb89f306221c83f87325eca4655e165fc48d98d580047c4a1d3a23e5c8838c23fa88dd00916a1d2a1adc453745e0fb83d41aa5065911cc1f863f220e544c38016d011e925ae20251b342e3d2d9500a3e53eaf36c4a1313c4f6423d18737d118b51011e705538b5ffcd19e336ba73fef12574d5439167fd14a20e2c3b038899cc6738f156cc6233ee72daf995a066369d62e26c2dbb8a858d44ffcb3d34977a41724d5db9a56db4a3cc782616eb6cbde13f12fe9eca313765c1abc601c6328e68d464e6ac83ddd8053732a3d0a2805fb4aef1aec55d13330fd08ddee56ed231ae7a953a5ca9f5d90b437f8f641d53e2019e46b2fc8668de6a748f8985472f051825a4f2817727ec7adb53e3b222ca1bd246f3a25846e6dc5c9d33415e9eb6b143afa783878b0e9909ee25b21cc193447aa302871aec0174d00a3d246436b6e420849f9678c41580f90d3d99d7cd16663cec39fbcb7b0ecfaac009772b342374d75f70faaf19e28c24883ed5a923e198741390ff2f480d02bcba58fbe90345adbbfeed267b2ed68bc5b39d9095c8cabdc11a8ccba85aad13253fd381f7a343ee57642ae75b4dc8ac8869c8c80c416ce3e23c8e5e26bd5c67260420448b7adca3cc0627e95581295e9063c94125e30df26e6ff3e773b56504d51a61477564856527af9e519ae107571cdd31bba9af48360e84e84bf712f84327baeece9dcb4e4c491eb0f6db0be2fbdd7b43c1bef74b9033509e502c1ffa14061204b490b44fb3bc6ee767d9d8c0477e6bc851a3dd76db254c41436e9985445b166e04fbe2d8aae2d777c6b0a04b9bd9d75d302fa6e560b4b74ae05e7fb449cc41bd03d5341ecdf4a299924fa9ccb827b14654b2db1344f7ce8affb566cd48d6e6d0f0cbbc74aff2bbfc233e5d24b69607f584f46cbb359d9f47e7cdc0001423c87b713af8970a9c55d563c6d377c27f17dd0681794c8bc817951b6c90ce0d422d8b809dba00185dabcbac7ae19d390f94dd72a425a032923bce959afe5fa57e8c3b47f3cd29fa75bb516403dbdca7ca45dc4bc3d22f6183d74b7be56df4b7d2b4fde18c2494f17f814114bcb5c71e896ba113ed43944df8fe5c6dbe5f6298d698094c2071a898089c990af9e615d9e7df628b1bbd4be1fd603634341cf069bacbf6d8cfa8be5a631be2809ac965c4470842d91abe25b6ccbbb0a4c3bae2e3f5071b912bc7ce846041afcb81591f1703dcf21c9a473081f26e0aae267709e067ee53ccf1e1c1d5e316ad1a8899b88eab26e46ea42a197aa7b8bea297f87739cdf8b9b4fcff88001b6f5a0cb8a3a3abb3997ab27ad4497198ea56a8550bbcdf56acbb9ad5a942cf61b9c1f051d0fa68a79f456c34bbf613b090514e507bb4f017b3857b02602c87abaa3a70133ab44d4ef09f4f9c57119e264676b66818db208fb036177bfd32695814d3b92b3d97e0e010528ea0965a72028b35c82faae962d1dfc1d1da381860610c8080096338369f407040c58d4822fb61866c2dd562a295b4bdb7049cc4f3937423f4108a2ed5cd7fd909a768203a4de86ac1c3f45203d2d90843249634fafb338c64b42706d62d022cfd2fc6a8da5af21d0012b0ff1f7be8bc8307ffdcd42e71fd6d8c9a2e68314b7d8018f04e40f80beb82b56229a676d7f990d8d38c12317228c32585b47edce7719d47a9766dea368a45ffe62e16131d4dacfbbf6f5a1cc422a88c8596a616c4f72d3b57d2ea186dfb449c8adffd40f637e4d889e0366a99486bc2f3ed80a5bea3d1f7ae607625392b0e3c2ee435b48beb7b552b3ee1dac26dc579866302e97eabe894042554384ecc684b9e14eeb1276b5ce15c5317d36942bb55ceb8bf5b0983d4862cf0717688400657c9bb5c32ab2ddaded3eac705f328b3dee3dbae46705fcda415bb971c8e1ccf147888718404ab255c21694d266ca644de48ba6ac8e438689d9770d0451ad2b67b7193c49c1ba0a1699ff41d961263ccd127d51efe4b0a6a2e6e5b4ecbd078e9fad5f618b286386166660c594580577df02385263cb18118671b39d46e737285e0a6b1e4759c3261d8cffff8d907b50ba06237431b570d47530f73b61c2b02235ecf1375e10cd2c76206765cc3756a4cb7539211d441a191f84d19070306b18884e0fcc54d92607f7589af44c6b6fcab5497c670bfec36eba225aa7a88e8dca496d6dbc8f31cfb5126c91712ce8869562b5f6ad73bc6cedb45964090f0a3f9ff2464f66ffa337c760d314f284c2bcf8c7d562f5b5b10c4b6e05837ddc135a6ed894d2d28e796944066a6d8f7a2c5e8ce40f7365870dff18ada7577c11d412e96bd95b091f88ae5039a199ca53a2fe26b0cf7f3c58ee0785fb2948e7430d182eb3e6d0ea15d1a5abf8cec98162ba6d76fed61a1506de7b44a200e52f4f5d847bd5035998b8807cf91ea8ced1443e90a2a71a476d2ff17f27d1c84b271d41d7c8529a51f4e1ab2da2b15dc40ca7058cee9c2b4e37539f07d94b3c307eab367ff4df475cb8956150eb081322ff8f8b3536614f2fe1d421130c91ef565e170bf9f3c2825f252c40144993e1bca163f40439b3e75218ac06528bce18249d3f08fd18478b864b5bd20716bac1e04001c97f83de218fbc2e126fa426ec3080e49053b920697fa61417336e0d9d146c6baefc0493008f0a4f8db50b35d1cdbbf3aa98bf6f304402707113d3cf15677a378a388ae664450dbfb36148e233c567ab3cc298e3abe97815f3dade9cc74eacbdd9482d19c7bbf0552a1f4f930f62fe02b5b5119fd75d89e9967ceaa0388cebdbf5bf4ff584817ffcec1e882d4713205ed9fedbf37c7e52e7fddd40680deafa981c860364012dd6c1dd0261fceb287bb77156636a325d2d489fadea05cabefcae6f06d8c1eea84972446548bef3ffa8885aa527d607b42003d91b4741748e28322fa0290d6d2ec483e36c3499b45be3e3f774b95714d9e0091236ae9b5f729c6fe4755c9c9a8432b19f2ec54e76698ef4c791c7a4ba450a8388850595a7c3bc749cde537d0a630ea7c5ae6005b619e70bd8cd6f20aee4d08a26590192d6169e7a36595032a31aae386c42b1a5dfc35502e0bb89d431cf2022633f35b2fa313ccf9c21e18a5ba0fab55f2d65b6892ceafd85d4b015dee44cf09156cce0d8e7e451e7a09f62ef6e302757f75a507ad82737b7c9e99232b86d93ff4a87dd32df98d55f1e945f868be50858bb7e45f5a2ca3f7a18660d1151f420d44a89d760873d54cdee6fab5f3a101efd89c6cb1351567d3e6adc3877f7c4acec3546bd9f339a5689b793405981899622ec42e019319673f4fb979e7f57222c9e31cb2af1baa24cb8130d7e54355fe76e0fedc8b391e61c9a8039ef07efcb7435c55194e6a433d334afa4cbca720035c4eaa8c9b68a1135dbd8e4c7d58d9fbd805fbc2ab09e74c477fe60c3a78a8b04def7a7319ed1036ffd9667e7bbb3e121b5a9adcc131504be9bd99446612bfc35d6e535236cabe3dd662475f5d860745e6f9fb1a8b2e633a59f1d5b76be1efdd5532983d920f87588934d2032920e76da55728438a31cffe1462badd3ec5fdf2f33625a264bccf0fc7f6186b2979793751ac702e188efe92fe8bb9465777d25d69ac8aa2168ee6b5929b8289acd096d409474acea97bcfd336234296224d7db84b21f5ac8ccd1857ad8ec789faf4c2a2baaed7e408d74497b68caf4cc519d1fd18c6e04622f7fe3d319ebba20c57df8dd4928ea285ba77ca64c33dc8044a73dc585147cad626e8286251ddf8f6c30c3d389a65bcef214c2e54f403cde0c73cc9ec2f8e02997a5cb4cdde3e3aeca35e7126d8e09408b93056b77823859ccbdf769a99f5145985a7e8b5c1092ee11ab1e250f923fa6b0eb82688595e10893eae80e80d9755b46742ad2b844ddefaac5e5ef91903053e8b0849000b97e141f0631603aa6681873bb06130efd76e50451771f10fb1d272e8a42f5f8ffa6651c1600a214359355eccb666ad0022bfa1564d5ef6f6eb57735a7cfbec86b6ea5770c39f56cc8ed3b4f11f50d82cd6f0379d0ccde65c352a9fdc4e019de85873cbc8611211f5b7b1568b5c5d4313644c62c7d2b1bc37d776af6ab09a5b0f8384ad48163501119d80e6039aad63acee2ffacfbf7c9896b5cf2bbd48713069d3b211296d9b9bbf029e20859c1df343024b44296dc04cc31d97db3ba42f26a2715cc7e41ed851f3608ba836502cbc6667bc966bdc6911865a3826fb841722b5e2f97dfa4739ec264c25e41344e1c4c20cfd3dabcc223f9fe47491b1dbb4ef864756c22ba0287c271ac5da3982faf04473c80ade9be80705543a0ecf5252e733969aef8a7e1c813341c262e096424dfe36c41e25d99e3c1f2f908386ca0665f1451310bf137869467fd612dc2579ceeffe1f637439c25d1d8ecdf0c3dc5565063641b5afe9e9aeefb8c316753b4c38fea55099d2fb8b7adb7170af8e3f7e2d35c52c2d83a53ffd9abf42e24b865db69a5f9bd5e7d256d48d57288b21945d955189965c88656263c095722b5b771df1a63f295278ad7719395ae8f6925f29837c70481dbbd07be2365c96de6a55b19d2152d8b15daf361465a719298459f615b3126f6be94aeefbbe65120d39e87e8643d4bd135f0c03eb2f2d1242a4e0518ff3c7291d8a7fb2f639650272e7f9af6db5882dae849047520f147d2b3ada5c7332bb7b1a05dc2ae27728ffcd2f5a4de3350251b0a8d7324e889a0107d6c810d7c0c0a956f27fbb3affb76ea7c16f4c19a5616f6153a11bee171a1c8ff6a74a7780677ceb19c96509006d16328b293ea7282573fb2a51d55a7203014a0d046b3483b6f42fd01d1e0d87fbac4994539b0143c4b5327971fab4a500845db95895531a6e1ef29afdc45493e8cb8b0b20548392b9b59c9b09af6613869a7dd8000e348f978a4d7387a71153dcdb44ee097bbfe734a59970d4b79ba928d8e63fc5b57212a80bab4fff882fb854cb5795bc7ba8c718ddcb9c1f8085a845bae7238b7a195234c035085113e385afe544944e1b430ff0b0985a73ba7e868cda1dfda21e9a0bdf0d4d3154d543564669b9d9724f8912ff218402a4a64af8bb1575e4f350982cf7761b1f6564e590ba4631ff189ab2889955c9f005bc36cb7831709bbea662384c244d10277ed47760a9ea6561bc66bfa20b78e578d94722ce59eb8f289f4d75a26af6f5c5cfdd12bd36ada08e181bb113d4989c067cd2cded92280a86658a5a2114d89da3d93456e87ed701ab56aea0731719dcba360df5bbb267e8da8c48940f2ba59d91ad309ecb9fae199605b26b0f4ed297d9e631e0c3f057811e10e4ba585220c26ce6225cd38a4350f7a68e9900fae5f96b44a95441f7150b416155cc62bd90db027443c4b5da3ba5965582fbb6f9e9bf481092723d5749c86768e5477d775eeccb3be0fedd77657870b7df310af8a86987540155455b82e22fcc2e756b1a4bdd5554ebade0c492eaae1044877c96ceba565f09554e9af5e0a63ca31cda4f6e50b1ead854125aca40bcdbcaaa8b49577ca954db2595a67a2dc3a776cb98465a218a4f37eec6798d6ea247ca755a069585147d435f5c3eab18ca4ef4ca1fc545d5fee016485223da35ec01ca3b3ba4f1aa382e2170adb3ace9ad4e63282c15d4e81a32f5ced4eb76ac46e81c73bc4051cfac8ccd2485c8c0ffe74bd606a281ee4395e30745894df706e952b8dd23708d89915fbbda3c2b047ca82629c16110b837d9cfd89f92199aad34c3b7a21dd8356845d8653bbf4b0a7c7e75721d3b76d9b5f7fe464afe3ed7ebfe70ad4bb13b6e9b1ba1b25d393a6374625c38a11082f5ae85e982852ec626161bf29b9fc7731ff5662aaa3a681bd2b639fcfeadacd28effe543f4b06e812f5cabd778c6c5dca14a4eef012a43e562cad87ccd495810beccf30fd9eca1dad572236046c85a2140e318e5edab4755974f72c4fc1be682e121639eaf7f18964433119df29c99023f8293797147ae0f8de49af8a36d4dea970d10d50d671d9bed297ca14b71bb1c5a9ed76ff665e478637686bf4544e5ecf06b7d20ab9faeab5388a69882ad961b63b7858c3efbbb45ef1c1eae1ad6eb45da34cd540df54225050c47e1a9f69487eafd31eee44071f0e004399f0cc32f5f066d8e9a4a9be88e3f3be7c15cf3c8250659bb2706104d3a8961466c76ae78d3c5dcbf13b067ea805dc64ba3198c8eaad4ea5051c503dcbd9023ac74eafc9a83358f98b211d8207b81f61cccc6442ba9a07bce1b89ce8885b3e3d3195efddf1482a90ab866200693114cb1ab9294903bb66b1701dba88a0a47b31f957500507c6afbe39e8f2ed92b13c56a4da99bc41acca1156b00476529805720a3f234e33fc290cd7ffeda70988ce631f4631e010a68cce816292f9ece9d81caa5a1db5522d99c4ca72ba20fbb7eb95cf9be81c4798cfa015cae41d9160061eaa3054fe105a60a6caad16d907560d120e3fb1dd3c1029ba4447651cf94fd01e0c255348f320cfc2bcf13f8c4103669a440f3848a1a556a52b1c0a2071eece39580d7ea645e5865378570add8853b3a93cdaf5218634f0b970d976021204d414ed5d48236018f2f170255346a7b62f6d6932708b1571f5c769ed056be0567e546d145da7ff014d4bdfed625b19850bfaee8b4dbf7c006c53916fcd69f8c38fab398b284e01b136318ffb2d647d2b8d5c5989e31b2e475eb9b6d40690794c5f8b89c1ae0abcfca3c55038d904fe0f31c14d83af392dba0715b2c15aae6baf7edfa44533ec5a82774fcfa70ceba5288df28ea89c841f51b8da764ceb36f91c0e0a51edc58e8641279cfe40cc8d1bc933fb22bbff8ad8c0d17ca7b43232138b2ee3c52d6f171959602b3bf94eb2dcef355fe24c96d84d0fce133941f25a3ab84e7cb19aff41b9afbea2b58c306760ffef671cb733d3cee5eb3cab45454c581375a4ac367ee35ef9b9a1a527ec10cbb80d7b4438973759c12fa64553947c39bbdd9608beb277ee0640e0c7d2dd340934481988ff033fa186d5cee7c3acd575ac57cbb9dc939a1b023019c988a5b5b6c63aed2d4ffaad9707a87612d1bf4af4fc64f193876e614e2fd4e9288c4ce3beb3038ff22e45ed441bc54bd1d6d64e4252d90375f6d8d22d45d56ab5d8097d5a471ee372e60787737de13b41db57360f9359f09e1ac65fe925e7efe4f79da6362778d388b493356d5ecce3fb5bd8d117a49549f9a5c03a9546f72846751f86a37e020445117140ca8bb138dcfaef6759a0a3ccdfb259c2cc457da177331d3f49d0e74927662a768a6d8f851e10fc9df7327415e7b6d43e1571295c37bdb515dbd8c595d71399e4ce86741a10a7e706db3d26f262d3d5c2582184c095e0876fe320562f5e66b7e609231241096e1d063ae3d9f177f355c7141e34e16618ca0c6eb54098123f2055827b762534e2693e57d1d039ab2208c73aeaa94ce10dd6f2e1d7d9920588a4686dc4eb95aa1345fa8df1bf2cdd2fda14fb1ec0f2481c088573001340f452d67003d3f6082d5c56ffc3ae076ac57c719ee0f98786424c828ea428c91e01a688027f08ec8915c4536541a99d8b928d5bd6567f3aa2cd1e1d02a208aeb917c87549248a3d879cd6a179b9f75125782688b3f5d0115482e0cab70318449a5930fd611eae4ce6a029661fd5debf680e3c6f2c446e9c34ae4afdfe94f2fc2a5454492beef8782ae636046d8d247cbf2a98da6534ad74ce65dbba941c8f4b3ab781a6e775e65bf50d1b38206d0f1d254e02b5cdb9082f2e08936d424354b16ec6c19aeaf26bf32a8870851e7518beecb249111434c42e7766310284fc8ac23b31a76c3d8673b98709700caeabb4796e668a0a9ced969848943e28ffbc1e1d5d998c67b04ccc16db1b8e36602e09e1f92de1919fde39498bb7d3f48fac793eac921ddaf15cc587c74f77de98ac98901057f767b43bdbd41dd29e765baa17c923e4db9fa31e400ef818be766adf215da427331ef3ba99d96d5da60450a67378796729878f4d0429f70f0ead52cb52ec09b89f8ac0face7ed0bb0f12438bab46a89cd154b818e2dd3303e84a7ee1526b2fab277a4269e90e6fbae3e33a8aeb38914e00ab93170d6acd6a0b578a037e5dd2cd466c39e0595e9c16239ba8a9dce9bf5b83b8d88c6386c7f144ec5d7f62104b17e15b88d716817a8f10a0d4e54ea139eb70d96a76e59b80269fb6ecd8e4f776a1d6e8b46d013a595008ecc524f442fd3403eeaa2c876376f84cc317b6f60aeac917e2896fc1d20d84e5247cda3fc6b5489f4fbb3ea074feda8c5f03de297e0768016f8e75643dfe2a67db9c9ef327d0bb3cadb0257e1db4956d26993986ff551fa2e6592d8547071d24e0507d6d08991356c18cb52cca1e7d87f23be8dfb73c8cbff2cd8ebd706f7e6b4a83630018176d3a35d4e14a345d49761ae3d4d365a5be4e0d5e95ba7eea224b182fc72d702e0453f0f0fcc8fc2c05633e655773836931330d027219f86a2c377e86119adb69259fd399f79888270a9c903da70a81f50d11afb1955ffce328979c931edfee97c1a74c32e4e94c4e5baae9dd34d098fa1885554242b7c35995c26f6063364739bb6ba9fe87c15b015d672788143aa0f3ad5bc98b9c58fab603872943ac32e534a9e835642ceceb52dc2b69414c20ea5a7ac2a5fc1b93d3cb2b0b33c957c0aea00b2c655ea9b93a4f881636b837800b33150d920f26da3d355f52b0159c52c25a2c63c4de0ba7d674c9d0adc7d57fd910a757b5ac2efb3412c1c2656d21a15fae0f34666a91354fb9e181fee5bc34d5773a905e2e6971337a281dc9e665137a6087d0a9fce9938b973bc1a272db503713b581c25094d12b81020ea39514af2cd04532338dc260548ba620b1b795ac34ac72a67280330d1faf69077d728880f25b413770c514fd68d4ab881d0ea3b11a14b8d689a8191398279bd0ef9ba06d9734890408104d5d47898055c4adad2df9b84ba0f341b8b600f4a80f700cbd8b9b7621185f9265eec8685a77f7cae6f97b67b2d08d38607178525c6c82f18cfd2978a99b240efc2ab16b36e6d05a6260a94aa9d7833a45f7bdbc830123ac856337e1b4aaf8709847034ca0610d3212dc7a9eac6df32d91d552cf03c5436230d5a1f328a741551552eb1293fbb6f81303eb75d4efc99e1360337749c01f85264276f4f331c54594e413a5993fe1f8c349039df07c0187739c41af2a10411014060fd31a77e3f1bc1614055b45b5e6dd42519ea3a9cb12f4cccb25622aef1b942a3a4c5dee814039abcec4c6d6c5206656de37250703435e89202f5ed75e2d732b77f277c4c6eecf08f63b49275dffa7d579121ffff5d91b4a065268606af1abf1a3b63197e109250c0a3d1474d2175dfd3721cd58013fddf54ab5e90ad4bdd83f05a38b0d268cc905a3aaec002a6898603ed194fdd34e50ef52bac7e6cceb33646538be61d7474e13d06264838baf2c8a972a18910c8d84aa169f3b91f9bc74aaac9e7962b85ea1734542d9609fa380934794554955bf5da4d01c7b7f5f8bddd626fb0e08098925e4422a7f49c5ab6cebfa5ddceb27037c197e1f7b950a660729423db8d44757524a82467d133d0def6e5e25eab1a0ac61fec532819b99df20c85e2270bf978df732168605ffe509a8975f303c27b8d2ebc10628db2f79595a6525abe3747177ed98ba9232a570e08cab0784fc1d57171b438288746b32814d6fc5e875d1cfffe1deb02ca3e7ade08c4da7f2d4365c043d9edb51a8ab4bf256377a031f1cc740f3dc955d24a94820605cd66bbff0c16b8262426ab3a86f214e56f41d575bc78563aab4c800c06495b6ce0e993a3dec736d54250a917ce111656071f3ceda03d88d2f2367e1a90a905eba7365458b652fbf211c34366622be0a145ead7cd0aecb8362aee0b63e3c30164938c3701453847703bf20bd7383a83dfdb30749d50093147fce4b524b15177323abecc4ee83763357a0133f2cf5f098b5161406da6b1707695337e72bf865c792cc25b7ff064e119925327d2f4b3280bd7160310b2e830747108c9b0e530123013447160ba49ec26288a63d8e0d0d04bce2fb4f0a158d527bdfe4b0b70a63f59a6925a7d0976876ca47a4c5a1cdb7bdab4e87fc51653436477e0a601b20d49e4ea1b10e1669e55dc838596283547f92809ab2ff2be085caafa5819530416956d1aac09e9cec9fa23cb4c4c2f19461a7791db0aedcf0e4dda1143e6545bf63ffed50bbc14be9c98ed30b5be924df997f49dfa0d455d8d03a15c7580499bbdd81187c29778cb73556690d9efd6d5b7620125b8a4876d9f6862b2d7e7c154e5419ec80a1ec7f095b78c4c5fa5ae5f86a3869e52887c5a9dea9120c32f6871dd9545df4d73cfb52561c759e987aba0933946eb9e2c77324780522d188e8deb6258b14e34910c032c1705d0d9845be44d302962ca64c5adb2eaba2cef6da43431a7c8683fdaf9b2c2d90b19533baac83147c177ae8da2d91d8d8d04f97d64d0333028ad9f07928fdc68af0a276a2abe804f9b1cbd58f15ffd64d4eca7b50d43a1a17ff318c408cbd7d484550711bca603aafd2aa2bab51beedbb22d466ffa8eca1e453fa50b1624356cda4c801f7b9a48b0d6db07c313cd094c8a6c0ac6f098071297f84545effd3bfe8f396e507e41b3b230e2c827f58e4b774b76fbf758551a8198a9820a8c13c814c889de637af171e17accea4e966ddd84af3baa15f48a341795117a9ad81a209d50c5c7a123f914f09a34f9c678db2196ddfb9a9c4fc5010be21e440fa00e09fbffa62ac128fa292a93bb20c2ff5420539af1c0e42a59a26dbf3f0ca416933c8471eb72f6fc34cffbd1349c03422e3a596d39aa0ba1704ef5de5a368caf7dd554495c9d4627a6abdddcfd4d5c89d7ff85f76b7f5cc5f4439e89ef84a3b35784bb2b8dbf0fed4a3c80a385d19cebac3293b2ad4ced2502f8cb8b1f4b660b3cda4d92bc84363a93fcec4f8fc1d92a9c6ed0df1a8268424a8f4df0987f44457cf97099aadc2ac679d2496621f7c2fc139d3ba06e47deadb9c321f774114ba5634bb3ba7bff37c53e5f0e253fe1e941fda4a4eaf553e83eb29249469651ab064289d371f0a1394455133a0035c8e151636ac62cbc555a664a446b2aa907354772cbb6dfd65294ee2ae10de635ae1ccf9c9f6dc0fa3cabf0f5b8e33405a94ec760598c3bbaefdb793558c0a05c9c58702a30da11a1ea22ef8f1ca41470d668fd0b2acb7f07184bae7bcf37a69394d9bead8a18f9fa0f3d4ad08a96268fcc6fb21ae263eb611ee6ba13998c6d78f08974f7b9878cdcc29552d48427c5e4f91d2ae72c48b5d6ad0085e4b12ebdaf00f6e00b76dc1ad3ca1ce57e722342f4a0f06071c996f9db849240d6b2dbd4bcdb28f8cddce95da4cb0b92631d96b3ed74ed7c68d6b2d3eeed1c0fc35ba291d73ffd75782823669b1cde0e7289dbe26fabc82ad83815d24ada298f2efb3781151e5d3226bd2289e2fb3898bdcd67571b8b218b1e7e7794601dfb9330bda68e97add7a69e8ccb4166b834289a984022702807e44956f3db88258b67d5b01c1ada5877e08b50354baa52e0d0f45a79db12b72bab84f68f22d2987bba7efae685901bfb107de52a2e26c8ae65487f8189259de8644b8680f248af3fb15eca6204f5af8d75e81515a96edafa511f9b00f356cd87923953fe23eeeec27b850bcc928dc6c4255fdec118fe37a97a5d6bd49cdaf071b86c5ff87a5f53fd8114941d2739b0f6ed2102a4f941c74680fede7307cf13855308f0e7db749fd688f1df80fbc6063817941553a7162c4ce340e8e73553a305683c88a4a962d1338f6f089b25c3a34210ed3c6f09b98c3ccd090b19f3fbe018775277578a43084512622e2861cc0f055dda6fb96aac97cefd01519bad0c793a95f9405b225253dbfc1ac541fe1a5cc0d08e3888d2c8ec80b919e780842d487fc29f8d7867a1cd288186e561ad29e141046d182fa685998ca46cb7559a6d94671bddddb9f2fd51ee6b7a0196de9901b4850a4b8fd63d96d8ef785a02aac8a77a26cd976367f57a916eab032ed6c6963dc50b182c02e61325ed2f9367c388724a069e312b8260d8e076385a1ac701a9de02c3be96d8af22abc0c0ead41348fc0e3cd96012b1362b4c4743e323499662bcd2dfc18e5d48c236119109696f4ddc5eeb864b6b684d342fac141ff8227458d6a8242b21e3e1c35d19962699fb975014d25f9952954c7f8f1d43dda3d1f2a72fc574046accdb2af13d46d881c95fa45ec2920652aead96f33f5a7d665d0986b7a66745fe6dfbad687c3bccb84e0ebc365e8c305289411a2e3abc746a6830401ce66317029298edf33aea549f9443e17b9d5059b322eb91dd7d982eb23ea9aa0d181dfb29fa6739dd3e958e7ed8f9a37969985273668a7e74dff8d5f71e83df1e55b5a54c9eae978bc2913165faa4d446c4ee80c3b3c6e2497f60510cfbe1aa8bd17dbe4b5297680fdee79017dbbc64e475132e47c55fdf3860f16dc55b733d21b1005e2222b04387c7cb332ef1d587a02fa8d844cb98e666da314966db84f21ae1adfa2de86f394575221807726d0b300e26143079871201835d89fdff00473295c369f1a0e879664f895f6e4799378d0dff290d041e313bafe89fe0e328308a9c925db64ed46edef6cf4cb97666730d91d76ae4ed85e6fa2965eedfd1b58c37a2b1745876984277b89a2428b35758289cdba5bd55753b28242d00a3f914652e2c318d96484d1c4b0fe9cf8546aae77b82414362ac49acfbc317b451803a43615a6a45f3d8a0469946da986ca00a3c12287162037a02c8488e6ced646517d3b3b2b10b9d5d96fe91d081fd50539b32f69cdb1fd05b286c995a618ddaa0da2e1ebb5eccfa879ff5be443429cfa8a98f39382dc8a80e1d9344a92e130e203b0ad1830753afc9764ef7104607968d5882701e3a94934d0fcff22a88e0c24cbe77825687cbb769c180608ade0d45551ca636e8d0d9b156291dbc689a8b712f05272e2cd04a2a5988b57997c2ba2ac36788805f9debbbecc3e56054952d36fab9b7a1529049828a2f91ac47bf25e295c6726cb2b6ea05e281c1b041cfe5cf6229095bb99870b40075692068f5f356afe68b426955710579c3eb993e7fa4c32af65e6d038d651d6a15506838a554d9602db7900990547a04532b86ad63ed5186afbe8b59bd02e198639765e44efc11655e2d2e44120fafbce3251a0e19e4be7ca6d21a4500ffc5c558cd6653bd6b8d413a223ab4d6cd3e983a0cf71fd432239cce8d926077d40b9b54330eb2e618fca10dfc0dcaed7b5f26f32a651d4f9645fb08a823882d4aede2d3eafad953bce393e2ff02b1a1831fc20672d8f4c6b583a74d91251bea04a3f0eb9569c27a12d240c3e994fb13ff40f04fc8e4bf4100fa0b7161c79d64f9982a9e5db33efab91ae12f1cef9a5895f30761556a9f397d47766ef4c8a3817146be2fe3ec7cd89595e85887ba304b6f7683cb9deca073be25370984f018a1250925ad14a26b84b3e7e5ce6ea5bdb09f078b6209199f3d211d7349a94a39f2b824496e8997315ffe90d211b74120e8b74134512781a9200eef71422669b342794bd63bee45be142cb95c275d79a581124932594fbad0a14a49ea1c699b1237a1ccea111ac12ee4daa38af5f512f42b5c3200fee5a05eda32d614356c142a4b71cf4343ee10ad213c5c6412807de24938d07a096a0b840c51202533b810615de05a03328b6cc254c32552acf6b8da76bbce65dd63529625160ce99c61c329f9961d9c9abe9902ac4caa5d0cf721e874cd7be005d38eced4da1347f3c0690d6428649102ae0be6cd1b31ea09b202b7bbede629fb6f140a27ac4665de4a4bdc9b50cd138814d9aee49e23bbbb815e80f45bbb35f6cb2a2dbec56ac36378c3ea3437172f43578fc325791c446e5f0b485219b32532d431bd99b2e9d6b1109a4a575d372196d1440b5c7e6ba110f51e4b4dc366327b03295c9f142eb7e8b083e1f0f182de8c688257866cde45a1fdb17aebaaf69864af315677bbddc5d3a5aa0998edf10c7dfdf270eb58a0d9de472170cc3730460564f2b927c68c05dd339e54e45111b0c2abdd35bcba62693a82744d48654565ca36d0cde6a0abc3c9efa011feb262046a947a5cc8861dc5ca16619fb2096774e156fbf696cdf794d3e1a711139c18b434e30eddd3cf1bc71ea4dfa39bee1e179c07cae44e7647d6f8579a96ae042ae8bfb48df7daaf02b43f35ff62f21a6e59ea5eee25d0d18aee68de13cb69aef22d252275aa69312941fa86776dafc5331d29994bf1a1eaa78a89c26bd6018fdaaf4d0b99053d8e4868ac88ff215b5a65a3876f2d0d669296d0cf331b211c0191ccd00583427de8d2fcb146c29d66df42d8b5c4301d8c21e2cc310c7241493f3ff102d9c4c3e39e16d213372184c8132ec68eecbe71b82f744925bf7ec69f0c6319558164cd07df4e5ef22ae1e356dbb8f5b5e7031dc7ca3506ec7c2ec19987744bfe977ea1c65cf3798c9907329a4de71c4c931e8f2100f235345a91349c3c2012560eb0bd51a6d313d1160601bb3f58881711f608f21bccb961b8aaa52c32d1a741799f6545bce3d6cb0d96b4c89917ba67a1b95c3f121050e07d78065a5a775f0d1e62da1c85c7bef2d7d26afec4695fd5f56e4468c88deba67c2c0e4d1fe02158d9b583a7172591c9006820e351a4d6d4ac358385f49665e9897bf2cee8cc3862804cf2f7d89225ac375e392f6ea14bb013a4cb4b391ad6cc5ae60648ec2405ae63db910f8fb2549dd6683f30688fe8345d4a401160ae4c8c1e290c45d5ca00e4629502c2129acc1f11597d0cfe24fdb48b9a09fe7a7c2f1d98243ee0a551b509a85481dcf17d0d52acae3238fdfd75918325a6ec0d48afdce973fdbe8afec10c262d157dcda77b3a034270edf5ddbde04b3f6828f5499b2a3833b4290176773cfb2ae602309aaf1b7c62224e53572a4fd087076a5c6622e7caf09ac649d65c3f57b0ee77ba06cbb48e27cee1f08463201177cb35f2bdc927cd9267d935b30e3348f3c34d2286b9c023d6061e5f7f08a481d8355430498d8180fbf1370db80999be431ffc669496aa1267ee169d30a80ac28a232bd98d22e674b3e2e654d62e553d52e970b98d7fd7fa0013371a0ad8941d3e3a68e97da6dbbf241422d8e73b0b9feb6f2774d6210bd00016cb45eed4df94d144de929950c6482f71de085d17b0b06ffd6f8955fcb2445f07a357c1b2f99dd244568a048f83242eb127223339a980063ba5d0c4543f0c90e45068c3c1353cd0ba2123c3a642c65b7a6c18cf80d71fbd431d6e4b972d5b2cba13d2653e6dae0ef3806c3e5274e0070718cf24d2074f3bb38346e810f93499a5d11f147ef6f392374318598f1f2501118117a2a5fbf9931c241de419310e2e96beef12b643db6e5684041bb578f65bfd85a57b9ebee278214b3906ef81089af4eb50e9d0c9bd710c93032bfd1ab22d21b8329e768c628e5e30792e3a996bc21fa289b421230037e7047a999c0e8516308bd991cb77ec4c4f739c48babdfac4e31643169cf05fc656c4d74d40bf621947819b7cc90d8ee3b828ad2e5a65786321934ef597d88d607e109eae4e71ddaacdcea7ae980949840c91b42aaab2bfd489f8e956362ba8d9eff6166218ea79b7f7646f3d5bb21a064154be99c6e28c17b913a8263b08e134d05c7e9bd2b20ff64153203f9e253400eb0faf6ecf97bf4bfa16089837ba7e9b069fe5a0c6fc2037c8a2429cc433d3192ee59bef0cadc1439b0c98f8fc8384abaa0b7fdea6d0e70e2aa7ba51017ad569ab0db14d3423477d0daee14797388c64bb276e5f46c228a32c578ac3f1491f25c9872add730498e019cb7780765e4a85f7ac0f1fff2b82bb8974d49aac97a6145067c77a521aa53ca7370824038f5145257d546ef6fae9a59791c27db605d04b7bc317183235967b57e7dd4d9de9b657537efd9ec23db3f9f14092e063eb2a8649a4f88689ce8d82fb755fbfeb7478924f7638e3945361d524666d65207c95dafe2d5f9d007cb81b5bd363ad28946400e955ffbb1dd90a0ebffcb03c4e21e25d7a15954c84472b31f5e55b0ffc0ac9ec3ba9d1cd3bf2940b0f1ff697b322b5718a23602499a89dcb1ece77fcdcf1b95fa2a345e6fed0b7f2bf0d55de87d43e816506d992610d1160343e14224c42e839c9e72b3139455030b5f46fc744538ca06bd918ca9a15122e5b71d8af043b5936eddf0960ed18310fe2e95713230ead6e8ce1e81c5d2346866b283bfcccd3de8089a465eed2b87a30cba237f640a956e9fdf130b56877ca331f0fcbfc65c0d4b5d07efbbefc3b8d61f5faa6b33539aabd4a1e91f34ff3b4d6ca128e5e6d7398c1438b2376e9356c1d1c93a3244ce9370bb89dadab642a678b4b64d9c9ddf14cc5873a50e489862d04a90676759b44dc40307f8f47e4461277d4423afd4331ca7bef9ac25659ba39ffe50ddcc109d623a92dc767a6728b78c9b013bf286eb800076b010f1eb43b826e975f70e8779bf942873ced86bb20c831be6ad9116c2e8d95cd3ca5877f2f694cd68c75ed060bd6f35ba20179b0be5ef5491d4c05c62538dabfbc116a345837fced687e0eb5ffba1aab6acf4cdce58e41e2a5e4cde257002654cc7adde45c913e05199f926da4f0741b0c73653a94c9477fd0bb465b44c764db0e789f888ccb14d3ac6584c739e17781a95ed27b3a648bb63661bc7eab5998ac453c68cca6293e6fb7ff0db0d8f5b9f07fcdb0d71799834bea8f0210b1019e9b1fedc36bea93ca5bc5a21817244a4337d61c8ccb764dc0e1f2474f87333da5b6f47b2955f5c16d86c84e31cb18b5661e2cf88ea807b9fd9b668662098e61c9adabc4584795bfde8a601c7764be5f1f69b83cb549d6e905494ccf0e069ab421a88a43046465a589fb96464144940fb04f672fd2e397903c7cdc2ce1c9fb428835cd0aac59e440003055239df83408736ca43e3c7e68eb711d87326c395163450728f1d36a7a422548713bee8a58c54933baf82117f74a3b8181791f3f0a0048129a71c2a7fe6f95dc19961171fdfdadfdb88296d2fca88912e096242d5c4137658cd30e54831ad90ca4ab5ff6aad3dc226aabeb9c6251ea55ed753fd6f62e3742dd9d001e1eb0e04b9c8a49f28ce65e2792f3b5ebd8104947675eec6da7220984bc1fd8737c6a14570338f69565685674f9c84e65ca4536191e20af63918946b3ee0ca3ef985600b3a8b4d56cda000dff8a73b937e3ab53175aa7374ea91d64242e148b2eb90fb8da9a0090e4d55188079ab3d283d5601b27c2732d20e224f0840b60b295c96ae8e242454b15f4faf1c3b4ba1f07374a84ed1472c71ed550df22679c0444a0d729e225f8dd5f6d4863531b73bd21e6dab1379fe055703d5018f7850e434035826999b7fc158ea1570f23d9f7cd1d589bbd3ad1e1b6e2f07ffc12513ef9bedb011072b185de0697e1926d4f9ed8e9c9daf5c3c03cd3e59ee3e84b2c4bc04871080736bf0847d8e9f12efaddaa8bac8464760f7a596aa7240ba216c89f42d5a5ba3ff6c817099a684312c2bf486d79e19e68388f72f32c9fc7c6d42f1d588c4d522cc00d890bb341b1be2a86e2f0a2a2195c2f3bfa6485689364ec54ff06655ed7c39b00ca835e23e5bb910fd9aee16b7aa8f85d8c73e724a6a5254e8dc6a441e51d8eed0c6089f5043e98ed5cb8885bc2dad78abd405e5b675e9203dc6a388394a6102c6913ffa61222ba58702e13eefe3766fed1c7edce9f138e29aa8743993c5dd6aa3a4f194662b2c8cabc30015146b9e7d8ec2b180701384cf820a0f4f425be3d01dcf4c5932096e1dba2e2458e386e17f3d5cbcfba3b447a6332e5942e51f5dfff54ae3e6125c6d6f568ac81818c1f6d781f946947a0300fb84c5b77a2574bc2ffbbed8640fcf5476be39ddfeabd461d01e8f324777e557f0a4023261c6d3c48283f33cff24b1cf0215dd533ee0c51e1383bc1d4103b521ad7e416fe8a74c7de320c99991f71f30707981e1d7af90ee8e4d97ddbe810fbfb51f5e0253bdd3b438edb8f0e1c14975da3dd6c0bb014f5fa90f5945b5ad7c310b4385478fc4623997b7d5b55fa8a92368c4afae9c47337e35a8cebd432076a64b8f0c217982a6b2ca12fbf83ccfa73a27308982d5485618aed4b8d5c3c1dc37dc020bee57b938c4de1f4f297e8e37d46d8e8a8156cf4de5f4cd4598b45fd44bd1f157fb34823e25bd5514e1c52045642bf10826e15399a721726030b802e014023ddb880852d581f5cc376cfa35fa002a9a4651a0b5a7c84f365a754d1ff71ea0c46fd89b5387c5b81946ded2c2fbeca0f15e1f8bd2011d3f5ae56fc0bac134f1f1e88c4e1154223ebb4fbceef791370e0acf3f3682f874ad4ef038e5b155f9f1d17841c878d3264ef68ef10612a878452b762fa8e55956aa0e44d8bb8f21b65d1a102dc8370549bce6fae3235433da1350857e64bcde3cacee1cf4bb82a08fba0e8d1071ec1ecb44aebf6018d5764b0b372e80dbd54401e9f9d2d08000572481a44725f666466b9ac2ed255b2924578b3a4d187111706fce50b1c2a453e5150aab2af418430d4d6ee6f4c5bbdbce77e1436cfe55c2106acc2f93145085e7192c870e688975a8f764032c98a97e69bbb3dc1a89b04086b9c6c4386d2eac0aabd04ff6c6b640568e459dfb896fe374d696660be716eb6f5eb004fe0eda749d0f98bf7475e4cbb76dea00033090bc41367cebea3dc226c5357666187a5b20d69c2ba64dafec1196179e7825af5e54f94baf871086fa1a86e84163922abd233940d5c435947d6c67d262d3b27f3a54a81415bbce292e7f7ac97ae8fcf78f97974c2e65bc67f88e8c1158ff39983f4c37e4fb99411dc97391b56f4cbf43e96f4a9e37fe295273721e4c12e5c8c816690d62ea23ecbf71f7a0f42884abdc43afc470b03d0e23a0e368823e415534444c2f94cf47956f5df3973ba4ee5179107363b5c14b7e24b1c61ac3cc021b015d01b0b60acf83df5ee3c42d46eddf233f586d253682cb0340907898864cf699eacdd01f2635451843499d30ae3ae1e1f17f9d113e5c531cc1ba422d3db422aabf84196b774202dc00af24ba22e2a8b980b106523880a69adf88dfa87f99e01bcfa6ac42e2d64b29a1b16bba34fcb241f8f0a0bd77566ff5ee3b8aa34f25c0c5841721f800a73b70640fd51ee3d1672a68c4eeadf00ba84e53301ecc0ff9cc5cfc129d0f001c582e15981919e6550a40ae6499f72280f26dfc324bd1ac1ef6e14688fee4ab72108d1f2ebfb0237fdc00c73d2b056fb8b770067200c8dea5efb6fad7f10efba7622f863483946e82a0159798252bf69739658b1d5d4caca38f1ae82d59350328bc2737f87b6c9614b93596f8ac61cd1786a9e0d5d15d442d3ba85e7b42f07fd35e83e2371d8c30267f017e5f7b4d06e80620bd59babaab460f6463f3c34ba57c1f9d12a57909c164343e3afc0e111e69112c8db1bff560c1593124282003726de58f1bb8fa556e08979596722624984404493098590d80c76311d76976d32e77663fd4ef2817a66b7108a2381679b22b65304ce6d942c47e6514293c5fc2408049ed94c053ca7a2c76819f99ca1f9ece0d5e0ea1adfc838adaf9ca2659fc787a3247d45af334ed7f38420257b18b116a4192578347439f87245d734b4e3f35771c95bf04f737e3c4eb9706c22ecba58f716282905f06a5c32e872921a9db1a53421da4b6149dd3cc34b4cad00cd4b6fd58ae34a335119d8d2a67d1e288833828e74412d0a4a90c3f87cb7bcc8e553ba5973b3207fe95c932250a09b3169708386781585f26fe701a9710b98a3ab225e723a62207e94dc91459f38f86db79397f2233166adafa9aa6d2b234e38d7a757a2aa30654ea85be508f4f4d7c8e8a4070c0910afd433c5854596d35812578075767cdccebe42014634d278ad165ef746ffd895e3962aa818ef21fbdd9d3c8fe00fe51ecd6ee67eef1430023a8fd69ace666d55bfe7c4d0cb4423ac054c437c4f55192420b27ea75a1069571a46f0ae7ad0a82f7f9ef6305daead98a4483ffcbb8afd60258b6d14b2323639516de17c0ceef6018dd7103d02a9770025b8e8d8247d68ac3c4cbe60aa887b4f8014bae6ae4a98811568cfcaa9f67aece53618273dc9c4455073d0d15e98fcc68120f0c71f47e0928af1c6a20d969bf734b98c59b97d56fe1f66af3a9d8dfc1075084c49dafa928004448377099fdcfe273ad6049ce15a4fb78a1e85f9d2d12e0045292c6f04b27384bc0965ce745424e5337ab9711a1cc68a3ed719bd39a94abc52968dca738f04069e28840d64f4b89086380dcb8780f672d4710e1882b480e72b4d77ff8e18fbd80e85b66f8174151942b3c8b9e0554b0ee5801a6ce3bf3e8d50878ffa1f6fe7b8cf46c6be6b2b90fe8bcb748091f898fd4be5fb1e457f16c488ca0dbf2a227a9dd3b27dec66bf98bf8f8bdd1c09d918bc4aa1569d731b4a721750a684b4443800d2e8fa377e561cfd1343fc931cd526fc16508c031216cba160aa4308c73387308c90fce28669cebd27f14ecf93b4d6817cce58b9dc58772f3414d1e9d0f51223762428babffcc23b54bc3181bfc40e9ea3090452fa7713dab5126f03e84169698af34cb2455ec7dbc9982560cf3bcf6dbb670141a9fe42be0616cfaffe2eeb2eb71c08f1c66e4ada4432f94e33f94625d83fdedaaaff0a48d2fc2d8fb2f4df1b0d023bf7d0f9103f7f9198f9e60bcb17afaeb6ef7e3694367fd36e71af81d6ff1c2f6486be8d75ca8c32cde04d3a6fafb81ff6cdafb54f9defd82306aaa2f74f5f710a1f180b51494acdd702a82d584ae2b3282a96971716848c91062fa3afcd972e8358fd0716e67892ddc6aebafbdfd623deecb1d3ee7d67efb8b9f81bd950d0f2f95968faf0311ee286408b9171dea5f95cd95dd49fe6a5b634128f85e9888ae13c637de3e3c5e760e566a1f663eeb6e384b8f60a83c52f149f3e9e470e91ed6ceee203b08ff5ffa3f60feb622a499ac4d479d9a5c7b198a7965ec3593931cd6e89f9bbfebc769a7d15bf8cafa9dc5cf805e87d44a6d788a667e03210e4c2e083e2fa2a050371280e644c6c231276aadb42aaaf20ae9917b77fd735baa2c523dec90d23bad8e91b66805c0a460c244af938cb7c60f842b8671f98975e43385a2a9fad968b8387fcf8db86639581937b5c28545763e999e9b4ea532962d79575dff65932104e6f1091f6808f2da9e212a1c7f2fd6f51b762d0c7e598f0f8477cc7bf38c2d41c64be70f3d8b17b25529bafaa7b35a7f70e3f9b14faf2e7cf54c74dd4de37233bf803b3fec64e544debd5ecbe36cd2ae4f822950a15d163edd995e2f7cd3a452b3bf2b483fe50257175c2ceb99ae79f73ebf9b529a9edf7ad0aef666526c80b2045553fd8e013694e1fe8bc805a6f56167d2603ef02b070e4159fe652746cb4a5b3b4b3730a5161d356a6dfb8555cb0bafd6ebbdb53c11366f05cde57050a4dd8f56ea45b35cbb39a5b6f3cbec0583c0aded4000f4e403e1003811e4832e294f1d721dae59d91028832d5226f56a3bcdecb0b6bb7c443c0f9a24b0350d36325a721827ec6ce0c041aa65b126944c608233377c80c896de0c99084c1d305f1a15b86f486c9fe4fff634388cc43752bc6720edf6a2f39536f4d40f44dcfb8ce8283c7d2d67d8534ebc05e7f4c361888947361d65df7a7a8320030be2d254ce730f1bde3a13cb0ca59aae395a9909202bccb0da683e53467586b1a4a86b426a5d3b4010b877ccb6e5f06ad94112a6ed0fb44cd9b007969e5e2368370b806b5cf93122c1675a565db2bc7114a0b3a9bb37fb9b6e8fa5cd52249a5ab9a964dbf65c0152125ab27836d9011e8d4914f518ebe542d32c24127e9791f7c0515afb39ff02e304be9d7ef92bcfdfaa90b7f8e09995cb905a615303e12f82d73ef215a584b5b98d64dfbe954b449c7d9199529cb085bf8cb816b7f18a82229ef703e3b300a4d4b6bb460950be8cf733eb1fabc5080657f03db2cd215235de036c3e219d17b581753119fe05a85c5046b16d6f8331e411b8ce1847d8f9ab04cf0beaaf49323657f5d1624ee2dd2f35afa1be6446044ffceb684fb57e28fcd3b976cc214aca088d393059a085096d5ae9c65e47646254f4eaf840c620550ec4503911b5df03a29e126fa1ddc94a850009933c95fc23a2b5c1b2f9fb0a46df8f6fbcb9bc4db21df54bb17a6e2302d841fd9a27263123a412c39d37dad3655075b91a3d8dde4de2c811aa8c3f651d2e6ae4ac7d83cb20703a6a0a5f8dfa3c603b8ee8fd89db79a60518bf4d31f6a2232d06224aa82c64e2bcc2d3f9ee30aed58f670c819f0b9b6762240f5cad02e2974d76ca66ea06dcd2c1f5e630efb04692545b8786a38eca5a657387b7292898ec0b78c92aa76b8c7ff28a39cd260ff80b9df2be45774e822ea23dc5a9a9a97e98574234582197d77e5ef8bf5debeaaee46597095aee687976790e41610f074a345fd0d8160a1148396c7e79730eb12beebc7c4d0dcaa9f3b89fae5c7d3f14b3e08d44773af0836819f30913d706d9efbba5c2fa8ce5eb4fd908c832668483c9218aecde604e93f9491563e0d53cf78370781bf6a687adf56c963ada4cc5ad77f47cdbd5febf8bc2bcb2aac23b815f3daa65e1644fc0736ef471e2b6775afa07a739a2004f50215689c59c4159d475ef10739be4fbce765ea1e7c8ea4aedbe26456b356922c583850639ea0ed03892df5717e1564a3cadd3f6ac5e0f0626f84318e451fab5fd3d5f5f76b5e3e580a67d709c5df0e8bafd46e0d4bd0e9ef09a42ac7063f19ef80d4383246343e3eb42967b2b0efce3c4a7b5393d5eee0f9bf4924c8992409e274d9dca97dc99637ad2979984d974f8a22dc8e1ec43c5960c27a23db50cdb9d31b134c62aebae4ebf8791a526d3b120c5bd9c510e115acb6f3acd98209506ed59e74fb9d1741029e5bacff3faf7651939fe83addce6f157826d9559deaf5a4de4416e1f14b4eac0c4de7e31ed56618b667b3b6b477b6477865bf886d4fa826686765a5609f50429bd19de9992ad90e07d241990f167e59ef194e8a04acf5765498e81d2504e7f128c37f06a60a252acf283a3ffef29bd2c1a476967c02ac71944f2d8a597bc4ab6d8718958910b32a47b81505f857dfe6e48f2303946e0bedb9e2f61948d2acd9c4fee186a371fac4ebc72f3a4f375a49daceb5fbd9ec9fe304e6503d7bf77622d0046c9945c488bd2afaab88745d64668bfa4355cacff1def97f19349f1ff57dbc30fd8e9a93d7bac07e809a9f0694237964903e3cfd3b926477f6f0a3adeb26241390c2b7b3426665562d15b89eb659a0b5fc40109187b0351ac9d087d638e052ebef47c24b52854ed6b11ee6d9e5e7b08e9b5f659f03158c6bff5a1938ad39d91d448ecc9faa12940772db673a4311f38fdbba74bc4661e528faf2ff7204b0fc96247b537c16ed6dac613db0e50f1344d102a33d0c6f3eef91f7739f7846572f08340c1d8d2f7f10de751fb427e4c6aea279f31426557c183934e6ae9d9e3b86df551f83abdf20b07cfbe4d4e8729cb21c947b0c8c114cbb14e6f20520256ab632f0c596036c71119f8b502998cf2e894aea5e8c308f715447b7c8df9d6b1ed33465a9f1807985d6858205ea4b2b41ecb7e342a238e06dde47bbbddc67996f244a78419f8b6fff7356c0f2d7f88fbcba3d339dfe81d226c95f5058cf13506bb2dfa913eda0a6aa92eca645d403694e86116a92bfad1110788b8d9aaf1b98b8e1c0c4b637c64526777f3915e81282659a61d20ec0cc66354b5d1a3b26cf73b2914c332efcbd6297110cd4c1d55e1f89d5f485745a1d6c7107c76071148580a0ce9844efddcb8b4a55050a77d39fc479bf7e2e4e07110b37c25701514bf8ec1a850e39c4d1af1f5f1c715c453242d2e3f0e436854761bb56fbbb45ec42bf77e943ab7ed5fc8c7d08f3fb5dbf147c2e1419031f2b05e1446982f1b09d51ccd37814ffd8a64dc70b656923e912d70e4e3e40dfad35b98b98effc60adc724ae773f9d8fb15ca045c981fdc907b41eaf1b9b37fb15934232755e043e084ad5a154ae5324a325f43d471bc142eecf4d64cd88dc5bf07d68b97d6af1226e61610e5676ea0ff125feecf203b9fa64f78736f1830982ef3ab618a17dcbbb7f89bebbc259a2851ae8a298f63cd67088b37433cac5492649e9543ddb8e62c8eac8ce8f3c5765d2311c</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码查看文章</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>go函数内对切片进行append的问题浅析</title>
    <url>/2024/12/28/go%E5%87%BD%E6%95%B0%E5%86%85%E5%AF%B9%E5%88%87%E7%89%87%E8%BF%9B%E8%A1%8Cappend%E7%9A%84%E9%97%AE%E9%A2%98%E6%B5%85%E6%9E%90/</url>
    <content><![CDATA[<h1 id="函数传参"><a href="#函数传参" class="headerlink" title="函数传参"></a>函数传参</h1><p>需要明确的是，在 Go 语言中，函数的参数传递类型只有值传递。官网描述: <a href="https://link.juejin.cn/?target=https://go.dev/doc/faq%23pass_by_value">When are function parameters passed by value?</a></p>
<blockquote>
<p>When are function parameters passed by value?</p>
<p>As in all languages in the C family, everything in Go is passed by value. That is, a function always gets a copy of the thing being passed, as if there were an assignment statement assigning the value to the parameter. For instance, passing an <code>int</code> value to a function makes a copy of the <code>int</code>, and passing a pointer value makes a copy of the pointer, but not the data it points to. (See a <a href="https://go.dev/doc/faq#methods_on_values_or_pointers">later section</a> for a discussion of how this affects method receivers.)</p>
<p>Map and slice values behave like pointers: they are descriptors that contain pointers to the underlying map or slice data. Copying a map or slice value doesn’t copy the data it points to. Copying an interface value makes a copy of the thing stored in the interface value. If the interface value holds a struct, copying the interface value makes a copy of the struct. If the interface value holds a pointer, copying the interface value makes a copy of the pointer, but again not the data it points to.</p>
<p>Note that this discussion is about the semantics of the operations. Actual implementations may apply optimizations to avoid copying as long as the optimizations do not change the semantics.</p>
</blockquote>
<h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>切片在 go 中的数据结构是</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> slice <span class="keyword">struct</span> &#123;</span><br><span class="line">    array unsafe.Pointer</span><br><span class="line">    <span class="built_in">len</span>   <span class="type">int</span></span><br><span class="line">    <span class="built_in">cap</span>   <span class="type">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当函数参数为 slice 类型时，形参是对实参 <code>slice</code> 结构体进行拷贝，指针值、长度和容量字段均被拷贝了，那么它们的数组指针值是相同的。因此底层指向的数组是一样的，都是指向同一个数组，但这两个 slice 并不是一个</p>
<p>代码示例</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testSliceV1</span><span class="params">(list []<span class="type">int8</span>)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;testSliceV1 addr=%p\n&quot;</span>, &amp;list)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testSliceV2</span><span class="params">(list *[]<span class="type">int8</span>)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;testSliceV2 addr=%p\n&quot;</span>, list)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    list := <span class="built_in">make</span>([]<span class="type">int8</span>, <span class="number">0</span>, <span class="number">4</span>)</span><br><span class="line">    list = <span class="built_in">append</span>(list, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;main addr=%p\n&quot;</span>, &amp;list)</span><br><span class="line"></span><br><span class="line">    testSliceV1(list)</span><br><span class="line">    testSliceV2(&amp;list)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>控制台输出</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">main addr=0xc000010018</span><br><span class="line">testSliceV1 addr=0xc000010030</span><br><span class="line">testSliceV2 addr=0xc000010018</span><br></pre></td></tr></table></figure>

<p>可以看到，函数 testSliceV1 中，传入的参数是切片，打印该切片的地址为0xc000010030，已经不再是原切片(0xc000010018)</p>
<p>函数参数类型为切片还是切片类型，对于函数结果的影响可能相同也可能不同，主要取决于在函数内部对切片做了何种类型的操作</p>
<ul>
<li><p>如果函数内部仅仅是修改切片的某一个元素，那么传参是切片和切片指针都能达到目的，因为此时都是根据<code>array</code>指针对底层数组进行修改</p>
</li>
<li><p>如果函数内部对 slice 进行 append 操作，那么参数类型是切片还是切片指针其结果就完全不同了，因为 append 不仅仅涉及底层数组元素的修改，还涉及到切片 len 和 cap 属性的修改。形参仅仅是实参的拷贝，对形参 len 或 cap 属性的修改，并不会体现在实参上</p>
</li>
</ul>
<h1 id="传切片"><a href="#传切片" class="headerlink" title="传切片"></a>传切片</h1><p>借助 <code>unsafe.Pointer</code> 和 <code>uintptr</code> 来印证实验结果</p>
<h2 id="无扩容"><a href="#无扩容" class="headerlink" title="无扩容"></a>无扩容</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;unsafe&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AppendWithSlice</span><span class="params">(slice []<span class="type">int8</span>, num <span class="type">int8</span>)</span></span> &#123;</span><br><span class="line">    slice = <span class="built_in">append</span>(slice, num)</span><br><span class="line">    printSlice(<span class="string">&quot;AppendWithSlice&quot;</span>, &amp;slice)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printSlice</span><span class="params">(logTag <span class="type">string</span>, list *[]<span class="type">int8</span>)</span></span> &#123;</span><br><span class="line">    first_uintptr := <span class="type">uintptr</span>(unsafe.Pointer(&amp;(*list)[<span class="number">0</span>]))</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">cap</span>(*list) == <span class="number">0</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%s, 切片元素:[]\n&quot;</span>, logTag)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%s, 切片元素:[&quot;</span>, logTag)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">cap</span>(*list); i++ &#123;</span><br><span class="line">        next_uintptr := first_uintptr + <span class="type">uintptr</span>(i)</span><br><span class="line">        int8_ptr := (*<span class="type">int8</span>)(unsafe.Pointer(next_uintptr))</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span> &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;%d&quot;</span>, *int8_ptr)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;,%d&quot;</span>, *int8_ptr)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;], len=%d, cap=%d\n&quot;</span>, <span class="built_in">len</span>(*list), <span class="built_in">cap</span>(*list))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ParamWithSliceV1</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;\n#### Case: ParamWithSlice, the capacity of a slice is not expanded.&quot;</span>)</span><br><span class="line">    list := <span class="built_in">make</span>([]<span class="type">int8</span>, <span class="number">0</span>, <span class="number">4</span>)</span><br><span class="line">    list = <span class="built_in">append</span>(list, <span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">    printSlice(<span class="string">&quot;ParamWithSliceV1 init&quot;</span>, &amp;list)</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;#### AppendWithSlice 添加元素 6&quot;</span>)</span><br><span class="line">    AppendWithSlice(list, <span class="number">6</span>)</span><br><span class="line">    printSlice(<span class="string">&quot;ParamWithSliceV1&quot;</span>, &amp;list)</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;#### AppendWithSlice 添加元素 8&quot;</span>)</span><br><span class="line">    AppendWithSlice(list, <span class="number">8</span>)</span><br><span class="line">    printSlice(<span class="string">&quot;ParamWithSliceV1&quot;</span>, &amp;list)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ParamWithSliceV1()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>控制台输出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#### Case: ParamWithSlice, the capacity of a slice is not expanded.</span></span><br><span class="line">ParamWithSliceV1 init, 切片元素:[2,4,0,0], len=2, <span class="built_in">cap</span>=4</span><br><span class="line"><span class="comment">#### AppendWithSlice 添加元素 6</span></span><br><span class="line">AppendWithSlice, 切片元素:[2,4,6,0], len=3, <span class="built_in">cap</span>=4</span><br><span class="line">ParamWithSliceV1, 切片元素:[2,4,6,0], len=2, <span class="built_in">cap</span>=4</span><br><span class="line"><span class="comment">#### AppendWithSlice 添加元素 8</span></span><br><span class="line">AppendWithSlice, 切片元素:[2,4,8,0], len=3, <span class="built_in">cap</span>=4</span><br><span class="line">ParamWithSliceV1, 切片元素:[2,4,8,0], len=2, <span class="built_in">cap</span>=4</span><br></pre></td></tr></table></figure>



<p>分析：</p>
<p>切片容量为 4，ParamWithSliceV1 函数内未触发切片的扩容操作。</p>
<ol>
<li><p>当添加元素 6 后，可以看到形参 slice 长度 len 为 3，但实参 list 切片的长度 len 仍为 2。实参和形参的下标 2 处的元素均已经填充了整数 6，这是因为 append 操作对底层数组产生了实际的影响即添加了整数 6。但由于形参 slice 为切片而非切片指针，导致在 <code>slice = append(slice, num)</code> 执行后，slice 的 len 已经变为 3，但实参 list 的 len 并未发生改变。</p>
</li>
<li><p>当添加元素 8 后，可以看到形参 slice 长度 len 为 3，但实参 list 切片的长度 len 仍为 2。实参和形参的下标 2 处的元素均已填充了整数 8。这是因为上一步添加整数 6 的语句并未改变 list 中 len 的值，导致添加整数 8 时，会在 index&#x3D;len-1 之后的位置填充新增元素，将 6 覆盖掉重新赋值为 8</p>
</li>
</ol>
<h2 id="有扩容"><a href="#有扩容" class="headerlink" title="有扩容"></a>有扩容</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;unsafe&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AppendWithSlice</span><span class="params">(slice []<span class="type">int8</span>, num <span class="type">int8</span>)</span></span> &#123;</span><br><span class="line">    slice = <span class="built_in">append</span>(slice, num)</span><br><span class="line">    printSlice(<span class="string">&quot;AppendWithSlice&quot;</span>, &amp;slice)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 省略了函数 printSlice</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ParamWithSliceV2</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;\n#### Case: ParamWithSlice, the capacity of a slice is expanded.&quot;</span>)</span><br><span class="line">    list := <span class="built_in">make</span>([]<span class="type">int8</span>, <span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">    list = <span class="built_in">append</span>(list, <span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">    printSlice(<span class="string">&quot;ParamWithSliceV2 init&quot;</span>, &amp;list)</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;#### AppendWithSlice 添加元素 6&quot;</span>)</span><br><span class="line">    AppendWithSlice(list, <span class="number">6</span>)</span><br><span class="line">    printSlice(<span class="string">&quot;ParamWithSliceV2&quot;</span>, &amp;list)</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;#### AppendWithSlice 添加元素 8&quot;</span>)</span><br><span class="line">    AppendWithSlice(list, <span class="number">8</span>)</span><br><span class="line">    printSlice(<span class="string">&quot;ParamWithSliceV2&quot;</span>, &amp;list)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ParamWithSliceV2()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>控制台输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#### Case: ParamWithSlice, the capacity of a slice is expanded.</span><br><span class="line">ParamWithSliceV2 init, 切片元素:[2,4], len=2, cap=2</span><br><span class="line">#### AppendWithSlice 添加元素 6</span><br><span class="line">AppendWithSlice, 切片元素:[2,4,6,0,0,0,0,0], len=3, cap=8</span><br><span class="line">ParamWithSliceV2, 切片元素:[2,4], len=2, cap=2</span><br><span class="line">#### AppendWithSlice 添加元素 8</span><br><span class="line">AppendWithSlice, 切片元素:[2,4,8,0,0,0,0,0], len=3, cap=8</span><br><span class="line">ParamWithSliceV2, 切片元素:[2,4], len=2, cap=2</span><br></pre></td></tr></table></figure>



<p>分析：</p>
<p>切片容量为 4，ParamWithSliceV2 函数内触发切片的扩容操作。</p>
<ol>
<li><p>当添加元素 6 后，可以看到形参 slice 长度 len 为 3，且触发扩容操作 cap 增加到 8，但实参 list 切片的长度 len 和容量 cap 仍为 2。这是由于当切片需要扩容时，Go 会新创建一个容量更大的底层数组，然后将原数组的元素会被复制到新数组中，新元素会被添加到新数组的末尾。最后切片的引用会指向新的底层数组，原数组会被垃圾回收。因此这里形参 slice 和实参 list 不仅仅是不同的切片，它们的所指向的底层数组已经不同了，</p>
<p>形参下标 2 处的元素均已经填充了整数 6，这是因为 append 操作对底层数组产生了实际的影响即添加了整数 6。实参长度和容量均为 2，且底层数组未发生过变化，因此因为没有下标 2 的说法。</p>
</li>
<li><p>当添加元素 8 后，可以看到和添加元素 6 的情况相同。不再多加分析</p>
</li>
</ol>
<h1 id="传切片地址"><a href="#传切片地址" class="headerlink" title="传切片地址"></a>传切片地址</h1><h2 id="无扩容-1"><a href="#无扩容-1" class="headerlink" title="无扩容"></a>无扩容</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;unsafe&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AppendWithSlicePtr</span><span class="params">(slice *[]<span class="type">int8</span>, num <span class="type">int8</span>)</span></span> &#123;</span><br><span class="line">    *slice = <span class="built_in">append</span>(*slice, num)</span><br><span class="line">    printSlice(<span class="string">&quot;AppendWithSlicePtr&quot;</span>, slice)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 省略了函数 pringSlice</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ParamWithSlicePtrV1</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;\n#### Case: ParamWithSlicePtr, the capacity of a slice is not expanded.&quot;</span>)</span><br><span class="line">    list := <span class="built_in">make</span>([]<span class="type">int8</span>, <span class="number">0</span>, <span class="number">4</span>)</span><br><span class="line">    list = <span class="built_in">append</span>(list, <span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">    printSlice(<span class="string">&quot;ParamWithSlicePtrV1 init&quot;</span>, &amp;list)</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;#### AppendWithSlicePtr 添加元素 6&quot;</span>)</span><br><span class="line">    AppendWithSlicePtr(&amp;list, <span class="number">6</span>)</span><br><span class="line">    printSlice(<span class="string">&quot;ParamWithSlicePtrV1&quot;</span>, &amp;list)</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;#### AppendWithSlicePtr 添加元素 8&quot;</span>)</span><br><span class="line">    AppendWithSlicePtr(&amp;list, <span class="number">8</span>)</span><br><span class="line">    printSlice(<span class="string">&quot;ParamWithSlicePtrV1&quot;</span>, &amp;list)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ParamWithSlicePtrV1()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>控制台输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#### Case: ParamWithSlicePtr, the capacity of a slice is not expanded.</span><br><span class="line">ParamWithSlicePtrV1 init, 切片元素:[2,4,0,0], len=2, cap=4</span><br><span class="line">#### AppendWithSlicePtr 添加元素 6</span><br><span class="line">AppendWithSlicePtr, 切片元素:[2,4,6,0], len=3, cap=4</span><br><span class="line">ParamWithSlicePtrV1, 切片元素:[2,4,6,0], len=3, cap=4</span><br><span class="line">#### AppendWithSlicePtr 添加元素 8</span><br><span class="line">AppendWithSlicePtr, 切片元素:[2,4,6,8], len=4, cap=4</span><br><span class="line">ParamWithSlicePtrV1, 切片元素:[2,4,6,8], len=4, cap=4</span><br></pre></td></tr></table></figure>



<p>分析：</p>
<p>切片容量为 4，ParamWithSlicePtrV1 函数内未触发切片的扩容操作。</p>
<ol>
<li><p>当添加元素 6 后，可以看到形参 slice 长度 len 为 3，实参 list 切片的长度 len 也为 3。实参和形参的下标 2 处的元素均已经填充了整数 6，这是因为 append 操作对底层数组产生了实际的影响即添加了整数 6。且由于形参 slice 为切片指针，因此 slice 所指向的切片即是实参 list，那么 slice 所指切片的 len 变化同样会体现在实参 list 上</p>
</li>
<li><p>当添加元素 8 后，可以看到形参 slice 长度 len 增加到 4，实参 list 切片的长度 len 也为 4。和添加元素 6 情况相同，不再多加分析</p>
</li>
</ol>
<h2 id="有扩容-1"><a href="#有扩容-1" class="headerlink" title="有扩容"></a>有扩容</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;unsafe&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AppendWithSlicePtr</span><span class="params">(slice *[]<span class="type">int8</span>, num <span class="type">int8</span>)</span></span> &#123;</span><br><span class="line">    *slice = <span class="built_in">append</span>(*slice, num)</span><br><span class="line">    printSlice(<span class="string">&quot;AppendWithSlicePtr&quot;</span>, slice)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 省略了函数 printSlice</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ParamWithSlicePtrV2</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;\n#### Case: ParamWithSlicePtr, the capacity of a slice is expanded.&quot;</span>)</span><br><span class="line">    list := <span class="built_in">make</span>([]<span class="type">int8</span>, <span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">    list = <span class="built_in">append</span>(list, <span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">    printSlice(<span class="string">&quot;ParamWithSlicePtrV2 init&quot;</span>, &amp;list)</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;#### AppendWithSlicePtr 添加元素 6&quot;</span>)</span><br><span class="line">    AppendWithSlicePtr(&amp;list, <span class="number">6</span>)</span><br><span class="line">    printSlice(<span class="string">&quot;ParamWithSlicePtrV2&quot;</span>, &amp;list)</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;#### AppendWithSlicePtr 添加元素 8&quot;</span>)</span><br><span class="line">    AppendWithSlicePtr(&amp;list, <span class="number">8</span>)</span><br><span class="line">    printSlice(<span class="string">&quot;ParamWithSlicePtrV2&quot;</span>, &amp;list)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ParamWithSlicePtrV2()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>控制台输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#### Case: ParamWithSlicePtr, the capacity of a slice is expanded.</span><br><span class="line">ParamWithSlicePtrV2 init, 切片元素:[2,4], len=2, cap=2</span><br><span class="line">#### AppendWithSlicePtr 添加元素 6</span><br><span class="line">AppendWithSlicePtr, 切片元素:[2,4,6,0,0,0,0,0], len=3, cap=8</span><br><span class="line">ParamWithSlicePtrV2, 切片元素:[2,4,6,0,0,0,0,0], len=3, cap=8</span><br><span class="line">#### AppendWithSlicePtr 添加元素 8</span><br><span class="line">AppendWithSlicePtr, 切片元素:[2,4,6,8,0,0,0,0], len=4, cap=8</span><br><span class="line">ParamWithSlicePtrV2, 切片元素:[2,4,6,8,0,0,0,0], len=4, cap=8</span><br></pre></td></tr></table></figure>



<p>分析：</p>
<p>切片容量为 4，ParamWithSlicePtrV2 函数内触发切片的扩容操作。</p>
<ol>
<li><p>当添加元素 6 后，可以看到形参 slice 长度 len 为 3，容量 cap 为 8，实参 list 切片的长度 len 也为 3，容量 cap 也为 8。实参和形参的下标 2 处的元素均已经填充了整数 6，这是因为 append 操作对底层数组产生了实际的影响即添加了整数 6。且由于形参 slice 为切片指针，因此 slice 所指向的切片即是实参 list，那么 slice 所指切片的 len 和 cap 变化同样会体现在实参 list 上</p>
</li>
<li><p>当添加元素 8 后，可以看到形参 slice 长度 len 增加到 4，实参 list 切片的长度 len 也为 4。和添加元素 6 情况相同，不再多加分析</p>
</li>
</ol>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/12/27/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>一文详解架构设计的本质</title>
    <url>/2025/01/04/%E4%B8%80%E6%96%87%E8%AF%A6%E8%A7%A3%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E7%9A%84%E6%9C%AC%E8%B4%A8/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="791e3803967b4d28174ab85a84c17578ce203d810c4d387569b2ae38143f2d29"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码查看文章</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>架构</category>
      </categories>
  </entry>
  <entry>
    <title>二分搜索</title>
    <url>/2024/12/31/%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2/</url>
    <content><![CDATA[<h1 id="二分搜索问题定义"><a href="#二分搜索问题定义" class="headerlink" title="二分搜索问题定义"></a>二分搜索问题定义</h1><p>二分搜索法，是通过不断缩小解可能存在的范围，从而求得问题最优解的方法</p>
<p>求满足某个条件 $𝐶(𝑥)$ 的最小的 $x$ 这一问题。而 $𝐶(𝑥)$ 即为 $𝑎_x⩾𝑘$。对于任意满足 $𝐶(𝑥)$ 的 $𝑥$，如果所有的 $𝑥′⩾𝑥$ 也满足 $𝐶(𝑥′)$ 的话，我们就可以用二分搜索来求得最小的 $𝑥$。</p>
<p><strong>首先我们将区间的左端点初始化为不满足 𝐶(𝑥) 的值，右端点初始化为满足 𝐶(𝑥) 的值，然后每次取中点 mid，判断 𝐶(𝑚𝑖𝑑) 是否满足并缩小范围，直到 (lb, ub] 足够小了为止，最后 ub 就是要求的最小值</strong>。</p>
<p>可以简单理解为，<strong>最小值、最短、最少，区间设为 (lb, ub]，最终结果为 ub；最大值、最长、最多等，区间设为[lb, ub)，最终结果为 lb</strong></p>
<p>最后需要注意整数溢出问题，假如求最小值，同时 $2^{31}-1$ 是有效的，那么 lb&#x3D;-1, ub&#x3D;$2^{31}-1$，计算 mid 时 (ub-lb) 会造成整数溢出，因此需要额外进行处理，改造 lb、ub</p>
<h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><h2 id="整数二分"><a href="#整数二分" class="headerlink" title="整数二分"></a>整数二分</h2><h3 id="最小化问题"><a href="#最小化问题" class="headerlink" title="最小化问题"></a>最小化问题</h3><p>区间为 (lb, ub]，结果为 ub</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (ub - lb &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> lb + (ub - lb) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (C(mid))</span><br><span class="line">        ub = mid;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        lb = mid;</span><br><span class="line">&#125; <span class="comment">// 终止循环时 ub == lb + 1</span></span><br></pre></td></tr></table></figure>

<p>区间为 [lb, ub]，结果为 ub</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (lb &lt; ub) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> lb + (ub - lb) / <span class="number">2</span>; <span class="comment">// 向下取整</span></span><br><span class="line">    <span class="keyword">if</span> (C(mid))</span><br><span class="line">        ub = mid;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        lb = mid + <span class="number">1</span>;</span><br><span class="line">&#125;<span class="comment">// 终止循环时 ub == lb</span></span><br></pre></td></tr></table></figure>

<h3 id="最大化问题"><a href="#最大化问题" class="headerlink" title="最大化问题"></a>最大化问题</h3><p>区间为 [lb, ub)，结果为 lb</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (ub - lb &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> lb + (ub - lb) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (C(mid))</span><br><span class="line">        ub = mid;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        lb = mid;</span><br><span class="line">&#125;<span class="comment">// 终止循环时 ub == lb + 1</span></span><br></pre></td></tr></table></figure>

<p>区间为 [lb, ub]，结果为 lb</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (lb &lt; ub) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> lb + (ub - lb + <span class="number">1</span>) / <span class="number">2</span>; <span class="comment">// 向上取整</span></span><br><span class="line">    <span class="keyword">if</span> (C(mid))</span><br><span class="line">        lb = mid;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ub = mid - <span class="number">1</span>;</span><br><span class="line">&#125;<span class="comment">// 终止循环时 ub == lb</span></span><br></pre></td></tr></table></figure>

<p>lb &lt; ub 的循环条件，就可以解决极端情况 ub-lb&gt;1 条件造成的整数溢出问题</p>
<h3 id="闭区间死循环问题分析"><a href="#闭区间死循环问题分析" class="headerlink" title="闭区间死循环问题分析"></a>闭区间死循环问题分析</h3><p><strong>死循环的核心点在于mid的取值方式</strong>：mid &#x3D; lb + (ub - lb) &#x2F;2，</p>
<ul>
<li>如果某一时刻 ub &#x3D;&#x3D; lb + 1，那么由于mid的向下取整，会导致 mid &#x3D; lb; 假如 if 语句导致 lb &#x3D; mid 发生，那么就会进入死循环，mid &#x3D; lb，接着 lb &#x3D; mid。同样的 mid &#x3D; lb + (ub - lb + 1) &#x2F; 2； </li>
<li>如果有 ub &#x3D; mid操作，也有可能进入死循环。但是ub - lb &gt; 1的终止条件会使得此情况不再发生，原因在于当ub &#x3D;&#x3D; lb + 1时，由于不满足循环条件循环退出，也就不存在mid &#x3D; lb或者 mid &#x3D; ub的操作了。</li>
</ul>
<p><strong>当区间为闭区间，防止进入死循环的方法就是不能使mid &#x3D;&#x3D; lb、mid &#x3D;&#x3D; ub成立</strong></p>
<ol>
<li><p><strong>最小化最大值 mid 向下取整（维护ub）</strong></p>
<p> 如果 if 条件成立，需要维护ub，令ub &#x3D; mid; 如果不成立则令lb &#x3D; mid + 1；因为mid向下取整只可能取到lb，为避免死循环就必须使lb &#x3D; mid + 1；且因为我们要求的是最小化满足条件的值，既然mid不满足循环条件，也就无需考虑此值了。</p>
</li>
<li><p><strong>最大化最小值 mid 向上取整（维护lb）</strong></p>
<p> 如果 if 条件成立，需要维护lb，令lb &#x3D; mid; 如果不成立则令ub &#x3D; mid - 1；因为mid向上取整只可能取到ub，为避免死循环就必须使ub &#x3D; mid - 1；且因为我们要求的是最大化满足条件的值，既然mid不满足循环条件，也就无需考虑此值了。</p>
</li>
</ol>
<h2 id="浮点数二分"><a href="#浮点数二分" class="headerlink" title="浮点数二分"></a>浮点数二分</h2><p>浮点数没有了边界问题，因此ub、lb的赋值不需要加减了。</p>
<h3 id="循环次数控制法"><a href="#循环次数控制法" class="headerlink" title="循环次数控制法"></a>循环次数控制法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (ub - lb) / <span class="number">2</span> + lb;</span><br><span class="line">    <span class="keyword">if</span> (check(mid))</span><br><span class="line">        lb = mid;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ub = mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ub <span class="comment">// 或者 return lb</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (ub - lb) / <span class="number">2</span> + lb;</span><br><span class="line">    <span class="keyword">if</span> (check(mid))</span><br><span class="line">        lb = mid;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ub = mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ub <span class="comment">// 或者 return lb</span></span><br></pre></td></tr></table></figure>



<h3 id="精度控制法"><a href="#精度控制法" class="headerlink" title="精度控制法"></a>精度控制法</h3><p>eps表示精度，一般比结果要求的浮点数多2位。结果要求5位，那么eps就是1e-7。一般情况下eps最大也就1e-6了</p>
<p>eps可根据实际情况来设定，需要注意的是eps如果太小，因为浮点数机器实现的原因，可能会导致死循环。　　</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 最大化</span></span><br><span class="line"><span class="keyword">while</span> (ub - lb &gt; eps) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (ub - lb) / <span class="number">2</span> + lb;</span><br><span class="line">    <span class="keyword">if</span> (check(mid))</span><br><span class="line">        lb = mid; </span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ub = mid; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ub <span class="comment">// 这里不能return lb，目前还不知道为什么。</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 最小化</span></span><br><span class="line"><span class="keyword">while</span> (ub - lb &gt; eps) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (ub - lb) / <span class="number">2</span> + lb;</span><br><span class="line">    <span class="keyword">if</span> (check(mid))</span><br><span class="line">        ub = mid; </span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        lb = mid; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> lb <span class="comment">// 这里不能return ub，目前还不知道为什么。</span></span><br></pre></td></tr></table></figure>



<h1 id="常见问题类型及例题"><a href="#常见问题类型及例题" class="headerlink" title="常见问题类型及例题"></a>常见问题类型及例题</h1><h2 id="左右边界"><a href="#左右边界" class="headerlink" title="左右边界"></a>左右边界</h2><ul>
<li><p>lower_bound 第一个不小于目标值的值。大于等于目标值的值的最小值，不存在返回 n（上边界）</p>
</li>
<li><p>upper_bound 第一个大于目标值的值。大于目标值的值的最小值，不存在返回 n （上边界）。</p>
</li>
</ul>
<h3 id="lower-bound"><a href="#lower-bound" class="headerlink" title="lower_bound"></a>lower_bound</h3><p>试图在已排序的 [first, last) 中寻找元素 value。返回一个迭代器，指向<strong>第一个“不小于 value”</strong>的元素，如果 value 大于 [first, last)内的任何一个元素，则返回 last。实际上，它返回<strong>“在不破坏顺序的情况下，可插入 value 的第一个合适位置”。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lowerBound</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">lb</span> <span class="operator">=</span> -<span class="number">1</span>, ub = nums.length;</span><br><span class="line">    <span class="keyword">while</span> (ub - lb &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (ub - lb) / <span class="number">2</span> + lb;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &gt;= target)</span><br><span class="line">            ub = mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            lb = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ub;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="upper-bound"><a href="#upper-bound" class="headerlink" title="upper_bound"></a>upper_bound</h3><p>试图在已排序的 [first, last) 中寻找元素 value。返回一个迭代器，如果 value 存在，迭代器将指向最后一个 value 的下一位置。实际上，它会返回<strong>“在不破坏顺序的情况下，可插入 value 的最后一个合适位置”</strong>。也可理解为是<strong>第一个大于 value 的元素</strong>的位置（不存在则返回 last）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">upperBound</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">lb</span> <span class="operator">=</span> -<span class="number">1</span>, ub = nums.length;</span><br><span class="line">    <span class="keyword">while</span> (ub - lb &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (ub - lb) / <span class="number">2</span> + lb;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &gt; target)</span><br><span class="line">            ub = mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            lb = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ub;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="34-在排序数组中查找元素的第一个和最后一个位置"><a href="#34-在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="34. 在排序数组中查找元素的第一个和最后一个位置"></a><a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/">34. 在排序数组中查找元素的第一个和最后一个位置</a></h3><p>写法1：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] searchRange(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">lb</span> <span class="operator">=</span> lower_bound(nums, target);</span><br><span class="line">    <span class="keyword">if</span> (lb == n || nums[lb] != target) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ub</span> <span class="operator">=</span> upper_bound(nums, target);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;lb, ub-<span class="number">1</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">lower_bound</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">lb</span> <span class="operator">=</span> <span class="number">0</span>, ub = nums.length;</span><br><span class="line">    <span class="keyword">while</span> (lb &lt; ub) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (ub-lb)/<span class="number">2</span> + lb;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &gt;= target) &#123;</span><br><span class="line">            ub = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            lb = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ub;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">upper_bound</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">lb</span> <span class="operator">=</span> <span class="number">0</span>, ub = nums.length;</span><br><span class="line">    <span class="keyword">while</span> (lb &lt; ub) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (ub-lb)/<span class="number">2</span> + lb;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            ub = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            lb = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ub;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>写法2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] searchRange(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">lb</span> <span class="operator">=</span> lower_bound(nums, target);</span><br><span class="line">    <span class="keyword">if</span> (lb == n || nums[lb] != target) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ub</span> <span class="operator">=</span> upper_bound(nums, target);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;lb, ub-<span class="number">1</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">lower_bound</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">lb</span> <span class="operator">=</span> -<span class="number">1</span>, ub = nums.length;</span><br><span class="line">    <span class="keyword">while</span> (ub - lb &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (ub-lb)/<span class="number">2</span> + lb;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &gt;= target) &#123;</span><br><span class="line">            ub = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            lb = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ub;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">upper_bound</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">lb</span> <span class="operator">=</span> -<span class="number">1</span>, ub = nums.length;</span><br><span class="line">    <span class="keyword">while</span> (ub - lb &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (ub-lb)/<span class="number">2</span> + lb;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            ub = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            lb = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ub;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1385-两个数组间的距离值"><a href="#1385-两个数组间的距离值" class="headerlink" title="1385. 两个数组间的距离值"></a><a href="https://leetcode.cn/problems/find-the-distance-value-between-two-arrays/">1385. 两个数组间的距离值</a></h3><p>首先将 $arr2$ 排序，对于 $arr1[i] ,arr2$ 中不存在满足条件： $arr1[i]-d \leq arr2[j] \leq arr1[i]+d$ 的元素. 可以利用 lower_bound 和upper_bound 函数分别找出大于等于 $arr1[i]−d$ 的第一个位置 low，以及大于 $arr1[i]+d$ 的第一个位置 high, 那么满足上述不等式条件的元素的索引都在区间 [low,high) 中，如果这个区间为空即 low &#x3D;&#x3D; high，则距离值可以加 1.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findTheDistanceValue</span><span class="params">(<span class="type">int</span>[] arr1, <span class="type">int</span>[] arr2, <span class="type">int</span> d)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> arr1.length, n = arr2.length, res = <span class="number">0</span>;</span><br><span class="line">        Arrays.sort(arr2);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">lb</span> <span class="operator">=</span> lower_bound(arr2, arr1[i]-d);</span><br><span class="line">            <span class="type">int</span> <span class="variable">ub</span> <span class="operator">=</span> upper_bound(arr2, arr1[i]+d);</span><br><span class="line">            <span class="keyword">if</span> (lb == ub) &#123;</span><br><span class="line">                res++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">upper_bound</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">lb</span> <span class="operator">=</span> -<span class="number">1</span>, ub = nums.length;</span><br><span class="line">        <span class="keyword">while</span> (ub-lb&gt;<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (ub-lb)/<span class="number">2</span>+lb;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">                ub = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                lb = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ub;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">lower_bound</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">lb</span> <span class="operator">=</span> -<span class="number">1</span>, ub = nums.length;</span><br><span class="line">        <span class="keyword">while</span> (ub-lb&gt;<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (ub-lb)/<span class="number">2</span>+lb;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt;= target) &#123;</span><br><span class="line">                ub = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                lb = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ub;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2529-正整数和负整数的最大计数"><a href="#2529-正整数和负整数的最大计数" class="headerlink" title="2529. 正整数和负整数的最大计数"></a><a href="https://leetcode.cn/problems/maximum-count-of-positive-integer-and-negative-integer/">2529. 正整数和负整数的最大计数</a></h3><p>找分界点。</p>
<ol>
<li>正数：以大于 0 的最小位置为界限。对应 upper_bound(nums, 0);</li>
<li>负数：以大于等于 0 的最小位置为界限。 对应 lower_bound(nums, 0);</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumCount</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">posNum</span> <span class="operator">=</span> n - upper_bound(nums, <span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">negNum</span> <span class="operator">=</span> lower_bound(nums, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> Math.max(posNum, negNum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">upper_bound</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">lb</span> <span class="operator">=</span> -<span class="number">1</span>, ub = nums.length;</span><br><span class="line">        <span class="keyword">while</span> (ub-lb&gt;<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (ub-lb)/<span class="number">2</span>+lb;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">                ub = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                lb = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ub;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">lower_bound</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">lb</span> <span class="operator">=</span> -<span class="number">1</span>, ub = nums.length;</span><br><span class="line">        <span class="keyword">while</span> (ub-lb&gt;<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (ub-lb)/<span class="number">2</span>+lb;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt;= target) &#123;</span><br><span class="line">                ub = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                lb = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ub;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="最大化-最小值"><a href="#最大化-最小值" class="headerlink" title="最大化(最小值)"></a>最大化(最小值)</h2><p>最大化最小值，实质还是求满足条件的最大值，因此需维护lb的位置。区间为 [lb, ub)，结果为 lb</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (ub - lb &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> lb + (ub - lb) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (C(mid))</span><br><span class="line">        lb = mid;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ub = mid;</span><br><span class="line">&#125;<span class="comment">// 终止循环时 ub == lb + 1</span></span><br></pre></td></tr></table></figure>

<h3 id="POJ-2456-Aggressive-cows"><a href="#POJ-2456-Aggressive-cows" class="headerlink" title="POJ 2456 Aggressive cows"></a><a href="http://poj.org/problem?id=2456">POJ 2456 Aggressive cows</a></h3><p>check()：可以安排牛的位置使得任意的牛的间距都不小于d。</p>
<p>求满足条件的最大的d。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(<span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(System.in));</span><br><span class="line"><span class="comment">//        try&#123;sc=new Scanner(new FileInputStream(&quot;Algorithm/src/Input.txt&quot;));&#125; catch(Exception ignored)&#123;&#125;</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">M</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">            arr[i] = sc.nextInt();</span><br><span class="line">        sc.close();</span><br><span class="line"></span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        <span class="type">int</span> <span class="variable">lb</span> <span class="operator">=</span> <span class="number">0</span>, ub = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">        <span class="keyword">while</span> (ub - lb &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (ub - lb) / <span class="number">2</span> + lb;</span><br><span class="line">            <span class="keyword">if</span> (check(arr, mid, M))</span><br><span class="line">                lb = mid;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                ub = mid;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(lb);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> d, <span class="type">int</span> m)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">last</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> last + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (cur &lt; arr.length &amp;&amp; arr[cur] - arr[last] &lt; d)</span><br><span class="line">                cur++;</span><br><span class="line">            <span class="keyword">if</span> (cur == arr.length)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            last = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="POJ-3258-River-Hopscotch"><a href="#POJ-3258-River-Hopscotch" class="headerlink" title="POJ 3258 River Hopscotch"></a><a href="http://poj.org/problem?id=3258">POJ 3258 River Hopscotch</a></h3><p>和POJ 2456类似，也是区间内使得元素间的间距最大化。有两个思路：</p>
<ol>
<li><p>N+2个位置放置N+2-M个石头。</p>
<p> 定义$C(d)&#x3D;可以安排石子的位置使得任意的石子的间距都不小于d$。</p>
</li>
<li><p>N+2个位置丢弃石头不得超过M个。</p>
<p> 定义$C(d)&#x3D;在丢弃石子数量不超过 M 的前提下，使得任意石子的间距都不小于d$。</p>
</li>
</ol>
<p>求满足条件的最大的d</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(<span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(System.in));</span><br><span class="line">     <span class="comment">// try&#123;sc=new Scanner(new FileInputStream(&quot;Algorithm/src/Input.txt&quot;));&#125; catch(Exception ignored)&#123;&#125;</span></span><br><span class="line">        <span class="type">int</span> L, N, M;</span><br><span class="line">        L = sc.nextInt();</span><br><span class="line">        N = sc.nextInt();</span><br><span class="line">        M = sc.nextInt();</span><br><span class="line">        <span class="type">int</span>[] rocks = <span class="keyword">new</span> <span class="title class_">int</span>[N+<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">            rocks[i+<span class="number">1</span>] = sc.nextInt();</span><br><span class="line">        rocks[N+<span class="number">1</span>] = L;</span><br><span class="line">        Arrays.sort(rocks);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">lb</span> <span class="operator">=</span> <span class="number">0</span>, ub = L + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (ub - lb &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (ub - lb) / <span class="number">2</span> + lb;</span><br><span class="line">            <span class="keyword">if</span> (check(rocks, N, M, mid))</span><br><span class="line">             lb = mid;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">             ub = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(lb);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 起始结尾共2个石头，中间N个石头，放弃M个石头。相当于有N+2个位置，放置N+2-M块石头。</span></span><br><span class="line"><span class="comment">     * 要求石头间距最大化。</span></span><br><span class="line"><span class="comment">     * 其次题意要求起始和末尾两块石头不动。因此第1个石头必然放到0处。</span></span><br><span class="line"><span class="comment">     * 至于最后一块石头不关注是否能动，只要能放置就可以：</span></span><br><span class="line"><span class="comment">     * 1. 满足间距的最差情况就是不动，间距恰好为d</span></span><br><span class="line"><span class="comment">     * 2. 更佳的情况就是最后一块不在末尾，那么如果最后一块不动，其间距必然大于d，满足要求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    private static boolean check(int[] rocks, int n, int m, int d) &#123;</span></span><br><span class="line"><span class="comment">//        int last = 0;</span></span><br><span class="line"><span class="comment">//        for (int i = 1; i &lt; n + 2 - m; i++) &#123;</span></span><br><span class="line"><span class="comment">//            int cur = last + 1;</span></span><br><span class="line"><span class="comment">//            while (cur &lt; rocks.length &amp;&amp; rocks[cur] - rocks[last] &lt; d)</span></span><br><span class="line"><span class="comment">//                cur++;</span></span><br><span class="line"><span class="comment">//            if (cur == rocks.length)</span></span><br><span class="line"><span class="comment">//                return false;</span></span><br><span class="line"><span class="comment">//            last = cur;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        return true;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 依次尝试放置石头，如果间距不满足就必须丢弃，然后尝试下一个位置</span></span><br><span class="line"><span class="comment">     * 最后判断丢弃石头个数，如果超过了限定值就返回false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span>[] rocks, <span class="type">int</span> n, <span class="type">int</span> m, <span class="type">int</span> d)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">last</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">drop</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n + <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (rocks[i] - rocks[last] &lt; d)</span><br><span class="line">                drop++;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                last = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> drop  &lt;= m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="最小化-最大值"><a href="#最小化-最大值" class="headerlink" title="最小化(最大值)"></a>最小化(最大值)</h2><p>最小化最大值，实质还是求满足条件的最小值，因此需维护ub的位置，区间为 (lb, ub]，结果为 ub</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (ub - lb &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> lb + (ub - lb) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (C(mid))</span><br><span class="line">        ub = mid;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        lb = mid;</span><br><span class="line">&#125;<span class="comment">// 终止循环时 ub == lb + 1</span></span><br></pre></td></tr></table></figure>

<h3 id="POJ-3273-Monthly-Expense"><a href="#POJ-3273-Monthly-Expense" class="headerlink" title="POJ 3273 Monthly Expense"></a><a href="http://poj.org/problem?id=3273">POJ 3273 Monthly Expense</a></h3><p>$C(X):&#x3D;(对每天的金额按照指定的月金额进行分组，且组数不超过M)$</p>
<p>求满足条件的最少的月金额</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(<span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(System.in));</span><br><span class="line">      <span class="comment">//try&#123;sc=new Scanner(new FileInputStream(&quot;Algorithm/src/Input.txt&quot;));&#125; catch(Exception ignored)&#123;&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span>[] money = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="type">int</span> <span class="variable">lb</span> <span class="operator">=</span> <span class="number">0</span>, ub = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            money[i] = sc.nextInt();</span><br><span class="line">            ub += money[i];</span><br><span class="line">        &#125;</span><br><span class="line">        sc.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (ub - lb &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (ub - lb) / <span class="number">2</span> + lb;</span><br><span class="line">            <span class="keyword">if</span> (check(money, mid, m))</span><br><span class="line">                ub = mid;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                lb = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(String.valueOf(ub));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span>[] money, <span class="type">int</span> maxMoney, <span class="type">int</span> m)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; money.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (money[i] &gt; maxMoney)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            sum += money[i];</span><br><span class="line">            <span class="keyword">if</span> (sum &lt;= maxMoney)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span>  &#123;</span><br><span class="line">                sum = money[i];</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt &lt;= m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="POJ-3104-Drying"><a href="#POJ-3104-Drying" class="headerlink" title="POJ 3104 Drying"></a><a href="http://poj.org/problem?id=3104">POJ 3104 Drying</a></h3><p>$C(m):&#x3D;所有衣服全部烘干所需要烘干器的时间之和不超过m$</p>
<p>求满足条件的最小m</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对于某一件衣服 i，假设其使用 radiator x 分钟，那么其自然晾干需要 mid - x 分钟，则若要晾干此件衣服，</span></span><br><span class="line"><span class="comment">     * 需满足 𝑥×𝑘+(𝑚𝑖𝑑−𝑥) 𝑔𝑒𝑞𝑠𝑙𝑎𝑛𝑡𝑤𝑎𝑡𝑒𝑟[𝑖]，即 𝑥⩾(𝑤𝑎𝑡𝑒𝑟[𝑖]−𝑑)/(𝑘−1)。</span></span><br><span class="line"><span class="comment">     * 这里需注意的是，假如需要烘干 5.1分钟，那么实际上占用了 ceil(5.1) = 6分钟。将所有衣服的最少烘干时间加起来，如果不大于 mid 时间，则能全部晾干。</span></span><br><span class="line"><span class="comment">     * 那么所有衣服所需要使用烘干器的总时间不得超过mid</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 需注意 k = 1的情况，此时 k - 1 = 0，需作特殊情况讨论。实际上若 k = 1，所需时间即为所有衣服的水量总和，直接返回 ub 即可。</span></span><br><span class="line"><span class="comment">     * 该题对时间限制较为严格，ub不能通过Math.max(ub, a[i])获取。通过数组排序然后取末尾即最大值可通过</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">try</span>&#123;sc=<span class="keyword">new</span> <span class="title class_">Scanner</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;Algorithm/src/Input.txt&quot;</span>));&#125; <span class="keyword">catch</span>(Exception ignored)&#123;&#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            a[i] = sc.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        sc.close();</span><br><span class="line"></span><br><span class="line">        Arrays.sort(a);</span><br><span class="line">        <span class="type">int</span> <span class="variable">lb</span> <span class="operator">=</span> <span class="number">0</span>, ub = a[n-<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(ub);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (ub - lb &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (ub - lb)/ <span class="number">2</span> + lb;</span><br><span class="line">            <span class="keyword">if</span> (check(a, mid, k))</span><br><span class="line">                ub = mid;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                lb = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(ub);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> minutes, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &gt; minutes) &#123;</span><br><span class="line">                cnt += Math.ceil((arr[i] - minutes) * <span class="number">1.0</span> / (k - <span class="number">1</span>));</span><br><span class="line">                <span class="keyword">if</span> (cnt &gt; minutes)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt &lt;= minutes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="POJ-3045-Cow-Acrobats"><a href="#POJ-3045-Cow-Acrobats" class="headerlink" title="POJ 3045 Cow Acrobats"></a><a href="http://poj.org/problem?id=3045">POJ 3045 Cow Acrobats</a></h3><p>每次只考虑最下面选哪个牛，策略是选择w+v最大的那个。设其他任一牛为w’，v’，所有牛总重为sum，那么两头牛分别在最下层的风险是sum-w-v和sum-w’-v’，所以每次都选择w+v最大的牛放在最下面。</p>
<p>$C(m):&#x3D;(任何一头牛所承受的风险不高于m)$</p>
<p>求满足条件的最小m</p>
<p>注意最上面那头牛也有自己的危险性(一定是一个负数即-v).</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">INF</span> <span class="operator">=</span> <span class="number">1000000000</span>+<span class="number">7</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">try</span>&#123;sc=<span class="keyword">new</span> <span class="title class_">Scanner</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;Algorithm/src/Input.txt&quot;</span>));&#125; <span class="keyword">catch</span>(Exception ignored)&#123;&#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span>[][] cows = <span class="keyword">new</span> <span class="title class_">int</span>[n][<span class="number">2</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            cows[i][<span class="number">0</span>] = sc.nextInt();</span><br><span class="line">            cows[i][<span class="number">1</span>] = sc.nextInt();</span><br><span class="line">            sum += cows[i][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// POJ不支持lambda简写</span></span><br><span class="line">        Arrays.sort(cows, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] o1, <span class="type">int</span>[] o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> o2[<span class="number">0</span>] + o2[<span class="number">1</span>] - (o1[<span class="number">0</span>] + o1[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">lb</span> <span class="operator">=</span> -INF, ub = INF;</span><br><span class="line">        <span class="keyword">while</span> (ub - lb &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (ub-lb)/<span class="number">2</span>+lb;</span><br><span class="line">            <span class="keyword">if</span> (check(cows, sum, mid))</span><br><span class="line">                ub = mid;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                lb = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(ub);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span>[][] cows, <span class="type">int</span> sum, <span class="type">int</span> risk)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; cows.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">wi</span> <span class="operator">=</span> cows[i][<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">si</span> <span class="operator">=</span> cows[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (sum - wi - si &gt; risk)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            sum -= wi;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="最大化平均值"><a href="#最大化平均值" class="headerlink" title="最大化平均值"></a>最大化平均值</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">有n个物品的重量和价值分别是wi和vi。从中选出k个物品使得单位重量的价值最大。</span><br><span class="line">输入 </span><br><span class="line">n = 3, k = 2</span><br><span class="line">(w, v) = &#123; (2, 2), (5, 3), (2, 1) &#125;</span><br><span class="line">输出</span><br><span class="line">0.75 （如果选 0 号和 2 号物品，平均价值是 (2 + 1) / (2 + 2) = 0.75)</span><br></pre></td></tr></table></figure>

<p>定义 $𝐶(𝑥):&#x3D;$可以选择使得单位重量的价值不小于$𝑥$</p>
<p>原问题变换为求满足$C(x)$的最大的 $x$。剩下的问题就是如何判断$𝐶(𝑥)$是否可行了。</p>
<p>假设我们选定了某个物品的集合$S$，那么它们的单位重量的价值是</p>
<p>$\sum_{i\in S} v_i&#x2F;\sum_{i\in S} w_i$</p>
<p>因此问题就变成了判断是否存在$S$满足下面的条件</p>
<p>$\sum_{i\in S}^{} v_i&#x2F;\sum_{i\in S} w_i \geq 0$</p>
<p>不等式变形得到</p>
<p>$\sum_{i\in S}^{} (v_i - x \times w_i) \geq 0$</p>
<p>因此可以对$(v_i−x \times w_i)$的值进行排序贪心地进行选取</p>
<p>定义 $C(x)&#x3D;((v_i−x \times w_i)$ 从大到小排列中的前$k$个和不小于0）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(<span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(System.in));</span><br><span class="line">        <span class="keyword">try</span>&#123;sc=<span class="keyword">new</span> <span class="title class_">Scanner</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;Algorithm/src/Input.txt&quot;</span>));&#125; <span class="keyword">catch</span>(Exception ignored)&#123;&#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span>[] w = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="type">int</span>[] v = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            v[i] = sc.nextInt();</span><br><span class="line">            w[i] = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        sc.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">double</span> <span class="variable">lb</span> <span class="operator">=</span> <span class="number">0</span>, ub = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">        <span class="keyword">while</span> (ub - lb &gt; <span class="number">1e-6</span>) &#123;</span><br><span class="line">            <span class="type">double</span> <span class="variable">mid</span> <span class="operator">=</span> (ub- lb)/<span class="number">2</span> + lb;</span><br><span class="line">            <span class="keyword">if</span> (check(w,v,mid,k))</span><br><span class="line">                lb = mid;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                ub = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.format(<span class="string">&quot;%.2f\n&quot;</span>, ub);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span>[] w, <span class="type">int</span>[] v, <span class="type">double</span> avg, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> w.length;</span><br><span class="line">        <span class="type">double</span>[] tmp = <span class="keyword">new</span> <span class="title class_">double</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            tmp[i] = v[i] - w[i]*avg;</span><br><span class="line">        <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Arrays.sort(tmp);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">            sum += tmp[n-<span class="number">1</span>-i];</span><br><span class="line">        <span class="keyword">return</span> sum &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="POJ-2976-Dropping-tests"><a href="#POJ-2976-Dropping-tests" class="headerlink" title="POJ 2976 Dropping tests"></a><a href="http://poj.org/problem?id=2976">POJ 2976 Dropping tests</a></h3><p>和上一题相同，只不过是挑选n-k个成绩</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">try</span>&#123;sc=<span class="keyword">new</span> <span class="title class_">Scanner</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;Algorithm/src/Input.txt&quot;</span>));&#125; <span class="keyword">catch</span>(Exception ignored)&#123;&#125;</span><br><span class="line">        <span class="keyword">while</span> (sc.hasNext()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="keyword">if</span> (n == <span class="number">0</span> &amp;&amp; k == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="type">long</span>[] a = <span class="keyword">new</span> <span class="title class_">long</span>[n];</span><br><span class="line">            <span class="type">long</span>[] b = <span class="keyword">new</span> <span class="title class_">long</span>[n];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">                a[i] = sc.nextInt();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">                b[i] = sc.nextInt();</span><br><span class="line"></span><br><span class="line">            <span class="type">double</span> <span class="variable">lb</span> <span class="operator">=</span> <span class="number">0</span>, ub = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//            for (int i = 0; i &lt; 100; i++) &#123;</span></span><br><span class="line"><span class="comment">//                double mid = (ub - lb) / 2 + lb;</span></span><br><span class="line"><span class="comment">//                if (check(a,b,mid,n-k))</span></span><br><span class="line"><span class="comment">//                    lb = mid;</span></span><br><span class="line"><span class="comment">//                else</span></span><br><span class="line"><span class="comment">//                    ub = mid;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            <span class="keyword">while</span> (ub - lb &gt; <span class="number">1e-7</span>) &#123;</span><br><span class="line">                <span class="type">double</span> <span class="variable">mid</span> <span class="operator">=</span> (ub - lb) / <span class="number">2</span> + lb;</span><br><span class="line">                <span class="keyword">if</span> (check(a,b,mid,n-k))</span><br><span class="line">                    lb = mid;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    ub = mid;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Math.round(<span class="number">100</span>*ub));</span><br><span class="line">        &#125;</span><br><span class="line">        sc.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(<span class="type">long</span>[] a, <span class="type">long</span>[] b, <span class="type">double</span> avg, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> a.length;</span><br><span class="line">        <span class="type">double</span>[] tmp = <span class="keyword">new</span> <span class="title class_">double</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            tmp[i] = a[i] - b[i] * avg;</span><br><span class="line">        <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Arrays.sort(tmp);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            sum += tmp[n-<span class="number">1</span>-i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="POJ-3111-K-Best"><a href="#POJ-3111-K-Best" class="headerlink" title="POJ 3111 K Best"></a><a href="http://poj.org/problem?id=3111">POJ 3111 K Best</a></h3><p>解法和前两题相同。不过要注意增加id属性，用于确认选取的珠宝序号</p>
<p>其次POJ对于时间要求较高，因此对于类Pair只能读数据的时候就创建好，而不是每次执行check都要创建临时数组。</p>
<p>另外double类型的排序，直接用减法是不正确的。尽量用Double类的静态方法进行比较</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Pair</span> &#123;</span><br><span class="line">        <span class="type">int</span> v,w,idx;</span><br><span class="line">        <span class="type">double</span> remain;</span><br><span class="line">        Pair()&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Pair[] ps;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(<span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(System.in));</span><br><span class="line">        <span class="keyword">try</span>&#123;sc=<span class="keyword">new</span> <span class="title class_">Scanner</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;Algorithm/src/Input.txt&quot;</span>));&#125; <span class="keyword">catch</span>(Exception ignored)&#123;&#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        ps = <span class="keyword">new</span> <span class="title class_">Pair</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            ps[i] = <span class="keyword">new</span> <span class="title class_">Pair</span>();</span><br><span class="line">            ps[i].idx = i + <span class="number">1</span>;</span><br><span class="line">            ps[i].v = sc.nextInt();</span><br><span class="line">            ps[i].w = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        sc.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">double</span> <span class="variable">lb</span> <span class="operator">=</span> <span class="number">0</span>, ub = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">        <span class="keyword">while</span> (ub - lb &gt; <span class="number">1e-6</span>) &#123;</span><br><span class="line">            <span class="type">double</span> <span class="variable">mid</span> <span class="operator">=</span> (ub - lb)/<span class="number">2</span> + lb;</span><br><span class="line">            <span class="keyword">if</span> (check(ps,mid,k))</span><br><span class="line">                lb = mid;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                ub = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>)</span><br><span class="line">                System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            System.out.print(ps[i].idx);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(Pair[] ps, <span class="type">double</span> avg, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> ps.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            ps[i].remain = ps[i].v - ps[i].w*avg;</span><br><span class="line">        <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Arrays.sort(ps, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Pair&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Pair o1, Pair o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> Double.compare(o2.remain, o1.remain);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">            sum += ps[i].remain;</span><br><span class="line">        <span class="keyword">return</span> sum &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="查找第K大的值"><a href="#查找第K大的值" class="headerlink" title="查找第K大的值"></a>查找第K大的值</h2><h3 id="POJ-3579"><a href="#POJ-3579" class="headerlink" title="POJ 3579"></a><a href="http://poj.org/submit?problem_id=3579">POJ 3579</a></h3><p>java版代码还有问题。</p>
<h3 id="POJ-3685"><a href="#POJ-3685" class="headerlink" title="POJ 3685"></a><a href="http://poj.org/submit?problem_id=3685">POJ 3685</a></h3><p>观察公式 $i^2+100000\times i+j^2−100000\times j + i \times j$，当固定 j 时，可以发现该函数关于 i 时递增的，所以在第 j 列中，函数值是从上往下递增的，这符合二分搜索的条件。</p>
<p>先二分枚举 value，如果小于 value 的元素个数小于 M，说明该 value 太小。Mth 小的数为排序后数组的第M个数，那么在无重复元素的情况下小于第M个元素值的元素个数应该小于M。另外在check value时，也需要二分枚举行数，暴力枚举会超时。</p>
<p>定义$C(x)&#x3D;数组中元素对应的函数值小于 value的个数小于 M 个$。求最大value。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">try</span>&#123;sc=<span class="keyword">new</span> <span class="title class_">Scanner</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;Algorithm/src/Input.txt&quot;</span>));&#125; <span class="keyword">catch</span>(Exception ignored)&#123;&#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tests</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; tests; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="type">long</span> <span class="variable">m</span> <span class="operator">=</span> sc.nextLong(); <span class="comment">// 刚开始用int，结果报错RuntimeError</span></span><br><span class="line"></span><br><span class="line">            <span class="type">long</span> <span class="variable">lb</span> <span class="operator">=</span> -<span class="number">100000L</span>*n, ub = (<span class="type">long</span>) n*n*<span class="number">3</span> + <span class="number">100000L</span>*n;</span><br><span class="line">            <span class="keyword">while</span> (ub - lb &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">mid</span> <span class="operator">=</span> (ub-lb)/<span class="number">2</span>+lb;</span><br><span class="line">                <span class="keyword">if</span> (check(n, m, mid))</span><br><span class="line">                    lb = mid;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    ub = mid;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(lb);</span><br><span class="line">        &#125;</span><br><span class="line">        sc.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span> n, <span class="type">long</span> m, <span class="type">long</span> val)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">lb</span> <span class="operator">=</span> <span class="number">0</span>, ub = n+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (ub - lb &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (ub-lb)/<span class="number">2</span>+lb;</span><br><span class="line">                <span class="keyword">if</span> (func(mid, j) &lt; val)</span><br><span class="line">                    lb = mid;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    ub = mid;</span><br><span class="line">            &#125;</span><br><span class="line">            cnt += lb;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt &lt; m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">func</span><span class="params">(<span class="type">long</span> i, <span class="type">long</span> j)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i*i + <span class="number">100000</span>*i + j*j - <span class="number">100000</span>*j + i*j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="最小化第K大的值"><a href="#最小化第K大的值" class="headerlink" title="最小化第K大的值"></a>最小化第K大的值</h2><h3 id="POJ-2010"><a href="#POJ-2010" class="headerlink" title="POJ 2010"></a>POJ 2010</h3><h3 id="POJ-3662"><a href="#POJ-3662" class="headerlink" title="POJ 3662"></a>POJ 3662</h3><h2 id="假定一个解并判断是否可行-浮点数二分"><a href="#假定一个解并判断是否可行-浮点数二分" class="headerlink" title="假定一个解并判断是否可行 &amp;&amp; 浮点数二分"></a>假定一个解并判断是否可行 &amp;&amp; 浮点数二分</h2><h3 id="POJ-1064-Cable-master"><a href="#POJ-1064-Cable-master" class="headerlink" title="POJ 1064 Cable master"></a><a href="http://poj.org/problem?id=1064">POJ 1064 Cable master</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="type">double</span>[] nums = <span class="keyword">new</span> <span class="title class_">double</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            nums[i] = scanner.nextDouble();</span><br><span class="line">        scanner.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">Main</span> <span class="variable">solution</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Main</span>();</span><br><span class="line">        solution.solve(nums, k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 结果要求2位，那么精度控制在1e-6就足够了</span></span><br><span class="line"><span class="comment">     * 结果显示2位小数，且不可四舍五入，处理方法为先乘上10的要显示的位数次方，取floor后再除以刚才乘上的因子。</span></span><br><span class="line"><span class="comment">     * 例如0.366，四舍五入为0.37，0.366 * 100 = 36.6，floor(36.6) = 36.， 36. / 100 = 0.36。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">solve</span><span class="params">(<span class="type">double</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">double</span> <span class="variable">lb</span> <span class="operator">=</span> <span class="number">0</span>, ub = <span class="number">100005</span>;</span><br><span class="line">        <span class="keyword">while</span> (ub - lb &gt; <span class="number">1e-6</span>) &#123;</span><br><span class="line">            <span class="type">double</span> <span class="variable">mid</span> <span class="operator">=</span> (ub - lb) / <span class="number">2</span> + lb;</span><br><span class="line">            <span class="keyword">if</span> (check(nums, mid, k))</span><br><span class="line">                lb = mid;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                ub = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.format(<span class="string">&quot;%.2f\n&quot;</span>, Math.floor(ub * <span class="number">100</span>) / <span class="number">100</span>); <span class="comment">// 返回的必须是ub，lb会出错</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1次循环区间缩小一半。100次意味着缩小次数达到2^100，精度约为10^&#123;-30&#125;。已经足够了。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    private void solve(double[] nums, int k) &#123;</span></span><br><span class="line"><span class="comment">//        int n = nums.length;</span></span><br><span class="line"><span class="comment">//        double lb = 0, ub = 100005;</span></span><br><span class="line"><span class="comment">//        for (int i = 0; i &lt; 100; i++) &#123;</span></span><br><span class="line"><span class="comment">//            double mid = (ub - lb) / 2 + lb;</span></span><br><span class="line"><span class="comment">//            if (check(nums, mid, k))</span></span><br><span class="line"><span class="comment">//                lb = mid;</span></span><br><span class="line"><span class="comment">//            else</span></span><br><span class="line"><span class="comment">//                ub = mid;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        System.out.format(&quot;%.2f\n&quot;, Math.floor(ub * 100) / 100); // lb或ub都可以，为了统一返回ub</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(<span class="type">double</span>[] nums, <span class="type">double</span> x, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">double</span> num : nums)</span><br><span class="line">            cnt += (<span class="type">int</span>)(num/x);</span><br><span class="line">        <span class="keyword">return</span> cnt &gt;= k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="旋转数组问题"><a href="#旋转数组问题" class="headerlink" title="旋转数组问题"></a>旋转数组问题</h2><p>二段性：</p>
<ol>
<li>经过旋转的数组，显然前半段满足 <code>&gt;= nums[0]</code>，而后半段不满足 <code>&gt;= nums[0]</code>。我们可以以此作为依据，通过「二分」找到旋转点。然后通过比较旋转点和target，确定下一步二分的区间</li>
<li>经过旋转的数组，如果nums[mid] &gt; nums[lb]，则[lb, mid]有序；如果nums[mid] &lt; nums[lb]，则[mid,ub]有序</li>
<li>经过旋转的数组，如果nums[mid] &gt; nums[ub]，则[lb, mid]有序；如果nums[mid] &lt; nums[ub]，则[mid,ub]有序</li>
</ol>
<h3 id="33-搜索无重复元素的旋转排序数组"><a href="#33-搜索无重复元素的旋转排序数组" class="headerlink" title="33. 搜索无重复元素的旋转排序数组"></a><a href="https://leetcode-cn.com/problems/search-in-rotated-sorted-array/">33. 搜索无重复元素的旋转排序数组</a></h3><p>解法1：经过旋转的数组，显然前半段满足 <code>&gt;= nums[0]</code>，而后半段不满足 <code>&gt;= nums[0]</code>。我们可以以此作为依据，通过「二分」找到旋转点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">lb</span> <span class="operator">=</span> <span class="number">0</span>, ub = n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (lb &lt; ub) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (ub - lb + <span class="number">1</span>) / <span class="number">2</span> + lb;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &gt;= nums[<span class="number">0</span>])</span><br><span class="line">            lb = mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ub = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (target &gt;= nums[<span class="number">0</span>])</span><br><span class="line">        lb = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        lb = lb + <span class="number">1</span>;</span><br><span class="line">        ub = n - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (lb &lt; ub) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (ub-lb)/<span class="number">2</span> + lb;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &gt;= target) </span><br><span class="line">            ub = mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            lb = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums[ub] == target ? ub : -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解法2：</p>
<p>在常规二分查找的时候查看当前 mid 为分割位置分割出来的两个部分 [l, mid] 和 [mid + 1, r] 哪个部分是有序的，并根据有序的那个部分确定我们该如何改变二分查找的上下界，因为我们能够根据有序的那部分判断出 target 在不在这个部分：</p>
<ol>
<li>如果 [l, mid - 1] 是有序数组，且 target 的大小满足[nums[l],nums[mid])，则我们应该将搜索范围缩小至 [l, mid - 1]，否则在 [mid + 1, r] 中寻找。</li>
<li>如果 [mid, r] 是有序数组，且 target 的大小满足(nums[mid+1],nums[r]]，则我们应该将搜索范围缩小至 [mid + 1, r]，否则在 [l, mid - 1] 中寻找。</li>
</ol>
<p>标准的写法。也可以将nums[mid]&#x3D;&#x3D;target提到第一个if之前</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">lb</span> <span class="operator">=</span> -<span class="number">1</span>, ub = n-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (ub - lb &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (ub-lb)/<span class="number">2</span>+lb;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &lt;= nums[ub]) &#123; <span class="comment">// [mid, ub] 有序</span></span><br><span class="line">              <span class="comment">// nums[mid] &lt; target,不能有等于，否则 lb=mid 有问题，因为 lb 是无效值</span></span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt; target &amp;&amp; target &lt;= nums[ub]) &#123; </span><br><span class="line">                  lb = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  ub = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">// target &lt;= nums[mid] 一定要有等于，否则 ub=mid 有问题，因为 ub 是有效值</span></span><br><span class="line">            <span class="keyword">if</span> (nums[lb+<span class="number">1</span>] &lt;= target &amp;&amp; target &lt;= nums[mid]) &#123;</span><br><span class="line">                  ub = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  lb = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> nums[ub] == target ? ub : -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>写法2 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">lb</span> <span class="operator">=</span> <span class="number">0</span>, ub = nums.length;</span><br><span class="line">    <span class="keyword">while</span> (ub-lb&gt;<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (ub-lb)/<span class="number">2</span> + lb;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &lt;= nums[ub-<span class="number">1</span>]) &#123; <span class="comment">// [mid, ub-1] 有序</span></span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt;= target &amp;&amp; target &lt;= nums[ub-<span class="number">1</span>]) &#123;</span><br><span class="line">                lb = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ub = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[lb] &lt;= target &amp;&amp; target &lt; nums[mid]) &#123;</span><br><span class="line">                ub = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                lb = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> nums[lb] == target ? lb : -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>写法3</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">lb</span> <span class="operator">=</span> <span class="number">0</span>, ub = nums.length;</span><br><span class="line">    <span class="keyword">while</span> (ub - lb &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (ub - lb) / <span class="number">2</span> + lb;</span><br><span class="line">        <span class="keyword">if</span> (nums[lb] &lt; nums[mid]) &#123; <span class="comment">// [lb,mid]有序</span></span><br><span class="line">            <span class="keyword">if</span> (nums[lb] &lt;= target &amp;&amp; target &lt; nums[mid]) <span class="comment">// target在[lb,mid)内，否则到[mid, ub)找</span></span><br><span class="line">                ub = mid;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                lb = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// [mid, ub)有序</span></span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt;= target &amp;&amp; target &lt;= nums[ub-<span class="number">1</span>]) <span class="comment">// target在[mid,ub)内，否则到[lb, mid)找</span></span><br><span class="line">                lb = mid;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                ub = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums[lb] == target ? lb : -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="81-搜索元素有重复的旋转排序数组"><a href="#81-搜索元素有重复的旋转排序数组" class="headerlink" title="81. 搜索元素有重复的旋转排序数组"></a><a href="https://leetcode-cn.com/problems/search-in-rotated-sorted-array-ii/">81. 搜索元素有重复的旋转排序数组</a></h3><p>需要跳过重复项。</p>
<p>解法1：先满足二段性。在找旋转点，最后找元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">lb</span> <span class="operator">=</span> <span class="number">0</span>, ub = n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (lb &lt; ub &amp;&amp; nums[ub] == nums[lb])</span><br><span class="line">        ub--;</span><br><span class="line">    <span class="keyword">while</span> (lb &lt; ub) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (ub-lb +<span class="number">1</span>)/<span class="number">2</span>+lb;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &gt;= nums[<span class="number">0</span>])</span><br><span class="line">            lb = mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ub = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (target &gt;= nums[<span class="number">0</span>])</span><br><span class="line">        lb = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        lb = ub + <span class="number">1</span>;</span><br><span class="line">        ub = n - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (lb &lt; ub) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (ub-lb)/<span class="number">2</span>+lb;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &gt;= target)</span><br><span class="line">            ub = mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            lb = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> nums[ub] == target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>解法2：</p>
<p>对于数组中有重复元素的情况，二分查找时可能会有 a[l]&#x3D;a[mid]&#x3D;a[r]，此时无法判断区间 [l,mid] 和区间 [mid+1,r] 哪个是有序的。</p>
<p>例如 nums&#x3D;[3,1,2,3,3,3,3]，target&#x3D;2，首次二分时无法判断区间 [0,3] 和区间 [4,6] 哪个是有序的。</p>
<p>对于这种情况，我们只能将当前二分区间的左边界加一，右边界减一，然后在新区间上继续二分查找。也可以仅仅左边界加1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">lb</span> <span class="operator">=</span> <span class="number">0</span>, ub = n;</span><br><span class="line">    <span class="keyword">while</span> (ub - lb &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (ub - lb) / <span class="number">2</span> + lb;</span><br><span class="line">        <span class="keyword">if</span> (nums[lb] == nums[mid]) &#123;</span><br><span class="line">            lb++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[lb] &lt; nums[mid]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[lb] &lt;= target &amp;&amp; target &lt; nums[mid])</span><br><span class="line">                ub = mid;</span><br><span class="line">            <span class="keyword">else</span>   </span><br><span class="line">                lb = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt;= target &amp;&amp; target &lt;= nums[ub-<span class="number">1</span>])</span><br><span class="line">                lb = mid;</span><br><span class="line">            <span class="keyword">else</span>   </span><br><span class="line">                ub = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums[lb] == target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>解法3</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">lb</span> <span class="operator">=</span> -<span class="number">1</span>, ub = nums.length-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (ub-lb&gt;<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (ub-lb)/<span class="number">2</span>+lb;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] == nums[ub]) &#123;</span><br><span class="line">            ub--;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; nums[ub]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt; target &amp;&amp; target &lt;= nums[ub]) &#123;</span><br><span class="line">                lb = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ub = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[lb+<span class="number">1</span>] &lt;= target &amp;&amp; target &lt;= nums[mid]) &#123;</span><br><span class="line">                ub = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                lb = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> nums[ub] == target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="153-寻找无重复元素的旋转排序数组中的最小值"><a href="#153-寻找无重复元素的旋转排序数组中的最小值" class="headerlink" title="153. 寻找无重复元素的旋转排序数组中的最小值"></a><a href="https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/">153. 寻找无重复元素的旋转排序数组中的最小值</a></h3><p>解法1：</p>
<p>经过旋转的数组，显然前半段满足 &gt;&#x3D; nums[0]，而后半段不满足 &gt;&#x3D; nums[0]。我们可以以此作为依据，通过「二分」找到旋转点。然后通过旋转点找到全局最小值即可。</p>
<p>首先找到旋转点。旋转点的下一个元素就是最小值。</p>
<p>注意升序情况下，旋转点会变为n-1，对应最小值(n-1)+1不合法，此时最小值是nums[0]</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findMin</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">lb</span> <span class="operator">=</span> <span class="number">0</span>, ub = n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (lb &lt; ub) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (ub-lb+<span class="number">1</span>)/<span class="number">2</span> + lb;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &gt; nums[<span class="number">0</span>])</span><br><span class="line">            lb = mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ub = ub - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ub + <span class="number">1</span> &lt; n ? nums[ub+<span class="number">1</span>] : nums[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解法2：</p>
<p>求最小值使用 (lb, ub] 区间。该题中<strong>只能使用右边界判断</strong>。</p>
<p>另外假如使用左边界，对于[1,2,3,4]和[2,3,4,1]来说，lb&#x3D;0，ub&#x3D;4，mid&#x3D;2；那么nums[lb]&lt;nums[mid]，[1,2,3,4]的最小值落入了[lb, mid)区间，[2,3,4,1]的最小值却在[mid, ub)区间。因此无法使用左边界判定最小值的落入区间，但可以用右边界进行判定。</p>
<p>使用右边界，对于[1,2,3,4]和[2,3,4,1]来说，lb&#x3D;-1，ub&#x3D;3，mid&#x3D;1；</p>
<ul>
<li><p>如果nums[mid] &lt; nums[ub]，说明最小值在 (lb, mid] 区间</p>
</li>
<li><p>如果nums[mid] &gt; nums[ub]，说明最小值在 (mid, ub] 区间</p>
</li>
</ul>
<p>最终最小值就是nums[ub]</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findMin</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">lb</span> <span class="operator">=</span> -<span class="number">1</span>, ub = n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (ub - lb &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (ub - lb) / <span class="number">2</span> + lb;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &lt; nums[ub]) </span><br><span class="line">            ub = mid;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            lb = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums[ub];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="154-寻找元素有重复的旋转排序数组中的最小值"><a href="#154-寻找元素有重复的旋转排序数组中的最小值" class="headerlink" title="154. 寻找元素有重复的旋转排序数组中的最小值"></a><a href="https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array-ii/">154. 寻找元素有重复的旋转排序数组中的最小值</a></h3><p>解法1：</p>
<p>经过旋转的数组，显然前半段满足 &gt;&#x3D; nums[0]，而后半段不满足 &gt;&#x3D; nums[0]。我们可以以此作为依据，通过「二分」找到旋转点。然后通过旋转点找到全局最小值即可。</p>
<p>首先找到旋转点。旋转点的下一个元素就是最小值。</p>
<p>重复元素情况首先要满足二段性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findMin</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">lb</span> <span class="operator">=</span> <span class="number">0</span>, ub = n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (lb &lt; ub &amp;&amp; nums[ub] == nums[lb])</span><br><span class="line">        ub--;</span><br><span class="line">    <span class="keyword">while</span> (lb &lt; ub) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (ub - lb + <span class="number">1</span>) / <span class="number">2</span> + lb;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &gt;= nums[<span class="number">0</span>])</span><br><span class="line">            lb = mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ub = ub - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ub + <span class="number">1</span> &lt; n ? nums[ub+<span class="number">1</span>] : nums[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>解法2：</p>
<p>和有重复元素的旋转数组搜索特定值类似，先缩小重复范围，然后进行二分即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findMin</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">lb</span> <span class="operator">=</span> -<span class="number">1</span>, ub = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(ub - lb &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (ub - lb) / <span class="number">2</span> + lb;</span><br><span class="line">        <span class="keyword">if</span> (nums[ub] == nums[mid]) </span><br><span class="line">            ub--;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; nums[ub]) </span><br><span class="line">            ub = mid;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            lb = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums[ub];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="面试题-10-03-搜索旋转数组返回最小索引"><a href="#面试题-10-03-搜索旋转数组返回最小索引" class="headerlink" title="面试题 10.03. 搜索旋转数组返回最小索引"></a><a href="https://leetcode-cn.com/problems/search-rotate-array-lcci/">面试题 10.03. 搜索旋转数组返回最小索引</a></h3><p>解法1：</p>
<p>先找旋转点，再找元素只。</p>
<p>重复元素先使得数组满足二段性</p>
<p>对于首尾元素相同的情况下，由于一开始就先缩小了右边界，因此结果会在左端找到，满足要求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">lb</span> <span class="operator">=</span> <span class="number">0</span>, ub = n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (lb &lt; ub &amp;&amp; nums[ub] == nums[lb]) ub--;</span><br><span class="line">    <span class="keyword">while</span> (lb &lt; ub) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (ub-lb+<span class="number">1</span>)/<span class="number">2</span> + lb;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &gt;= nums[<span class="number">0</span>])</span><br><span class="line">            lb = mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ub = ub - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (target &gt;= nums[<span class="number">0</span>])</span><br><span class="line">        lb = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        lb = ub + <span class="number">1</span>;</span><br><span class="line">        ub = n - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (lb &lt; ub) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (ub - lb)/ <span class="number">2</span> + lb;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &gt;= target)</span><br><span class="line">            ub = mid;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            lb = lb + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums[ub] == target ? ub : -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>解法2：</p>
<p>重复元素要求返回最小索引，那么首先确定要缩小ub，因此区间为左开右闭 (lb, ub]</p>
<p>那么为了方便，比较的是nums[mid]和nums[ub]，而不是nums[lb+1]</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">lb</span> <span class="operator">=</span> -<span class="number">1</span>, ub = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (ub - lb &gt; <span class="number">1</span> &amp;&amp; nums[ub] == nums[lb+<span class="number">1</span>])</span><br><span class="line">        ub--;</span><br><span class="line">    <span class="keyword">while</span> (ub - lb &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (ub-lb)/<span class="number">2</span>+ lb;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &lt; nums[ub]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt; target &amp;&amp; target &lt;= nums[ub])</span><br><span class="line">                lb = mid;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                ub = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; nums[ub]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[lb+<span class="number">1</span>] &lt;= target &amp;&amp; target &lt;= nums[mid])</span><br><span class="line">                ub = mid;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                lb = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ub--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums[ub] == target ? ub : -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>解法3 </p>
<p>如果 nums[0]&#x3D;&#x3D;target，使用二分法的时候会导致左右两边都有可能出现目标值，需要特殊处理才能解决，为了简化代码和普通的二分法写法相似，故排除这种情况</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">lb</span> <span class="operator">=</span> -<span class="number">1</span>, ub = nums.length-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (nums[<span class="number">0</span>] == target) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ub - lb &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (ub-lb)/<span class="number">2</span> + lb;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] == nums[ub]) &#123;</span><br><span class="line">            ub--;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; nums[ub]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt; target &amp;&amp; target &lt;= nums[ub]) &#123;</span><br><span class="line">                lb = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ub = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[lb+<span class="number">1</span>] &lt;= target &amp;&amp; target &lt;= nums[mid]) &#123;</span><br><span class="line">                ub = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                lb = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums[ub] == target ? ub : -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="搜索指定值"><a href="#搜索指定值" class="headerlink" title="搜索指定值"></a>搜索指定值</h2><h3 id="704-二分查找"><a href="#704-二分查找" class="headerlink" title="704. 二分查找"></a><a href="https://leetcode.cn/problems/binary-search/">704. 二分查找</a></h3><p>写法1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">lb</span> <span class="operator">=</span> -<span class="number">1</span>, ub = nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (ub-lb &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (ub-lb)/<span class="number">2</span>+lb;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt;= target) &#123;</span><br><span class="line">                ub = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                lb = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> nums[ub] == target ? ub : -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>写法2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">lb</span> <span class="operator">=</span> <span class="number">0</span>, ub = nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (lb &lt; ub) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (ub-lb)/<span class="number">2</span>+lb;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt;= target) &#123;</span><br><span class="line">                ub = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                lb = mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> nums[ub] == target ? ub : -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="74-搜索二维矩阵"><a href="#74-搜索二维矩阵" class="headerlink" title="74. 搜索二维矩阵"></a><a href="https://leetcode-cn.com/problems/search-a-2d-matrix/">74. 搜索二维矩阵</a></h3><p>根据题意可知，二维矩阵可以看作是每一行相连接的超长一维有序数组。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">searchMatrix</span><span class="params">(<span class="type">int</span>[][] matrix, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> matrix.length, n = matrix[<span class="number">0</span>].length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">lb</span> <span class="operator">=</span> <span class="number">0</span>, ub = m * n;</span><br><span class="line">    <span class="keyword">while</span> (ub - lb &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (ub - lb) / <span class="number">2</span> + lb;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> mid / n, y = mid % n;</span><br><span class="line">        <span class="keyword">if</span> (matrix[x][y] &lt;= target)</span><br><span class="line">            lb = mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ub = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> matrix[lb/n][lb%n] == target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="缩小结果集"><a href="#缩小结果集" class="headerlink" title="缩小结果集"></a>缩小结果集</h2><h3 id="287-寻找重复数"><a href="#287-寻找重复数" class="headerlink" title="287. 寻找重复数"></a><a href="https://leetcode-cn.com/problems/find-the-duplicate-number/">287. 寻找重复数</a></h3><p>二分查找的思路是先猜一个数（有效范围 [left..right] 里位于中间的数 mid），然后统计原始数组中小于等于 mid 的元素的个数 cnt：</p>
<ol>
<li>如果 cnt 严格大于 mid。根据抽屉原理，重复元素就在区间 [left..mid] 里；</li>
<li>否则，重复元素就在区间 [mid + 1..right] 里。</li>
</ol>
<p>比如 [1,2,3,4,5] 小于等于2的数字个数肯定为2  如果cnt &gt; mid, 比如 [1,2,2,3,4]，那说明在[1，2，2]中一定有重复的数字， 然后用二分在[1，mid]中继续找，反之亦然</p>
<p>定义 $cnt[i]$ 表示 $nums$ 数组中小于等于 $i$ 的数有多少个，假设我们重复的数是 $target$，那么 $[1,target−1$ ]里的所有数满足 $cnt[i]≤i$，$[target,n]$ 里的所有数满足 $cnt[i]&gt;i$，具有单调性。</p>
<p>时间复杂度：$O(nlogn)$</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findDuplicate</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">lb</span> <span class="operator">=</span> <span class="number">1</span>, ub = nums.length-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (lb &lt; ub) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (ub - lb) / <span class="number">2</span> + lb;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &lt;= mid)</span><br><span class="line">                cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cnt &gt; mid)</span><br><span class="line">            ub = mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            lb = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ub;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>写法 2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findDuplicate</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">lb</span> <span class="operator">=</span> <span class="number">0</span>, ub = n-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (ub - lb &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (ub-lb)/<span class="number">2</span> + lb;</span><br><span class="line">        <span class="keyword">if</span> (check(nums, mid)) &#123;</span><br><span class="line">            ub = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            lb = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ub;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] &lt;= target) &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count &gt; target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p>还有一种思路是环形链表问题的解法。详情见 DataStructure.md</p>
<h3 id="剑指-Offer-53-II-0～n-1中缺失的数字"><a href="#剑指-Offer-53-II-0～n-1中缺失的数字" class="headerlink" title="剑指 Offer 53 - II. 0～n-1中缺失的数字"></a><a href="https://leetcode-cn.com/problems/que-shi-de-shu-zi-lcof/">剑指 Offer 53 - II. 0～n-1中缺失的数字</a></h3><p><strong>排序数组中的搜索问题，首先想到 二分法 解决</strong>。<br>根据题意，数组可以按照以下规则划分为两部分。<br>左子数组： $nums[i] &#x3D; i$；<br>右子数组： $nums[i] \ne i$ </p>
<p>缺失的数字，就是找满足 $nums[i] \ne i$ 的最小值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">missingNumber</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">lb</span> <span class="operator">=</span> -<span class="number">1</span>, ub = nums.length;</span><br><span class="line">    <span class="keyword">while</span> (ub - lb &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (ub - lb) / <span class="number">2</span> + lb;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] != mid)</span><br><span class="line">            ub = mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            lb = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ub;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>POJ 1759</p>
<p>POJ 3484</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>二分搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>架构提效的矛盾和矛盾的主要方面</title>
    <url>/2025/01/03/%E6%9E%B6%E6%9E%84%E6%8F%90%E6%95%88%E7%9A%84%E7%9F%9B%E7%9B%BE%E5%92%8C%E7%9F%9B%E7%9B%BE%E7%9A%84%E4%B8%BB%E8%A6%81%E6%96%B9%E9%9D%A2/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="c4a8a91b267e24c3a035a851964fe7d059f5e3ffd0844df14fde4238b92c8020"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码查看文章</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>架构</category>
      </categories>
      <tags>
        <tag>架构理论</tag>
      </tags>
  </entry>
  <entry>
    <title>差异自动化分析处理平台的探索与实践</title>
    <url>/2025/01/03/%E5%B7%AE%E5%BC%82%E8%87%AA%E5%8A%A8%E5%8C%96%E5%88%86%E6%9E%90%E5%A4%84%E7%90%86%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%8E%A2%E7%B4%A2%E4%B8%8E%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="9665778ecdd92071862a8ceeb445fc6c7bed2a0bdb15b4043f815089054f7502"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码查看文章</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>系统设计</category>
      </categories>
      <tags>
        <tag>业务校验平台</tag>
      </tags>
  </entry>
  <entry>
    <title>腾讯新闻插件接入层重构实践：代码量锐减，迭代效率提升50%！</title>
    <url>/2025/01/02/%E8%85%BE%E8%AE%AF%E6%96%B0%E9%97%BB%E6%8F%92%E4%BB%B6%E6%8E%A5%E5%85%A5%E5%B1%82%E9%87%8D%E6%9E%84%E5%AE%9E%E8%B7%B5%EF%BC%9A%E4%BB%A3%E7%A0%81%E9%87%8F%E9%94%90%E5%87%8F%EF%BC%8C%E8%BF%AD%E4%BB%A3%E6%95%88%E7%8E%87%E6%8F%90%E5%8D%8750-%EF%BC%81/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="56c59ed3ee0106e90a14518154dd731fc56678d8bce6bca5385b6dc92c73a439"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码查看文章</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>重构</category>
      </categories>
      <tags>
        <tag>重构</tag>
      </tags>
  </entry>
</search>
